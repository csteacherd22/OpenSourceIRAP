script.dir <- dirname(sys.frame(1)$ofile)
script.dir <- dirname(sys.frame(1)$ofile)
this.dir <- dirname(parent.frame(2)$ofile)
rm(list=ls())
########################################################################
# Dependencies
library(plyr) #must import before dplyr
library(dplyr)
library(tidyr)
library(readr)
library(stringr)
library(data.table)
setwd("~/Dropbox/Work/Projects/P4N 2016 course/Personal project/IRAP/IRAP P4N 0.10/data")
files <- list.files(pattern = "\\.csv$")
files
df <- tbl_df(rbind.fill(lapply(files, fread, header=TRUE)))
df <- tbl_df(rbind.fill(lapply(files, fread, header=TRUE)))
View(df)
View(df)
write.csv(df, file = "df_data.csv", row.names=TRUE)
df_output <-
filter(df, !is.na(test_blocks.thisN)) %>%  # test blocks only
group_by(participant)
########################################################################
# Create summary stats and D scores from data produced by the
# Implicit Relational Assessment Procedure
# as programmed in PsychoPy 1.82
# Ian.Hussey@ugent.be
########################################################################
# Notes:
# Likert calculations need independant validation
# Doesn't include reliability analysis
########################################################################
# Clean the workspace
rm(list=ls())
########################################################################
# Dependencies
library(plyr) #must import before dplyr
library(dplyr)
library(tidyr)
library(readr)
library(stringr)
library(data.table)
########################################################################
# Data acquisition and cleaning
# Set the working directory in which to look for data files
setwd("~/Dropbox/Work/Projects/P4N 2016 course/Personal project/IRAP/IRAP P4N 0.10/data")
# Create a list of the csv files in this folder
files <- list.files(pattern = "\\.csv$")
# Read these files into a single dplyr-style data frame. You can remove the tbl_df() to get a standard data frame if you prefer.
df <- tbl_df(rbind.fill(lapply(files, fread, header=TRUE)))
# Make some variable names more transparent, plus rectify the the accuracy variable
#df <-
#  rename(df,
#         ) %>% # accuracy of the first response (currently reversed: 0 = correct)
########################################################################
# Data processing
# test blocks
df_output <-
filter(df, !is.na(test_blocks.thisN)) %>%  # test blocks only
group_by(participant)
# Set the working directory in which to look for data files
setwd("~/Dropbox/Work/Projects/P4N 2016 course/Personal project/IRAP/IRAP P4N 0.10/data")
# Create a list of the csv files in this folder
files <- list.files(pattern = "\\.csv$")
# Read these files into a single dplyr-style data frame. You can remove the tbl_df() to get a standard data frame if you prefer.
df <- tbl_df(rbind.fill(lapply(files, fread, header=TRUE)))
# Make some variable names more transparent, plus rectify the the accuracy variable
df <-
rename(df,
current_test_block = test_blocks.thisN,
rt_block_A = required_response_A.rt,
rt_block_B = required_response_B.rt) %>% # accuracy of the first response (currently reversed: 0 = correct)
########################################################################
# Data processing
# test blocks
df_output <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(
# mean RT in the critical blocks
test_all_block_A_mean_latency = mean(rt_block_A[current_test_block == 0 | blocks == 1 | blocks == 2]),
test_all_block_B_mean_latency = mean(rt_block_B[current_test_block == 0 | blocks == 1 | blocks == 2]),
all_test_blocks_mean_latency = mean(test_all_block_A_mean_latency, test_all_block_B_mean_latency),
# D score test block 1
rt_test1_A_mean = mean(rt_block_A[current_test_block == 0]),
rt_test1_B_mean = mean(rt_block_B[current_test_block == 0]),
rt_test1_diff = rt_test1_B_mean - rt_test1_A_mean,
rt_test1_sd = sd(rt_block_A[current_test_block == 0]),  # HOW TO DO SD FROM MULTIPLE ROWS???
DIRAP_test1 = rt_test1_diff / rt_test1_sd) %>%
# then do for other test blocks, and at the trial type level, and for the overall, and possibly for the task.
# recitfy D scores based on block order. If first block = b, then DIRAP*-1
# Select only the key columns
select(participant,
DIRAP_test1)
setwd("~/Dropbox/Work/Projects/P4N 2016 course/Personal project/IRAP/IRAP P4N 0.10/data")
# Create a list of the csv files in this folder
files <- list.files(pattern = "\\.csv$")
# Read these files into a single dplyr-style data frame. You can remove the tbl_df() to get a standard data frame if you prefer.
df <- tbl_df(rbind.fill(lapply(files, fread, header=TRUE)))
files <- list.files(pattern = "\\.csv$")
df <- tbl_df(rbind.fill(lapply(files, fread, header=TRUE)))
df <-
rename(df,
current_test_block = test_blocks.thisN,
rt_block_A = required_response_A.rt,
rt_block_B = required_response_B.rt) %>% # accuracy of the first response (currently reversed: 0 = correct)
df <-
rename(df,
current_test_block = test_blocks.thisN,
rt_block_A = required_response_A.rt,
rt_block_B = required_response_B.rt) # accuracy of the first response (currently reversed: 0 = correct)
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(
# mean RT in the critical blocks
test_all_block_A_mean_latency = mean(rt_block_A[current_test_block == 0 | blocks == 1 | blocks == 2]),
test_all_block_B_mean_latency = mean(rt_block_B[current_test_block == 0 | blocks == 1 | blocks == 2]),
all_test_blocks_mean_latency = mean(test_all_block_A_mean_latency, test_all_block_B_mean_latency),
# D score test block 1
rt_test1_A_mean = mean(rt_block_A[current_test_block == 0]),
rt_test1_B_mean = mean(rt_block_B[current_test_block == 0]),
rt_test1_diff = rt_test1_B_mean - rt_test1_A_mean,
rt_test1_sd = sd(rt_block_A[current_test_block == 0]),  # HOW TO DO SD FROM MULTIPLE ROWS???
DIRAP_test1 = rt_test1_diff / rt_test1_sd) %>%
# then do for other test blocks, and at the trial type level, and for the overall, and possibly for the task.
# recitfy D scores based on block order. If first block = b, then DIRAP*-1
# Select only the key columns
select(participant,
DIRAP_test1)
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(
# mean RT in the critical blocks
test_all_block_A_mean_latency = mean(rt_block_A[current_test_block == 0 | current_test_block == 1 | current_test_block == 2]),
test_all_block_B_mean_latency = mean(rt_block_B[current_test_block == 0 | current_test_block == 1 | current_test_block == 2]),
all_test_blocks_mean_latency = mean(test_all_block_A_mean_latency, test_all_block_B_mean_latency),
# D score test block 1
rt_test1_A_mean = mean(rt_block_A[current_test_block == 0]),
rt_test1_B_mean = mean(rt_block_B[current_test_block == 0]),
rt_test1_diff = rt_test1_B_mean - rt_test1_A_mean,
rt_test1_sd = sd(rt_block_A[current_test_block == 0]),  # HOW TO DO SD FROM MULTIPLE ROWS???
DIRAP_test1 = rt_test1_diff / rt_test1_sd) %>%
# then do for other test blocks, and at the trial type level, and for the overall, and possibly for the task.
# recitfy D scores based on block order. If first block = b, then DIRAP*-1
# Select only the key columns
select(participant,
DIRAP_test1)
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(
# mean RT in the critical blocks
test_all_block_A_mean_latency = mean(rt_block_A[current_test_block == 0 | current_test_block == 1 | current_test_block == 2]),
test_all_block_B_mean_latency = mean(rt_block_B[current_test_block == 0 | current_test_block == 1 | current_test_block == 2]),
all_test_blocks_mean_latency = mean(test_all_block_A_mean_latency, test_all_block_B_mean_latency)
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(
# mean RT in the critical blocks
test_all_block_A_mean_latency = mean(rt_block_A[current_test_block == 0 | current_test_block == 1 | current_test_block == 2]),
test_all_block_B_mean_latency = mean(rt_block_B[current_test_block == 0 | current_test_block == 1 | current_test_block == 2]),
all_test_blocks_mean_latency = mean(test_all_block_A_mean_latency, test_all_block_B_mean_latency),
# D score test block 1
rt_test1_A_mean = mean(rt_block_A[current_test_block == 0]),
rt_test1_B_mean = mean(rt_block_B[current_test_block == 0]),
rt_test1_diff = rt_test1_B_mean - rt_test1_A_mean,
rt_test1_sd = sd(rt_block_A[current_test_block == 0]),  # HOW TO DO SD FROM MULTIPLE ROWS???
DIRAP_test1 = rt_test1_diff / rt_test1_sd)
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(
# mean RT in the critical blocks
test_all_block_A_mean_latency = mean(rt_block_A[current_test_block == 0 | current_test_block == 1 | current_test_block == 2]),
test_all_block_B_mean_latency = mean(rt_block_B[current_test_block == 0 | current_test_block == 1 | current_test_block == 2]),
all_test_blocks_mean_latency = mean(test_all_block_A_mean_latency, test_all_block_B_mean_latency),
# D score test block 1
rt_test1_A_mean = mean(rt_block_A[current_test_block == 0]),
rt_test1_B_mean = mean(rt_block_B[current_test_block == 0]),
rt_test1_diff = rt_test1_B_mean - rt_test1_A_mean)
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(
# mean RT in the critical blocks
test_all_block_A_mean_latency = mean(rt_block_A[current_test_block == 0 | current_test_block == 1 | current_test_block == 2]),
test_all_block_B_mean_latency = mean(rt_block_B[current_test_block == 0 | current_test_block == 1 | current_test_block == 2]),
all_test_blocks_mean_latency = mean(test_all_block_A_mean_latency, test_all_block_B_mean_latency),
# D score test block 1
rt_test1_A_mean = mean(rt_block_A[current_test_block == 0]))
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(
# mean RT in the critical blocks
test_all_block_A_mean_latency = mean(rt_block_A[current_test_block == 0 | current_test_block == 1 | current_test_block == 2]),
test_all_block_B_mean_latency = mean(rt_block_B[current_test_block == 0 | current_test_block == 1 | current_test_block == 2]),
all_test_blocks_mean_latency = mean(test_all_block_A_mean_latency, test_all_block_B_mean_latency),
# D score test block 1
rt_test1_A_mean = mean(rt_block_A))
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(
# mean RT in the critical blocks
test_all_block_A_mean_latency = mean(rt_block_A),
test_all_block_B_mean_latency = mean(rt_block_B),
all_test_blocks_mean_latency = mean(test_all_block_A_mean_latency, test_all_block_B_mean_latency),
# D score test block 1
rt_test1_A_mean = mean(rt_block_A),
rt_test1_B_mean = mean(rt_block_B),
rt_test1_diff = rt_test1_B_mean - rt_test1_A_mean,
rt_test1_sd = sd(rt_block_A, rt_block_B),  # HOW TO DO SD FROM MULTIPLE ROWS???
DIRAP_test1 = rt_test1_diff / rt_test1_sd)
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(
# mean RT in the critical blocks
test_all_block_A_mean_latency = mean(rt_block_A),
test_all_block_B_mean_latency = mean(rt_block_B),
all_test_blocks_mean_latency = mean(test_all_block_A_mean_latency, test_all_block_B_mean_latency),
# D score test block 1
rt_test1_A_mean = mean(rt_block_A),
rt_test1_B_mean = mean(rt_block_B),
rt_test1_diff = rt_test1_B_mean - rt_test1_A_mean,
rt_test1_sd = sd(rt_block_A),  # HOW TO DO SD FROM MULTIPLE ROWS???
DIRAP_test1 = rt_test1_diff / rt_test1_sd)
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(
# mean RT in the critical blocks
test_all_block_A_mean_latency = mean(rt_block_A),
test_all_block_B_mean_latency = mean(rt_block_B),
all_test_blocks_mean_latency = mean(test_all_block_A_mean_latency, test_all_block_B_mean_latency),
# D score test block 1
rt_test1_A_mean = mean(rt_block_A),
rt_test1_B_mean = mean(rt_block_B))
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(
# mean RT in the critical blocks
test_all_block_A_mean_latency = mean(rt_block_A),
test_all_block_B_mean_latency = mean(rt_block_B),
all_test_blocks_mean_latency = mean(test_all_block_A_mean_latency, test_all_block_B_mean_latency))
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant)
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant)
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(test_all_block_A_mean_latency = mean(rt_block_A),
test_all_block_B_mean_latency = mean(rt_block_B),
all_test_blocks_mean_latency = mean(test_all_block_A_mean_latency, test_all_block_B_mean_latency))
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(test_all_block_A_mean_latency = mean(rt_block_A[]),
test_all_block_B_mean_latency = mean(rt_block_B[]),
all_test_blocks_mean_latency = mean(test_all_block_A_mean_latency, test_all_block_B_mean_latency))
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(test_all_block_A_mean_latency = mean(rt_block_A[]),
test_all_block_B_mean_latency = mean(rt_block_B[]),
all_test_blocks_mean_latency = sum(test_all_block_A_mean_latency, test_all_block_B_mean_latency)/2)
DIRAP_df <-
filter(df, !is.na(current_test_block)) %>%  # test blocks only
group_by(participant) %>%
## D scores
summarize(test_all_block_A_mean_latency = mean(rt_block_A[]),
test_all_block_B_mean_latency = mean(rt_block_B[]),
all_test_blocks_mean_latency = sum(test_all_block_A_mean_latency, test_all_block_B_mean_latency)/2,
rt_test1_A_mean = mean(rt_block_A),
rt_test1_B_mean = mean(rt_block_B),
rt_test1_diff = rt_test1_B_mean - rt_test1_A_mean,
rt_test1_sd = sd(rt_block_A, rt_block_B),  # HOW TO DO SD FROM MULTIPLE ROWS???
DIRAP_test1 = rt_test1_diff / rt_test1_sd)
