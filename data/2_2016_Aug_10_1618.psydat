ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
V/Users/Ian/git/Open Source IRAP/Open Source IRAP.psyexp
p7
sS'dataFileName'
p8
V/Users/Ian/git/Open Source IRAP/data/2_2016_Aug_10_1618
p9
sS'runtimeInfo'
p10
NsS'name'
p11
S'IRAP'
p12
sS'dataNames'
p13
(lp14
S'labelA_stimuli_for_output'
p15
aS'labelB_stimuli_for_output'
p16
aS'targetA_stimuli_for_output'
p17
aS'targetB_stimuli_for_output'
p18
aS'labelA_image_stimuli_for_output'
p19
aS'labelB_image_stimuli_for_output'
p20
aS'targetA_image_stimuli_for_output'
p21
aS'targetB_image_stimuli_for_output'
p22
aS'stimulus1'
p23
aS'stimulus2'
p24
aS'img_stimulus1'
p25
aS'img_stimulus2'
p26
aS'response_option_left'
p27
aS'response_option_right'
p28
aS'required_response_A.keys'
p29
aS'required_response_A.corr'
p30
aS'required_response_A.rt'
p31
aS'feedback_response_A.keys'
p32
aS'feedback_response_A.corr'
p33
aS'feedback_response_A.rt'
p34
aS'required_response_B.keys'
p35
aS'required_response_B.corr'
p36
aS'required_response_B.rt'
p37
aS'feedback_response_B.keys'
p38
aS'feedback_response_B.corr'
p39
aS'feedback_response_B.rt'
p40
asS'autoLog'
p41
I01
sS'extraInfo'
p42
(dp43
Vparticipant
p44
V2
sVUseMonkey
p45
Vy
sVgender
p46
V
sVage
p47
V
sS'frameRate'
p48
cnumpy.core.multiarray
scalar
p49
(cnumpy
dtype
p50
(S'f8'
I0
I1
tRp51
(I3
S'<'
NNNI-1
I-1
I0
tbS'id\xc8\xe5U\xf8M@'
tRp52
sS'expName'
p53
g12
sS'date'
p54
V2016_Aug_10_1618
p55
sVStartingBlock
p56
Va
ssS'loopsUnfinished'
p57
(lp58
sS'saveWideText'
p59
I01
sS'thisEntry'
p60
(dp61
sS'version'
p62
S''
sS'_paramNamesSoFar'
p63
(lp64
Vresponse_option_left_location
p65
aVaccuracyCriterion
p66
aVresponse_option_right_location
p67
aVstimulus1_location
p68
aVseconds
p69
aVpercentCorrect
p70
aVend_message
p71
aVimage_stimulus1_location
p72
aVspeed
p73
aVaccuracy_feedback_location
p74
aVmoving_response_options
p75
aVrule_A
p76
aVimage_stimulus2_location
p77
aVrule_B
p78
aVpress_message
p79
aVIRAP_name
p80
aVintro_message
p81
aVaim
p82
aVresponse_option_B
p83
aVresponse_option_A
p84
aVlatencyCriterion
p85
aVstimulus2_location
p86
aVn_pairs_test_blocks
p87
aVmax_pairs_practice_blocks
p88
aVaccuracy
p89
aVtrialType
p90
aVstimulus1_category
p91
aVstimulus2_category
p92
asS'entries'
p93
(lp94
(dp95
g65
(lp96
F-0.29999999999999999
aF-0.59999999999999998
asg66
I80
sg18
(lp97
Vpain
p98
aVmean
p99
aVhostile
p100
aVhateful
p101
ag98
ag99
ag100
ag101
asg67
(lp102
F0.29999999999999999
aF-0.59999999999999998
asS'practice_Afirst.thisTrialN'
p103
I0
sS'task.thisIndex'
p104
g49
(g50
(S'i4'
I0
I1
tRp105
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00'
tRp106
sS'practice_Afirst.thisIndex'
p107
g49
(g105
S'\x00\x00\x00\x00'
tRp108
sg28
VSimilar
p109
sg29
Ve
sg15
(lp110
Vdaffodil
p111
aVrose
p112
aVlilly
p113
aVdaisy
p114
ag111
ag112
ag113
ag114
asS'practice_Afirst.thisTrial'
p115
NsS'task.thisN'
p116
I0
sg71
VEnd of task
p117
sg90
I3
sg72
(lp118
I0
aF0.29999999999999999
asg23
Vwasp
p119
sg20
(lp120
Vblank.png
p121
ag121
ag121
ag121
ag121
ag121
ag121
ag121
asg21
(lp122
g121
ag121
ag121
ag121
ag121
ag121
ag121
ag121
asg24
Vgood
p123
sg73
VSpeed:
p124
sg32
Vi
sS'practice_blocks.thisTrialN'
p125
I0
sS'practice_trials_Afirst.thisIndex'
p126
g49
(g105
S'\x02\x00\x00\x00'
tRp127
sg76
VRespond AS IF: \u000a    flowers are positive\u000a    insects are negative\u000a\u000aGo as quickly as you can while being accurate\u000a\u000aPress 'e' or 'i' to continue
p128
sg16
(lp129
Vspider
p130
ag119
aVmaggot
p131
aVbee
p132
ag130
ag119
ag131
ag132
asg91
Vb
sg78
VRespond AS IF: \u000a    insects are positive \u000a    flowers are negative\u000a\u000aGo as quickly as you can while being accurate\u000a\u000aPress 'e' or 'i' to continue
p133
sg79
VPress 'e' or 'i' to continue
p134
sg25
g121
sg26
g121
sg83
VDifferent
p135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p136
I0
sg86
(lp137
I0
aF-0.20000000000000001
asg30
I1
sS'practice_blocks.thisRepN'
p138
I0
sg19
(lp139
g121
ag121
ag121
ag121
ag121
ag121
ag121
ag121
asg89
VAccuracy:
p140
sg27
g135
sS'task.thisTrialN'
p141
I0
sg33
I1
sg45
Vy
sg69
g69
sg48
g52
sg56
Va
sg87
I3
sS'practice_blocks.thisIndex'
p142
g49
(g105
S'\x00\x00\x00\x00'
tRp143
sg70
Vpercent correct
p144
sS'practice_trials_Afirst.thisN'
p145
I0
sg31
F0.10152411460876465
sg81
VThis task will present you with pairs of words. \u000a\u000aYou will be given rules on how to respond to them. \u000a\u000aGo as quickly as you can while being accurate.\u000a\u000aPlace your fingers on the 'e' and 'i' keys. \u000a\u000aPress either one to continue.
p146
sS'practice_Afirst.thisN'
p147
I0
sS'practice_trials_Afirst.thisRepN'
p148
I0
sg54
g55
sg44
V2
sg17
(lp149
Vhappy
p150
aVfriendly
p151
aVpretty
p152
ag123
ag150
ag151
ag152
ag123
asg74
(lp153
I0
aF-0.69999999999999996
asS'practice_Afirst.thisRepN'
p154
I0
sg34
F0.10136604309082031
sg75
VFalse
p155
sg53
g12
sS'task.thisRepN'
p156
I0
sg77
(lp157
I0
aF-0.29999999999999999
asg46
V
sg47
V
sg92
Vc
sg80
Vflowers-insects demo IRAP
p158
sS'practice_blocks.thisTrial'
p159
Nsg82
VAim for >80% and <2 seconds
p160
sg68
(lp161
I0
aF0.20000000000000001
asS'practice_trials_Afirst.thisTrialN'
p162
I0
sg22
(lp163
g121
ag121
ag121
ag121
ag121
ag121
ag121
ag121
asg88
I4
sa(dp164
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p165
I0
sS'task.thisIndex'
p166
g106
sS'practice_Afirst.thisIndex'
p167
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p168
NsS'task.thisN'
p169
I0
sg71
g117
sg90
I2
sg72
g118
sg23
g114
sg24
g100
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p170
I0
sS'practice_trials_Afirst.thisIndex'
p171
g49
(g105
S'\x01\x00\x00\x00'
tRp172
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p173
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p174
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p175
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p176
NsS'practice_blocks.thisIndex'
p177
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p178
I1
sS'task.thisRepN'
p179
I0
sg81
g146
sS'practice_Afirst.thisN'
p180
I0
sS'practice_trials_Afirst.thisRepN'
p181
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p182
I0
sg34
F0.10198402404785156
sg75
g155
sg53
g12
sg31
F0.10218691825866699
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p183
I1
sg87
I3
sg88
I4
sa(dp184
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p185
I0
sS'task.thisIndex'
p186
g106
sS'practice_Afirst.thisIndex'
p187
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p188
NsS'task.thisN'
p189
I0
sg71
g117
sg90
I1
sg72
g118
sg23
g112
sg24
g152
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p190
I0
sS'practice_trials_Afirst.thisIndex'
p191
g49
(g105
S'\x00\x00\x00\x00'
tRp192
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p193
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p194
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p195
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p196
NsS'practice_blocks.thisIndex'
p197
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p198
I2
sS'task.thisRepN'
p199
I0
sg81
g146
sS'practice_Afirst.thisN'
p200
I0
sS'practice_trials_Afirst.thisRepN'
p201
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p202
I0
sg34
F0.10135006904602051
sg75
g155
sg53
g12
sg31
F0.1016700267791748
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p203
I2
sg87
I3
sg88
I4
sa(dp204
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p205
I0
sS'task.thisIndex'
p206
g106
sS'practice_Afirst.thisIndex'
p207
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p208
NsS'task.thisN'
p209
I0
sg71
g117
sg90
I4
sg72
g118
sg23
g131
sg24
g101
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p210
I0
sS'practice_trials_Afirst.thisIndex'
p211
g49
(g105
S'\x03\x00\x00\x00'
tRp212
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p213
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p214
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p215
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p216
NsS'practice_blocks.thisIndex'
p217
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p218
I3
sS'task.thisRepN'
p219
I0
sg81
g146
sS'practice_Afirst.thisN'
p220
I0
sS'practice_trials_Afirst.thisRepN'
p221
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p222
I0
sg34
F0.10146307945251465
sg75
g155
sg53
g12
sg31
F0.10171699523925781
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p223
I3
sg87
I3
sg88
I4
sa(dp224
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p225
I0
sS'task.thisIndex'
p226
g106
sS'practice_Afirst.thisIndex'
p227
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p228
NsS'task.thisN'
p229
I0
sg71
g117
sg90
I1
sg72
g118
sg23
g113
sg24
g150
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p230
I0
sS'practice_trials_Afirst.thisIndex'
p231
g49
(g105
S'\x00\x00\x00\x00'
tRp232
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p233
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p234
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p235
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p236
NsS'practice_blocks.thisIndex'
p237
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p238
I4
sS'task.thisRepN'
p239
I0
sg81
g146
sS'practice_Afirst.thisN'
p240
I0
sS'practice_trials_Afirst.thisRepN'
p241
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p242
I0
sg34
F0.10161590576171875
sg75
g155
sg53
g12
sg31
F0.1018071174621582
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p243
I0
sg87
I3
sg88
I4
sa(dp244
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p245
I0
sS'task.thisIndex'
p246
g106
sS'practice_Afirst.thisIndex'
p247
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p248
NsS'task.thisN'
p249
I0
sg71
g117
sg90
I2
sg72
g118
sg23
g111
sg24
g98
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p250
I0
sS'practice_trials_Afirst.thisIndex'
p251
g49
(g105
S'\x01\x00\x00\x00'
tRp252
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p253
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p254
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p255
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p256
NsS'practice_blocks.thisIndex'
p257
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p258
I5
sS'task.thisRepN'
p259
I0
sg81
g146
sS'practice_Afirst.thisN'
p260
I0
sS'practice_trials_Afirst.thisRepN'
p261
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p262
I0
sg34
F0.10147714614868164
sg75
g155
sg53
g12
sg31
F0.10168981552124023
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p263
I1
sg87
I3
sg88
I4
sa(dp264
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p265
I0
sS'task.thisIndex'
p266
g106
sS'practice_Afirst.thisIndex'
p267
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p268
NsS'task.thisN'
p269
I0
sg71
g117
sg90
I4
sg72
g118
sg23
g130
sg24
g99
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p270
I0
sS'practice_trials_Afirst.thisIndex'
p271
g49
(g105
S'\x03\x00\x00\x00'
tRp272
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p273
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p274
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p275
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p276
NsS'practice_blocks.thisIndex'
p277
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p278
I6
sS'task.thisRepN'
p279
I0
sg81
g146
sS'practice_Afirst.thisN'
p280
I0
sS'practice_trials_Afirst.thisRepN'
p281
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p282
I0
sg34
F0.10108089447021484
sg75
g155
sg53
g12
sg31
F0.10126209259033203
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p283
I2
sg87
I3
sg88
I4
sa(dp284
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p285
I0
sS'task.thisIndex'
p286
g106
sS'practice_Afirst.thisIndex'
p287
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p288
NsS'task.thisN'
p289
I0
sg71
g117
sg90
I3
sg72
g118
sg23
g131
sg24
g152
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p290
I0
sS'practice_trials_Afirst.thisIndex'
p291
g49
(g105
S'\x02\x00\x00\x00'
tRp292
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p293
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p294
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p295
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p296
NsS'practice_blocks.thisIndex'
p297
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p298
I7
sS'task.thisRepN'
p299
I0
sg81
g146
sS'practice_Afirst.thisN'
p300
I0
sS'practice_trials_Afirst.thisRepN'
p301
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p302
I0
sg34
F0.10171890258789062
sg75
g155
sg53
g12
sg31
F0.10195302963256836
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p303
I3
sg87
I3
sg88
I4
sa(dp304
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p305
I0
sS'task.thisIndex'
p306
g106
sS'practice_Afirst.thisIndex'
p307
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p308
NsS'task.thisN'
p309
I0
sg71
g117
sg90
I4
sg72
g118
sg23
g132
sg24
g98
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p310
I0
sS'practice_trials_Afirst.thisIndex'
p311
g49
(g105
S'\x03\x00\x00\x00'
tRp312
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p313
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p314
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p315
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p316
NsS'practice_blocks.thisIndex'
p317
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p318
I8
sS'task.thisRepN'
p319
I0
sg81
g146
sS'practice_Afirst.thisN'
p320
I0
sS'practice_trials_Afirst.thisRepN'
p321
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p322
I0
sg34
F0.10117006301879883
sg75
g155
sg53
g12
sg31
F0.10136604309082031
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p323
I0
sg87
I3
sg88
I4
sa(dp324
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p325
I0
sS'task.thisIndex'
p326
g106
sS'practice_Afirst.thisIndex'
p327
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p328
NsS'task.thisN'
p329
I0
sg71
g117
sg90
I1
sg72
g118
sg23
g114
sg24
g150
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p330
I0
sS'practice_trials_Afirst.thisIndex'
p331
g49
(g105
S'\x00\x00\x00\x00'
tRp332
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p333
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p334
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p335
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p336
NsS'practice_blocks.thisIndex'
p337
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p338
I9
sS'task.thisRepN'
p339
I0
sg81
g146
sS'practice_Afirst.thisN'
p340
I0
sS'practice_trials_Afirst.thisRepN'
p341
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p342
I0
sg34
F0.10184693336486816
sg75
g155
sg53
g12
sg31
F0.10220789909362793
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p343
I1
sg87
I3
sg88
I4
sa(dp344
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p345
I0
sS'task.thisIndex'
p346
g106
sS'practice_Afirst.thisIndex'
p347
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p348
NsS'task.thisN'
p349
I0
sg71
g117
sg90
I2
sg72
g118
sg23
g113
sg24
g101
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p350
I0
sS'practice_trials_Afirst.thisIndex'
p351
g49
(g105
S'\x01\x00\x00\x00'
tRp352
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p353
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p354
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p355
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p356
NsS'practice_blocks.thisIndex'
p357
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p358
I10
sS'task.thisRepN'
p359
I0
sg81
g146
sS'practice_Afirst.thisN'
p360
I0
sS'practice_trials_Afirst.thisRepN'
p361
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p362
I0
sg34
F0.10234403610229492
sg75
g155
sg53
g12
sg31
F0.10241413116455078
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p363
I2
sg87
I3
sg88
I4
sa(dp364
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p365
I0
sS'task.thisIndex'
p366
g106
sS'practice_Afirst.thisIndex'
p367
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p368
NsS'task.thisN'
p369
I0
sg71
g117
sg90
I3
sg72
g118
sg23
g130
sg24
g150
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p370
I0
sS'practice_trials_Afirst.thisIndex'
p371
g49
(g105
S'\x02\x00\x00\x00'
tRp372
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p373
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p374
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p375
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p376
NsS'practice_blocks.thisIndex'
p377
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p378
I11
sS'task.thisRepN'
p379
I0
sg81
g146
sS'practice_Afirst.thisN'
p380
I0
sS'practice_trials_Afirst.thisRepN'
p381
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p382
I0
sg34
F0.10153388977050781
sg75
g155
sg53
g12
sg31
F0.10167789459228516
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p383
I3
sg87
I3
sg88
I4
sa(dp384
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p385
I0
sS'task.thisIndex'
p386
g106
sS'practice_Afirst.thisIndex'
p387
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p388
NsS'task.thisN'
p389
I0
sg71
g117
sg90
I1
sg72
g118
sg23
g111
sg24
g151
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p390
I0
sS'practice_trials_Afirst.thisIndex'
p391
g49
(g105
S'\x00\x00\x00\x00'
tRp392
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p393
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p394
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p395
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p396
NsS'practice_blocks.thisIndex'
p397
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p398
I12
sS'task.thisRepN'
p399
I0
sg81
g146
sS'practice_Afirst.thisN'
p400
I0
sS'practice_trials_Afirst.thisRepN'
p401
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p402
I0
sg34
F0.10164308547973633
sg75
g155
sg53
g12
sg31
F0.10193181037902832
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p403
I0
sg87
I3
sg88
I4
sa(dp404
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p405
I0
sS'task.thisIndex'
p406
g106
sS'practice_Afirst.thisIndex'
p407
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p408
NsS'task.thisN'
p409
I0
sg71
g117
sg90
I3
sg72
g118
sg23
g131
sg24
g152
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p410
I0
sS'practice_trials_Afirst.thisIndex'
p411
g49
(g105
S'\x02\x00\x00\x00'
tRp412
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p413
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p414
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p415
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p416
NsS'practice_blocks.thisIndex'
p417
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p418
I13
sS'task.thisRepN'
p419
I0
sg81
g146
sS'practice_Afirst.thisN'
p420
I0
sS'practice_trials_Afirst.thisRepN'
p421
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p422
I0
sg34
F0.10190296173095703
sg75
g155
sg53
g12
sg31
F0.10204410552978516
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p423
I1
sg87
I3
sg88
I4
sa(dp424
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p425
I0
sS'task.thisIndex'
p426
g106
sS'practice_Afirst.thisIndex'
p427
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p428
NsS'task.thisN'
p429
I0
sg71
g117
sg90
I2
sg72
g118
sg23
g112
sg24
g101
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p430
I0
sS'practice_trials_Afirst.thisIndex'
p431
g49
(g105
S'\x01\x00\x00\x00'
tRp432
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p433
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p434
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p435
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p436
NsS'practice_blocks.thisIndex'
p437
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p438
I14
sS'task.thisRepN'
p439
I0
sg81
g146
sS'practice_Afirst.thisN'
p440
I0
sS'practice_trials_Afirst.thisRepN'
p441
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p442
I0
sg34
F0.10167908668518066
sg75
g155
sg53
g12
sg31
F0.10186386108398438
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p443
I2
sg87
I3
sg88
I4
sa(dp444
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p445
I0
sS'task.thisIndex'
p446
g106
sS'practice_Afirst.thisIndex'
p447
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p448
NsS'task.thisN'
p449
I0
sg71
g117
sg90
I4
sg72
g118
sg23
g130
sg24
g99
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p450
I0
sS'practice_trials_Afirst.thisIndex'
p451
g49
(g105
S'\x03\x00\x00\x00'
tRp452
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p453
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p454
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p455
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p456
NsS'practice_blocks.thisIndex'
p457
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p458
I15
sS'task.thisRepN'
p459
I0
sg81
g146
sS'practice_Afirst.thisN'
p460
I0
sS'practice_trials_Afirst.thisRepN'
p461
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p462
I0
sg34
F0.10184812545776367
sg75
g155
sg53
g12
sg31
F0.10214400291442871
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p463
I3
sg87
I3
sg88
I4
sa(dp464
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p465
I0
sS'task.thisIndex'
p466
g106
sS'practice_Afirst.thisIndex'
p467
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p468
NsS'task.thisN'
p469
I0
sg71
g117
sg90
I3
sg72
g118
sg23
g132
sg24
g123
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p470
I0
sS'practice_trials_Afirst.thisIndex'
p471
g49
(g105
S'\x02\x00\x00\x00'
tRp472
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p473
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p474
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p475
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p476
NsS'practice_blocks.thisIndex'
p477
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p478
I16
sS'task.thisRepN'
p479
I0
sg81
g146
sS'practice_Afirst.thisN'
p480
I0
sS'practice_trials_Afirst.thisRepN'
p481
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p482
I0
sg34
F0.10147404670715332
sg75
g155
sg53
g12
sg31
F0.10179805755615234
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p483
I0
sg87
I3
sg88
I4
sa(dp484
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p485
I0
sS'task.thisIndex'
p486
g106
sS'practice_Afirst.thisIndex'
p487
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p488
NsS'task.thisN'
p489
I0
sg71
g117
sg90
I2
sg72
g118
sg23
g112
sg24
g99
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p490
I0
sS'practice_trials_Afirst.thisIndex'
p491
g49
(g105
S'\x01\x00\x00\x00'
tRp492
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p493
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p494
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p495
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p496
NsS'practice_blocks.thisIndex'
p497
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p498
I17
sS'task.thisRepN'
p499
I0
sg81
g146
sS'practice_Afirst.thisN'
p500
I0
sS'practice_trials_Afirst.thisRepN'
p501
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p502
I0
sg34
F0.1017298698425293
sg75
g155
sg53
g12
sg31
F0.10212898254394531
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p503
I1
sg87
I3
sg88
I4
sa(dp504
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p505
I0
sS'task.thisIndex'
p506
g106
sS'practice_Afirst.thisIndex'
p507
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p508
NsS'task.thisN'
p509
I0
sg71
g117
sg90
I1
sg72
g118
sg23
g114
sg24
g152
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p510
I0
sS'practice_trials_Afirst.thisIndex'
p511
g49
(g105
S'\x00\x00\x00\x00'
tRp512
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p513
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p514
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p515
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p516
NsS'practice_blocks.thisIndex'
p517
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p518
I18
sS'task.thisRepN'
p519
I0
sg81
g146
sS'practice_Afirst.thisN'
p520
I0
sS'practice_trials_Afirst.thisRepN'
p521
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p522
I0
sg34
F0.10125303268432617
sg75
g155
sg53
g12
sg31
F0.10161495208740234
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p523
I2
sg87
I3
sg88
I4
sa(dp524
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p525
I0
sS'task.thisIndex'
p526
g106
sS'practice_Afirst.thisIndex'
p527
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p528
NsS'task.thisN'
p529
I0
sg71
g117
sg90
I4
sg72
g118
sg23
g132
sg24
g100
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p530
I0
sS'practice_trials_Afirst.thisIndex'
p531
g49
(g105
S'\x03\x00\x00\x00'
tRp532
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p533
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p534
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p535
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p536
NsS'practice_blocks.thisIndex'
p537
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p538
I19
sS'task.thisRepN'
p539
I0
sg81
g146
sS'practice_Afirst.thisN'
p540
I0
sS'practice_trials_Afirst.thisRepN'
p541
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p542
I0
sg34
F0.10126399993896484
sg75
g155
sg53
g12
sg31
F0.10163307189941406
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p543
I3
sg87
I3
sg88
I4
sa(dp544
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p545
I0
sS'task.thisIndex'
p546
g106
sS'practice_Afirst.thisIndex'
p547
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p548
NsS'task.thisN'
p549
I0
sg71
g117
sg90
I1
sg72
g118
sg23
g113
sg24
g151
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p550
I0
sS'practice_trials_Afirst.thisIndex'
p551
g49
(g105
S'\x00\x00\x00\x00'
tRp552
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p553
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p554
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p555
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p556
NsS'practice_blocks.thisIndex'
p557
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p558
I20
sS'task.thisRepN'
p559
I0
sg81
g146
sS'practice_Afirst.thisN'
p560
I0
sS'practice_trials_Afirst.thisRepN'
p561
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p562
I0
sg34
F0.099837064743041992
sg75
g155
sg53
g12
sg31
F0.10007691383361816
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p563
I0
sg87
I3
sg88
I4
sa(dp564
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p565
I0
sS'task.thisIndex'
p566
g106
sS'practice_Afirst.thisIndex'
p567
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p568
NsS'task.thisN'
p569
I0
sg71
g117
sg90
I3
sg72
g118
sg23
g119
sg24
g151
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p570
I0
sS'practice_trials_Afirst.thisIndex'
p571
g49
(g105
S'\x02\x00\x00\x00'
tRp572
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p573
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p574
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p575
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p576
NsS'practice_blocks.thisIndex'
p577
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p578
I21
sS'task.thisRepN'
p579
I0
sg81
g146
sS'practice_Afirst.thisN'
p580
I0
sS'practice_trials_Afirst.thisRepN'
p581
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p582
I0
sg34
F0.10164403915405273
sg75
g155
sg53
g12
sg31
F0.10175704956054688
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p583
I1
sg87
I3
sg88
I4
sa(dp584
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p585
I0
sS'task.thisIndex'
p586
g106
sS'practice_Afirst.thisIndex'
p587
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p588
NsS'task.thisN'
p589
I0
sg71
g117
sg90
I2
sg72
g118
sg23
g114
sg24
g98
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p590
I0
sS'practice_trials_Afirst.thisIndex'
p591
g49
(g105
S'\x01\x00\x00\x00'
tRp592
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p593
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p594
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p595
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p596
NsS'practice_blocks.thisIndex'
p597
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p598
I22
sS'task.thisRepN'
p599
I0
sg81
g146
sS'practice_Afirst.thisN'
p600
I0
sS'practice_trials_Afirst.thisRepN'
p601
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p602
I0
sg34
F0.10152506828308105
sg75
g155
sg53
g12
sg31
F0.10158395767211914
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p603
I2
sg87
I3
sg88
I4
sa(dp604
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p605
I0
sS'task.thisIndex'
p606
g106
sS'practice_Afirst.thisIndex'
p607
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p608
NsS'task.thisN'
p609
I0
sg71
g117
sg90
I4
sg72
g118
sg23
g131
sg24
g98
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p610
I0
sS'practice_trials_Afirst.thisIndex'
p611
g49
(g105
S'\x03\x00\x00\x00'
tRp612
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p613
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p614
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p615
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p616
NsS'practice_blocks.thisIndex'
p617
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p618
I23
sS'task.thisRepN'
p619
I0
sg81
g146
sS'practice_Afirst.thisN'
p620
I0
sS'practice_trials_Afirst.thisRepN'
p621
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p622
I0
sg34
F0.10220718383789062
sg75
g155
sg53
g12
sg31
F0.10224509239196777
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p623
I3
sg87
I3
sg88
I4
sa(dp624
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p625
I0
sS'task.thisIndex'
p626
g106
sS'practice_Afirst.thisIndex'
p627
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p628
NsS'task.thisN'
p629
I0
sg71
g117
sg90
I1
sg72
g118
sg23
g112
sg24
g151
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p630
I0
sS'practice_trials_Afirst.thisIndex'
p631
g49
(g105
S'\x00\x00\x00\x00'
tRp632
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p633
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p634
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p635
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p636
NsS'practice_blocks.thisIndex'
p637
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p638
I24
sS'task.thisRepN'
p639
I0
sg81
g146
sS'practice_Afirst.thisN'
p640
I0
sS'practice_trials_Afirst.thisRepN'
p641
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p642
I0
sg34
F0.10198497772216797
sg75
g155
sg53
g12
sg31
F0.10228991508483887
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p643
I0
sg87
I3
sg88
I4
sa(dp644
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p645
I0
sS'task.thisIndex'
p646
g106
sS'practice_Afirst.thisIndex'
p647
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p648
NsS'task.thisN'
p649
I0
sg71
g117
sg90
I3
sg72
g118
sg23
g132
sg24
g123
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p650
I0
sS'practice_trials_Afirst.thisIndex'
p651
g49
(g105
S'\x02\x00\x00\x00'
tRp652
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p653
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p654
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p655
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p656
NsS'practice_blocks.thisIndex'
p657
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p658
I25
sS'task.thisRepN'
p659
I0
sg81
g146
sS'practice_Afirst.thisN'
p660
I0
sS'practice_trials_Afirst.thisRepN'
p661
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p662
I0
sg34
F0.10170197486877441
sg75
g155
sg53
g12
sg31
F0.10191798210144043
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p663
I1
sg87
I3
sg88
I4
sa(dp664
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p665
I0
sS'task.thisIndex'
p666
g106
sS'practice_Afirst.thisIndex'
p667
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p668
NsS'task.thisN'
p669
I0
sg71
g117
sg90
I4
sg72
g118
sg23
g130
sg24
g100
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p670
I0
sS'practice_trials_Afirst.thisIndex'
p671
g49
(g105
S'\x03\x00\x00\x00'
tRp672
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p673
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p674
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p675
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p676
NsS'practice_blocks.thisIndex'
p677
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p678
I26
sS'task.thisRepN'
p679
I0
sg81
g146
sS'practice_Afirst.thisN'
p680
I0
sS'practice_trials_Afirst.thisRepN'
p681
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p682
I0
sg34
F0.10111188888549805
sg75
g155
sg53
g12
sg31
F0.1013948917388916
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p683
I2
sg87
I3
sg88
I4
sa(dp684
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p685
I0
sS'task.thisIndex'
p686
g106
sS'practice_Afirst.thisIndex'
p687
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p688
NsS'task.thisN'
p689
I0
sg71
g117
sg90
I2
sg72
g118
sg23
g111
sg24
g100
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p690
I0
sS'practice_trials_Afirst.thisIndex'
p691
g49
(g105
S'\x01\x00\x00\x00'
tRp692
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p693
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p694
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p695
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p696
NsS'practice_blocks.thisIndex'
p697
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p698
I27
sS'task.thisRepN'
p699
I0
sg81
g146
sS'practice_Afirst.thisN'
p700
I0
sS'practice_trials_Afirst.thisRepN'
p701
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p702
I0
sg34
F0.10145998001098633
sg75
g155
sg53
g12
sg31
F0.10159707069396973
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p703
I3
sg87
I3
sg88
I4
sa(dp704
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p705
I0
sS'task.thisIndex'
p706
g106
sS'practice_Afirst.thisIndex'
p707
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p708
NsS'task.thisN'
p709
I0
sg71
g117
sg90
I1
sg72
g118
sg23
g113
sg24
g150
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p710
I0
sS'practice_trials_Afirst.thisIndex'
p711
g49
(g105
S'\x00\x00\x00\x00'
tRp712
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p713
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p714
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p715
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p716
NsS'practice_blocks.thisIndex'
p717
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p718
I28
sS'task.thisRepN'
p719
I0
sg81
g146
sS'practice_Afirst.thisN'
p720
I0
sS'practice_trials_Afirst.thisRepN'
p721
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p722
I0
sg34
F0.10092377662658691
sg75
g155
sg53
g12
sg31
F0.10122799873352051
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p723
I0
sg87
I3
sg88
I4
sa(dp724
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p725
I0
sS'task.thisIndex'
p726
g106
sS'practice_Afirst.thisIndex'
p727
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p728
NsS'task.thisN'
p729
I0
sg71
g117
sg90
I3
sg72
g118
sg23
g119
sg24
g123
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p730
I0
sS'practice_trials_Afirst.thisIndex'
p731
g49
(g105
S'\x02\x00\x00\x00'
tRp732
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p733
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p734
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p735
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p736
NsS'practice_blocks.thisIndex'
p737
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p738
I29
sS'task.thisRepN'
p739
I0
sg81
g146
sS'practice_Afirst.thisN'
p740
I0
sS'practice_trials_Afirst.thisRepN'
p741
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p742
I0
sg34
F0.10163116455078125
sg75
g155
sg53
g12
sg31
F0.10184001922607422
sg77
g157
sg46
V
sg47
V
sg92
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p743
I1
sg87
I3
sg88
I4
sa(dp744
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p745
I0
sS'task.thisIndex'
p746
g106
sS'practice_Afirst.thisIndex'
p747
g108
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p748
NsS'task.thisN'
p749
I0
sg71
g117
sg90
I4
sg72
g118
sg23
g119
sg24
g101
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p750
I0
sS'practice_trials_Afirst.thisIndex'
p751
g49
(g105
S'\x03\x00\x00\x00'
tRp752
sg76
g128
sg28
g109
sg91
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p753
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p754
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p755
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p756
NsS'practice_blocks.thisIndex'
p757
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p758
I30
sS'task.thisRepN'
p759
I0
sg81
g146
sS'practice_Afirst.thisN'
p760
I0
sS'practice_trials_Afirst.thisRepN'
p761
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p762
I0
sg34
F0.10184597969055176
sg75
g155
sg53
g12
sg31
F0.10204601287841797
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p763
I2
sg87
I3
sg88
I4
sa(dp764
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p765
I0
sS'task.thisIndex'
p766
g106
sS'practice_Afirst.thisIndex'
p767
g108
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p768
NsS'task.thisN'
p769
I0
sg71
g117
sg90
I2
sg72
g118
sg23
g111
sg24
g99
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p770
I0
sS'practice_trials_Afirst.thisIndex'
p771
g49
(g105
S'\x01\x00\x00\x00'
tRp772
sg76
g128
sg28
g109
sg91
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p773
I0
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p774
I0
sg89
g140
sg27
g135
sS'task.thisTrialN'
p775
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p776
NsS'practice_blocks.thisIndex'
p777
g143
sg70
g144
sS'practice_trials_Afirst.thisN'
p778
I31
sS'task.thisRepN'
p779
I0
sg81
g146
sS'practice_Afirst.thisN'
p780
I0
sS'practice_trials_Afirst.thisRepN'
p781
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p782
I0
sg34
F0.10139584541320801
sg75
g155
sg53
g12
sg31
F0.10168719291687012
sg77
g157
sg46
V
sg47
V
sg92
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p783
I3
sg87
I3
sg88
I4
sa(dp784
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p785
g106
sg48
g52
sS'task.thisN'
p786
I0
sS'practice_trials_B.thisIndex'
p787
g49
(g105
S'\x02\x00\x00\x00'
tRp788
sg36
I1
sVtrialType
p789
I3
sg72
g118
sg23
g119
sg40
F0.099628210067749023
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p790
I0
sg76
g128
sg28
g109
sVstimulus1_category
p791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p792
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p793
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p794
NsS'practice_blocks.thisIndex'
p795
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p796
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p797
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p798
I0
sS'task.thisRepN'
p799
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sVstimulus2_category
p800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p801
I0
sg37
F0.10015106201171875
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp802
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p803
g106
sg48
g52
sS'task.thisN'
p804
I0
sS'practice_trials_B.thisIndex'
p805
g49
(g105
S'\x01\x00\x00\x00'
tRp806
sg36
I1
sg789
I2
sg72
g118
sg23
g114
sg40
F0.10122394561767578
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p807
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p808
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p809
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p810
NsS'practice_blocks.thisIndex'
p811
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p812
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p813
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p814
I1
sS'task.thisRepN'
p815
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p816
I1
sg37
F0.10173511505126953
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp817
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p818
g106
sg48
g52
sS'task.thisN'
p819
I0
sS'practice_trials_B.thisIndex'
p820
g49
(g105
S'\x00\x00\x00\x00'
tRp821
sg36
I1
sg789
I1
sg72
g118
sg23
g112
sg40
F0.10065388679504395
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p822
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p823
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p824
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p825
NsS'practice_blocks.thisIndex'
p826
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p827
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p828
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p829
I2
sS'task.thisRepN'
p830
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p831
I2
sg37
F0.1011040210723877
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp832
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p833
g106
sg48
g52
sS'task.thisN'
p834
I0
sS'practice_trials_B.thisIndex'
p835
g49
(g105
S'\x03\x00\x00\x00'
tRp836
sg36
I1
sg789
I4
sg72
g118
sg23
g131
sg40
F0.1040489673614502
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p837
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p838
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p839
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p840
NsS'practice_blocks.thisIndex'
p841
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p842
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p843
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p844
I3
sS'task.thisRepN'
p845
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p846
I3
sg37
F0.1048130989074707
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp847
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p848
g106
sg48
g52
sS'task.thisN'
p849
I0
sS'practice_trials_B.thisIndex'
p850
g49
(g105
S'\x02\x00\x00\x00'
tRp851
sg36
I1
sg789
I3
sg72
g118
sg23
g132
sg40
F0.10747289657592773
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p852
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p853
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p854
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p855
NsS'practice_blocks.thisIndex'
p856
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p857
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p858
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p859
I0
sS'task.thisRepN'
p860
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p861
I4
sg37
F0.10766720771789551
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp862
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p863
g106
sg48
g52
sS'task.thisN'
p864
I0
sS'practice_trials_B.thisIndex'
p865
g49
(g105
S'\x03\x00\x00\x00'
tRp866
sg36
I1
sg789
I4
sg72
g118
sg23
g119
sg40
F0.12173008918762207
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p867
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p868
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p869
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p870
NsS'practice_blocks.thisIndex'
p871
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p872
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p873
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p874
I1
sS'task.thisRepN'
p875
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p876
I5
sg37
F0.12192702293395996
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp877
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p878
g106
sg48
g52
sS'task.thisN'
p879
I0
sS'practice_trials_B.thisIndex'
p880
g49
(g105
S'\x00\x00\x00\x00'
tRp881
sg36
I1
sg789
I1
sg72
g118
sg23
g111
sg40
F0.12396502494812012
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p882
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p883
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p884
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p885
NsS'practice_blocks.thisIndex'
p886
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p887
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p888
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p889
I2
sS'task.thisRepN'
p890
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p891
I6
sg37
F0.12418603897094727
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp892
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p893
g106
sg48
g52
sS'task.thisN'
p894
I0
sS'practice_trials_B.thisIndex'
p895
g49
(g105
S'\x01\x00\x00\x00'
tRp896
sg36
I1
sg789
I2
sg72
g118
sg23
g114
sg40
F0.1053318977355957
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p897
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p898
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p899
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p900
NsS'practice_blocks.thisIndex'
p901
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p902
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p903
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p904
I3
sS'task.thisRepN'
p905
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p906
I7
sg37
F0.10553598403930664
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp907
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p908
g106
sg48
g52
sS'task.thisN'
p909
I0
sS'practice_trials_B.thisIndex'
p910
g49
(g105
S'\x02\x00\x00\x00'
tRp911
sg36
I1
sg789
I3
sg72
g118
sg23
g131
sg40
F0.10388398170471191
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p912
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p913
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p914
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p915
NsS'practice_blocks.thisIndex'
p916
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p917
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p918
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p919
I0
sS'task.thisRepN'
p920
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p921
I8
sg37
F0.10399389266967773
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp922
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p923
g106
sg48
g52
sS'task.thisN'
p924
I0
sS'practice_trials_B.thisIndex'
p925
g49
(g105
S'\x03\x00\x00\x00'
tRp926
sg36
I1
sg789
I4
sg72
g118
sg23
g130
sg40
F0.11103510856628418
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p927
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p928
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p929
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p930
NsS'practice_blocks.thisIndex'
p931
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p932
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p933
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p934
I1
sS'task.thisRepN'
p935
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p936
I9
sg37
F0.11129498481750488
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp937
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p938
g106
sg48
g52
sS'task.thisN'
p939
I0
sS'practice_trials_B.thisIndex'
p940
g49
(g105
S'\x01\x00\x00\x00'
tRp941
sg36
I1
sg789
I2
sg72
g118
sg23
g112
sg40
F0.09400486946105957
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p942
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p943
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p944
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p945
NsS'practice_blocks.thisIndex'
p946
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p947
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p948
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p949
I2
sS'task.thisRepN'
p950
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p951
I10
sg37
F0.094656944274902344
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp952
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p953
g106
sg48
g52
sS'task.thisN'
p954
I0
sS'practice_trials_B.thisIndex'
p955
g49
(g105
S'\x00\x00\x00\x00'
tRp956
sg36
I1
sg789
I1
sg72
g118
sg23
g111
sg40
F0.094788074493408203
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p957
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p958
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p959
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p960
NsS'practice_blocks.thisIndex'
p961
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p962
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p963
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p964
I3
sS'task.thisRepN'
p965
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p966
I11
sg37
F0.09731292724609375
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp967
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p968
g106
sg48
g52
sS'task.thisN'
p969
I0
sS'practice_trials_B.thisIndex'
p970
g49
(g105
S'\x02\x00\x00\x00'
tRp971
sg36
I1
sg789
I3
sg72
g118
sg23
g130
sg40
F0.099267005920410156
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p972
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p973
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p974
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p975
NsS'practice_blocks.thisIndex'
p976
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p977
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p978
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p979
I0
sS'task.thisRepN'
p980
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p981
I12
sg37
F0.099675178527832031
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp982
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p983
g106
sg48
g52
sS'task.thisN'
p984
I0
sS'practice_trials_B.thisIndex'
p985
g49
(g105
S'\x03\x00\x00\x00'
tRp986
sg36
I1
sg789
I4
sg72
g118
sg23
g119
sg40
F0.10513401031494141
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p987
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p988
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p989
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p990
NsS'practice_blocks.thisIndex'
p991
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p992
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p993
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p994
I1
sS'task.thisRepN'
p995
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p996
I13
sg37
F0.1053321361541748
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp997
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p998
g106
sg48
g52
sS'task.thisN'
p999
I0
sS'practice_trials_B.thisIndex'
p1000
g49
(g105
S'\x00\x00\x00\x00'
tRp1001
sg36
I1
sg789
I1
sg72
g118
sg23
g111
sg40
F0.1010429859161377
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p1002
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1003
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1004
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1005
NsS'practice_blocks.thisIndex'
p1006
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1007
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1008
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1009
I2
sS'task.thisRepN'
p1010
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1011
I14
sg37
F0.10122990608215332
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp1012
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1013
g106
sg48
g52
sS'task.thisN'
p1014
I0
sS'practice_trials_B.thisIndex'
p1015
g49
(g105
S'\x01\x00\x00\x00'
tRp1016
sg36
I1
sg789
I2
sg72
g118
sg23
g112
sg40
F0.10218596458435059
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p1017
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1018
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1019
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1020
NsS'practice_blocks.thisIndex'
p1021
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1022
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1023
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1024
I3
sS'task.thisRepN'
p1025
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1026
I15
sg37
F0.10102581977844238
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp1027
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1028
g106
sg48
g52
sS'task.thisN'
p1029
I0
sS'practice_trials_B.thisIndex'
p1030
g49
(g105
S'\x02\x00\x00\x00'
tRp1031
sg36
I1
sg789
I3
sg72
g118
sg23
g132
sg40
F0.10911297798156738
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p1032
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1033
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1034
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1035
NsS'practice_blocks.thisIndex'
p1036
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1037
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1038
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1039
I0
sS'task.thisRepN'
p1040
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1041
I16
sg37
F0.10931086540222168
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp1042
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1043
g106
sg48
g52
sS'task.thisN'
p1044
I0
sS'practice_trials_B.thisIndex'
p1045
g49
(g105
S'\x01\x00\x00\x00'
tRp1046
sg36
I1
sg789
I2
sg72
g118
sg23
g113
sg40
F0.10483813285827637
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p1047
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1048
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1049
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1050
NsS'practice_blocks.thisIndex'
p1051
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1052
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1053
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1054
I1
sS'task.thisRepN'
p1055
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1056
I17
sg37
F0.10499882698059082
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp1057
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1058
g106
sg48
g52
sS'task.thisN'
p1059
I0
sS'practice_trials_B.thisIndex'
p1060
g49
(g105
S'\x00\x00\x00\x00'
tRp1061
sg36
I1
sg789
I1
sg72
g118
sg23
g113
sg40
F0.10453200340270996
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p1062
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1063
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1064
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1065
NsS'practice_blocks.thisIndex'
p1066
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1067
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1068
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1069
I2
sS'task.thisRepN'
p1070
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1071
I18
sg37
F0.10467195510864258
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp1072
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1073
g106
sg48
g52
sS'task.thisN'
p1074
I0
sS'practice_trials_B.thisIndex'
p1075
g49
(g105
S'\x03\x00\x00\x00'
tRp1076
sg36
I1
sg789
I4
sg72
g118
sg23
g119
sg40
F0.089573860168457031
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p1077
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1078
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1079
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1080
NsS'practice_blocks.thisIndex'
p1081
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1082
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1083
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1084
I3
sS'task.thisRepN'
p1085
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1086
I19
sg37
F0.090280055999755859
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp1087
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1088
g106
sg48
g52
sS'task.thisN'
p1089
I0
sS'practice_trials_B.thisIndex'
p1090
g49
(g105
S'\x01\x00\x00\x00'
tRp1091
sg36
I1
sg789
I2
sg72
g118
sg23
g113
sg40
F0.10313701629638672
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p1092
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1093
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1094
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1095
NsS'practice_blocks.thisIndex'
p1096
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1097
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1098
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1099
I0
sS'task.thisRepN'
p1100
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1101
I20
sg37
F0.10330295562744141
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp1102
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1103
g106
sg48
g52
sS'task.thisN'
p1104
I0
sS'practice_trials_B.thisIndex'
p1105
g49
(g105
S'\x03\x00\x00\x00'
tRp1106
sg36
I1
sg789
I4
sg72
g118
sg23
g130
sg40
F0.099881887435913086
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p1107
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1108
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1109
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1110
NsS'practice_blocks.thisIndex'
p1111
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1112
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1113
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1114
I1
sS'task.thisRepN'
p1115
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1116
I21
sg37
F0.10142397880554199
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp1117
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1118
g106
sg48
g52
sS'task.thisN'
p1119
I0
sS'practice_trials_B.thisIndex'
p1120
g49
(g105
S'\x00\x00\x00\x00'
tRp1121
sg36
I1
sg789
I1
sg72
g118
sg23
g114
sg40
F0.10499000549316406
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p1122
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1123
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1124
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1125
NsS'practice_blocks.thisIndex'
p1126
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1127
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1128
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1129
I2
sS'task.thisRepN'
p1130
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1131
I22
sg37
F0.10525202751159668
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp1132
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1133
g106
sg48
g52
sS'task.thisN'
p1134
I0
sS'practice_trials_B.thisIndex'
p1135
g49
(g105
S'\x02\x00\x00\x00'
tRp1136
sg36
I1
sg789
I3
sg72
g118
sg23
g132
sg40
F0.087122917175292969
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p1137
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1138
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1139
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1140
NsS'practice_blocks.thisIndex'
p1141
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1142
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1143
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1144
I3
sS'task.thisRepN'
p1145
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1146
I23
sg37
F0.089261054992675781
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp1147
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1148
g106
sg48
g52
sS'task.thisN'
p1149
I0
sS'practice_trials_B.thisIndex'
p1150
g49
(g105
S'\x03\x00\x00\x00'
tRp1151
sg36
I1
sg789
I4
sg72
g118
sg23
g130
sg40
F0.10060501098632812
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p1152
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1153
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1154
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1155
NsS'practice_blocks.thisIndex'
p1156
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1157
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1158
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1159
I0
sS'task.thisRepN'
p1160
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1161
I24
sg37
F0.10094904899597168
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp1162
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1163
g106
sg48
g52
sS'task.thisN'
p1164
I0
sS'practice_trials_B.thisIndex'
p1165
g49
(g105
S'\x01\x00\x00\x00'
tRp1166
sg36
I1
sg789
I2
sg72
g118
sg23
g114
sg40
F0.10442614555358887
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p1167
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1168
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1169
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1170
NsS'practice_blocks.thisIndex'
p1171
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1172
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1173
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1174
I1
sS'task.thisRepN'
p1175
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1176
I25
sg37
F0.10483813285827637
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp1177
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1178
g106
sg48
g52
sS'task.thisN'
p1179
I0
sS'practice_trials_B.thisIndex'
p1180
g49
(g105
S'\x02\x00\x00\x00'
tRp1181
sg36
I1
sg789
I3
sg72
g118
sg23
g131
sg40
F0.10434198379516602
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p1182
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1183
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1184
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1185
NsS'practice_blocks.thisIndex'
p1186
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1187
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1188
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1189
I2
sS'task.thisRepN'
p1190
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1191
I26
sg37
F0.10539698600769043
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp1192
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1193
g106
sg48
g52
sS'task.thisN'
p1194
I0
sS'practice_trials_B.thisIndex'
p1195
g49
(g105
S'\x00\x00\x00\x00'
tRp1196
sg36
I1
sg789
I1
sg72
g118
sg23
g113
sg40
F0.10110783576965332
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p1197
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1198
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1199
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1200
NsS'practice_blocks.thisIndex'
p1201
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1202
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1203
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1204
I3
sS'task.thisRepN'
p1205
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1206
I27
sg37
F0.10202908515930176
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp1207
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1208
g106
sg48
g52
sS'task.thisN'
p1209
I0
sS'practice_trials_B.thisIndex'
p1210
g49
(g105
S'\x00\x00\x00\x00'
tRp1211
sg36
I1
sg789
I1
sg72
g118
sg23
g111
sg40
F0.097421884536743164
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p1212
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1213
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1214
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1215
NsS'practice_blocks.thisIndex'
p1216
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1217
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1218
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1219
I0
sS'task.thisRepN'
p1220
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1221
I28
sg37
F0.10224819183349609
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp1222
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1223
g106
sg48
g52
sS'task.thisN'
p1224
I0
sS'practice_trials_B.thisIndex'
p1225
g49
(g105
S'\x02\x00\x00\x00'
tRp1226
sg36
I1
sg789
I3
sg72
g118
sg23
g131
sg40
F0.10540509223937988
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p1227
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1228
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1229
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1230
NsS'practice_blocks.thisIndex'
p1231
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1232
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1233
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1234
I1
sS'task.thisRepN'
p1235
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1236
I29
sg37
F0.1055760383605957
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp1237
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1238
g106
sg48
g52
sS'task.thisN'
p1239
I0
sS'practice_trials_B.thisIndex'
p1240
g49
(g105
S'\x03\x00\x00\x00'
tRp1241
sg36
I1
sg789
I4
sg72
g118
sg23
g132
sg40
F0.10265684127807617
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p1242
I0
sg76
g128
sg28
g109
sg791
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1243
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1244
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1245
NsS'practice_blocks.thisIndex'
p1246
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1247
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1248
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1249
I2
sS'task.thisRepN'
p1250
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1251
I30
sg37
F0.10284996032714844
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp1252
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1253
g106
sg48
g52
sS'task.thisN'
p1254
I0
sS'practice_trials_B.thisIndex'
p1255
g49
(g105
S'\x01\x00\x00\x00'
tRp1256
sg36
I1
sg789
I2
sg72
g118
sg23
g112
sg40
F0.1052100658416748
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p1257
I0
sg76
g128
sg28
g109
sg791
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1258
I0
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1259
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1260
NsS'practice_blocks.thisIndex'
p1261
g143
sg70
g144
sS'practice_trials_B.thisRepN'
p1262
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1263
I0
sg75
g155
sS'practice_trials_B.thisTrialN'
p1264
I3
sS'task.thisRepN'
p1265
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg800
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1266
I31
sg37
F0.10675597190856934
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp1267
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1268
I0
sS'task.thisIndex'
p1269
g106
sS'practice_Afirst.thisIndex'
p1270
g49
(g105
S'\x00\x00\x00\x00'
tRp1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1272
NsS'task.thisN'
p1273
I0
sg71
g117
sVtrialType
p1274
I1
sg72
g118
sg23
g111
sg24
g123
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1275
I0
sS'practice_trials_Afirst.thisIndex'
p1276
g49
(g105
S'\x00\x00\x00\x00'
tRp1277
sg76
g128
sg28
g109
sVstimulus1_category
p1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1279
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1280
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1281
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1282
NsS'practice_blocks.thisIndex'
p1283
g49
(g105
S'\x00\x00\x00\x00'
tRp1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1285
I0
sS'task.thisRepN'
p1286
I0
sg81
g146
sS'practice_Afirst.thisN'
p1287
I0
sS'practice_trials_Afirst.thisRepN'
p1288
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1289
I0
sg34
F0.10298800468444824
sg75
g155
sg53
g12
sg31
F0.10337686538696289
sg77
g157
sg46
V
sg47
V
sVstimulus2_category
p1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1291
I0
sg87
I3
sg88
I4
sa(dp1292
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1293
I0
sS'task.thisIndex'
p1294
g106
sS'practice_Afirst.thisIndex'
p1295
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1296
NsS'task.thisN'
p1297
I0
sg71
g117
sg1274
I2
sg72
g118
sg23
g113
sg24
g100
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1298
I0
sS'practice_trials_Afirst.thisIndex'
p1299
g49
(g105
S'\x01\x00\x00\x00'
tRp1300
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1301
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1302
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1303
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1304
NsS'practice_blocks.thisIndex'
p1305
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1306
I1
sS'task.thisRepN'
p1307
I0
sg81
g146
sS'practice_Afirst.thisN'
p1308
I0
sS'practice_trials_Afirst.thisRepN'
p1309
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1310
I0
sg34
F0.098112106323242188
sg75
g155
sg53
g12
sg31
F0.098299980163574219
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1311
I1
sg87
I3
sg88
I4
sa(dp1312
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1313
I0
sS'task.thisIndex'
p1314
g106
sS'practice_Afirst.thisIndex'
p1315
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1316
NsS'task.thisN'
p1317
I0
sg71
g117
sg1274
I3
sg72
g118
sg23
g132
sg24
g152
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1318
I0
sS'practice_trials_Afirst.thisIndex'
p1319
g49
(g105
S'\x02\x00\x00\x00'
tRp1320
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1321
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1322
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1323
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1324
NsS'practice_blocks.thisIndex'
p1325
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1326
I2
sS'task.thisRepN'
p1327
I0
sg81
g146
sS'practice_Afirst.thisN'
p1328
I0
sS'practice_trials_Afirst.thisRepN'
p1329
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1330
I0
sg34
F0.10583901405334473
sg75
g155
sg53
g12
sg31
F0.10604596138000488
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1331
I2
sg87
I3
sg88
I4
sa(dp1332
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1333
I0
sS'task.thisIndex'
p1334
g106
sS'practice_Afirst.thisIndex'
p1335
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1336
NsS'task.thisN'
p1337
I0
sg71
g117
sg1274
I4
sg72
g118
sg23
g119
sg24
g101
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1338
I0
sS'practice_trials_Afirst.thisIndex'
p1339
g49
(g105
S'\x03\x00\x00\x00'
tRp1340
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1341
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1342
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1343
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1344
NsS'practice_blocks.thisIndex'
p1345
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1346
I3
sS'task.thisRepN'
p1347
I0
sg81
g146
sS'practice_Afirst.thisN'
p1348
I0
sS'practice_trials_Afirst.thisRepN'
p1349
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1350
I0
sg34
F0.10658001899719238
sg75
g155
sg53
g12
sg31
F0.10677695274353027
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1351
I3
sg87
I3
sg88
I4
sa(dp1352
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1353
I0
sS'task.thisIndex'
p1354
g106
sS'practice_Afirst.thisIndex'
p1355
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1356
NsS'task.thisN'
p1357
I0
sg71
g117
sg1274
I4
sg72
g118
sg23
g130
sg24
g99
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1358
I0
sS'practice_trials_Afirst.thisIndex'
p1359
g49
(g105
S'\x03\x00\x00\x00'
tRp1360
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1361
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1362
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1363
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1364
NsS'practice_blocks.thisIndex'
p1365
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1366
I4
sS'task.thisRepN'
p1367
I0
sg81
g146
sS'practice_Afirst.thisN'
p1368
I0
sS'practice_trials_Afirst.thisRepN'
p1369
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1370
I0
sg34
F0.10886621475219727
sg75
g155
sg53
g12
sg31
F0.10900712013244629
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1371
I0
sg87
I3
sg88
I4
sa(dp1372
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1373
I0
sS'task.thisIndex'
p1374
g106
sS'practice_Afirst.thisIndex'
p1375
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1376
NsS'task.thisN'
p1377
I0
sg71
g117
sg1274
I2
sg72
g118
sg23
g111
sg24
g98
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1378
I0
sS'practice_trials_Afirst.thisIndex'
p1379
g49
(g105
S'\x01\x00\x00\x00'
tRp1380
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1381
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1382
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1383
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1384
NsS'practice_blocks.thisIndex'
p1385
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1386
I5
sS'task.thisRepN'
p1387
I0
sg81
g146
sS'practice_Afirst.thisN'
p1388
I0
sS'practice_trials_Afirst.thisRepN'
p1389
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1390
I0
sg34
F0.097683906555175781
sg75
g155
sg53
g12
sg31
F0.097881793975830078
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1391
I1
sg87
I3
sg88
I4
sa(dp1392
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1393
I0
sS'task.thisIndex'
p1394
g106
sS'practice_Afirst.thisIndex'
p1395
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1396
NsS'task.thisN'
p1397
I0
sg71
g117
sg1274
I3
sg72
g118
sg23
g131
sg24
g150
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1398
I0
sS'practice_trials_Afirst.thisIndex'
p1399
g49
(g105
S'\x02\x00\x00\x00'
tRp1400
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1401
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1402
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1403
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1404
NsS'practice_blocks.thisIndex'
p1405
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1406
I6
sS'task.thisRepN'
p1407
I0
sg81
g146
sS'practice_Afirst.thisN'
p1408
I0
sS'practice_trials_Afirst.thisRepN'
p1409
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1410
I0
sg34
F0.10487699508666992
sg75
g155
sg53
g12
sg31
F0.1050560474395752
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1411
I2
sg87
I3
sg88
I4
sa(dp1412
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1413
I0
sS'task.thisIndex'
p1414
g106
sS'practice_Afirst.thisIndex'
p1415
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1416
NsS'task.thisN'
p1417
I0
sg71
g117
sg1274
I1
sg72
g118
sg23
g114
sg24
g150
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1418
I0
sS'practice_trials_Afirst.thisIndex'
p1419
g49
(g105
S'\x00\x00\x00\x00'
tRp1420
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1421
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1422
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1423
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1424
NsS'practice_blocks.thisIndex'
p1425
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1426
I7
sS'task.thisRepN'
p1427
I0
sg81
g146
sS'practice_Afirst.thisN'
p1428
I0
sS'practice_trials_Afirst.thisRepN'
p1429
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1430
I0
sg34
F0.10395503044128418
sg75
g155
sg53
g12
sg31
F0.10415101051330566
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1431
I3
sg87
I3
sg88
I4
sa(dp1432
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1433
I0
sS'task.thisIndex'
p1434
g106
sS'practice_Afirst.thisIndex'
p1435
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1436
NsS'task.thisN'
p1437
I0
sg71
g117
sg1274
I1
sg72
g118
sg23
g113
sg24
g150
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1438
I0
sS'practice_trials_Afirst.thisIndex'
p1439
g49
(g105
S'\x00\x00\x00\x00'
tRp1440
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1441
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1442
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1443
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1444
NsS'practice_blocks.thisIndex'
p1445
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1446
I8
sS'task.thisRepN'
p1447
I0
sg81
g146
sS'practice_Afirst.thisN'
p1448
I0
sS'practice_trials_Afirst.thisRepN'
p1449
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1450
I0
sg34
F0.09711909294128418
sg75
g155
sg53
g12
sg31
F0.097333192825317383
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1451
I0
sg87
I3
sg88
I4
sa(dp1452
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1453
I0
sS'task.thisIndex'
p1454
g106
sS'practice_Afirst.thisIndex'
p1455
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1456
NsS'task.thisN'
p1457
I0
sg71
g117
sg1274
I2
sg72
g118
sg23
g112
sg24
g99
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1458
I0
sS'practice_trials_Afirst.thisIndex'
p1459
g49
(g105
S'\x01\x00\x00\x00'
tRp1460
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1461
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1462
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1463
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1464
NsS'practice_blocks.thisIndex'
p1465
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1466
I9
sS'task.thisRepN'
p1467
I0
sg81
g146
sS'practice_Afirst.thisN'
p1468
I0
sS'practice_trials_Afirst.thisRepN'
p1469
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1470
I0
sg34
F0.099569082260131836
sg75
g155
sg53
g12
sg31
F0.099864959716796875
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1471
I1
sg87
I3
sg88
I4
sa(dp1472
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1473
I0
sS'task.thisIndex'
p1474
g106
sS'practice_Afirst.thisIndex'
p1475
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1476
NsS'task.thisN'
p1477
I0
sg71
g117
sg1274
I4
sg72
g118
sg23
g119
sg24
g101
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1478
I0
sS'practice_trials_Afirst.thisIndex'
p1479
g49
(g105
S'\x03\x00\x00\x00'
tRp1480
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1481
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1482
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1483
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1484
NsS'practice_blocks.thisIndex'
p1485
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1486
I10
sS'task.thisRepN'
p1487
I0
sg81
g146
sS'practice_Afirst.thisN'
p1488
I0
sS'practice_trials_Afirst.thisRepN'
p1489
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1490
I0
sg34
F0.10214900970458984
sg75
g155
sg53
g12
sg31
F0.10226202011108398
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1491
I2
sg87
I3
sg88
I4
sa(dp1492
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1493
I0
sS'task.thisIndex'
p1494
g106
sS'practice_Afirst.thisIndex'
p1495
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1496
NsS'task.thisN'
p1497
I0
sg71
g117
sg1274
I3
sg72
g118
sg23
g119
sg24
g151
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1498
I0
sS'practice_trials_Afirst.thisIndex'
p1499
g49
(g105
S'\x02\x00\x00\x00'
tRp1500
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1501
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1502
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1503
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1504
NsS'practice_blocks.thisIndex'
p1505
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1506
I11
sS'task.thisRepN'
p1507
I0
sg81
g146
sS'practice_Afirst.thisN'
p1508
I0
sS'practice_trials_Afirst.thisRepN'
p1509
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1510
I0
sg34
F0.10192203521728516
sg75
g155
sg53
g12
sg31
F0.10234713554382324
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1511
I3
sg87
I3
sg88
I4
sa(dp1512
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1513
I0
sS'task.thisIndex'
p1514
g106
sS'practice_Afirst.thisIndex'
p1515
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1516
NsS'task.thisN'
p1517
I0
sg71
g117
sg1274
I4
sg72
g118
sg23
g130
sg24
g98
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1518
I0
sS'practice_trials_Afirst.thisIndex'
p1519
g49
(g105
S'\x03\x00\x00\x00'
tRp1520
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1521
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1522
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1523
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1524
NsS'practice_blocks.thisIndex'
p1525
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1526
I12
sS'task.thisRepN'
p1527
I0
sg81
g146
sS'practice_Afirst.thisN'
p1528
I0
sS'practice_trials_Afirst.thisRepN'
p1529
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1530
I0
sg34
F0.10434818267822266
sg75
g155
sg53
g12
sg31
F0.10475492477416992
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1531
I0
sg87
I3
sg88
I4
sa(dp1532
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1533
I0
sS'task.thisIndex'
p1534
g106
sS'practice_Afirst.thisIndex'
p1535
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1536
NsS'task.thisN'
p1537
I0
sg71
g117
sg1274
I3
sg72
g118
sg23
g132
sg24
g152
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1538
I0
sS'practice_trials_Afirst.thisIndex'
p1539
g49
(g105
S'\x02\x00\x00\x00'
tRp1540
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1541
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1542
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1543
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1544
NsS'practice_blocks.thisIndex'
p1545
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1546
I13
sS'task.thisRepN'
p1547
I0
sg81
g146
sS'practice_Afirst.thisN'
p1548
I0
sS'practice_trials_Afirst.thisRepN'
p1549
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1550
I0
sg34
F0.10645580291748047
sg75
g155
sg53
g12
sg31
F0.10684609413146973
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1551
I1
sg87
I3
sg88
I4
sa(dp1552
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1553
I0
sS'task.thisIndex'
p1554
g106
sS'practice_Afirst.thisIndex'
p1555
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1556
NsS'task.thisN'
p1557
I0
sg71
g117
sg1274
I2
sg72
g118
sg23
g114
sg24
g101
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1558
I0
sS'practice_trials_Afirst.thisIndex'
p1559
g49
(g105
S'\x01\x00\x00\x00'
tRp1560
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1561
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1562
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1563
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1564
NsS'practice_blocks.thisIndex'
p1565
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1566
I14
sS'task.thisRepN'
p1567
I0
sg81
g146
sS'practice_Afirst.thisN'
p1568
I0
sS'practice_trials_Afirst.thisRepN'
p1569
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1570
I0
sg34
F0.10662007331848145
sg75
g155
sg53
g12
sg31
F0.10682392120361328
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1571
I2
sg87
I3
sg88
I4
sa(dp1572
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1573
I0
sS'task.thisIndex'
p1574
g106
sS'practice_Afirst.thisIndex'
p1575
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1576
NsS'task.thisN'
p1577
I0
sg71
g117
sg1274
I1
sg72
g118
sg23
g111
sg24
g123
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1578
I0
sS'practice_trials_Afirst.thisIndex'
p1579
g49
(g105
S'\x00\x00\x00\x00'
tRp1580
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1581
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1582
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1583
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1584
NsS'practice_blocks.thisIndex'
p1585
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1586
I15
sS'task.thisRepN'
p1587
I0
sg81
g146
sS'practice_Afirst.thisN'
p1588
I0
sS'practice_trials_Afirst.thisRepN'
p1589
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1590
I0
sg34
F0.10180997848510742
sg75
g155
sg53
g12
sg31
F0.10198521614074707
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1591
I3
sg87
I3
sg88
I4
sa(dp1592
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1593
I0
sS'task.thisIndex'
p1594
g106
sS'practice_Afirst.thisIndex'
p1595
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1596
NsS'task.thisN'
p1597
I0
sg71
g117
sg1274
I4
sg72
g118
sg23
g130
sg24
g98
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1598
I0
sS'practice_trials_Afirst.thisIndex'
p1599
g49
(g105
S'\x03\x00\x00\x00'
tRp1600
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1601
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1602
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1603
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1604
NsS'practice_blocks.thisIndex'
p1605
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1606
I16
sS'task.thisRepN'
p1607
I0
sg81
g146
sS'practice_Afirst.thisN'
p1608
I0
sS'practice_trials_Afirst.thisRepN'
p1609
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1610
I0
sg34
F0.10483407974243164
sg75
g155
sg53
g12
sg31
F0.10518598556518555
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1611
I0
sg87
I3
sg88
I4
sa(dp1612
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1613
I0
sS'task.thisIndex'
p1614
g106
sS'practice_Afirst.thisIndex'
p1615
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1616
NsS'task.thisN'
p1617
I0
sg71
g117
sg1274
I2
sg72
g118
sg23
g111
sg24
g99
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1618
I0
sS'practice_trials_Afirst.thisIndex'
p1619
g49
(g105
S'\x01\x00\x00\x00'
tRp1620
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1621
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1622
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1623
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1624
NsS'practice_blocks.thisIndex'
p1625
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1626
I17
sS'task.thisRepN'
p1627
I0
sg81
g146
sS'practice_Afirst.thisN'
p1628
I0
sS'practice_trials_Afirst.thisRepN'
p1629
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1630
I0
sg34
F0.10547804832458496
sg75
g155
sg53
g12
sg31
F0.10566115379333496
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1631
I1
sg87
I3
sg88
I4
sa(dp1632
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1633
I0
sS'task.thisIndex'
p1634
g106
sS'practice_Afirst.thisIndex'
p1635
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1636
NsS'task.thisN'
p1637
I0
sg71
g117
sg1274
I1
sg72
g118
sg23
g114
sg24
g123
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1638
I0
sS'practice_trials_Afirst.thisIndex'
p1639
g49
(g105
S'\x00\x00\x00\x00'
tRp1640
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1641
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1642
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1643
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1644
NsS'practice_blocks.thisIndex'
p1645
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1646
I18
sS'task.thisRepN'
p1647
I0
sg81
g146
sS'practice_Afirst.thisN'
p1648
I0
sS'practice_trials_Afirst.thisRepN'
p1649
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1650
I0
sg34
F0.10113692283630371
sg75
g155
sg53
g12
sg31
F0.10146212577819824
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1651
I2
sg87
I3
sg88
I4
sa(dp1652
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1653
I0
sS'task.thisIndex'
p1654
g106
sS'practice_Afirst.thisIndex'
p1655
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1656
NsS'task.thisN'
p1657
I0
sg71
g117
sg1274
I3
sg72
g118
sg23
g131
sg24
g152
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1658
I0
sS'practice_trials_Afirst.thisIndex'
p1659
g49
(g105
S'\x02\x00\x00\x00'
tRp1660
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1661
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1662
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1663
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1664
NsS'practice_blocks.thisIndex'
p1665
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1666
I19
sS'task.thisRepN'
p1667
I0
sg81
g146
sS'practice_Afirst.thisN'
p1668
I0
sS'practice_trials_Afirst.thisRepN'
p1669
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1670
I0
sg34
F0.10268497467041016
sg75
g155
sg53
g12
sg31
F0.1030128002166748
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1671
I3
sg87
I3
sg88
I4
sa(dp1672
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1673
I0
sS'task.thisIndex'
p1674
g106
sS'practice_Afirst.thisIndex'
p1675
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1676
NsS'task.thisN'
p1677
I0
sg71
g117
sg1274
I2
sg72
g118
sg23
g114
sg24
g99
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1678
I0
sS'practice_trials_Afirst.thisIndex'
p1679
g49
(g105
S'\x01\x00\x00\x00'
tRp1680
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1681
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1682
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1683
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1684
NsS'practice_blocks.thisIndex'
p1685
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1686
I20
sS'task.thisRepN'
p1687
I0
sg81
g146
sS'practice_Afirst.thisN'
p1688
I0
sS'practice_trials_Afirst.thisRepN'
p1689
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1690
I0
sg34
F0.23660111427307129
sg75
g155
sg53
g12
sg31
F0.24743890762329102
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1691
I0
sg87
I3
sg88
I4
sa(dp1692
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1693
I0
sS'task.thisIndex'
p1694
g106
sS'practice_Afirst.thisIndex'
p1695
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1696
NsS'task.thisN'
p1697
I0
sg71
g117
sg1274
I3
sg72
g118
sg23
g131
sg24
g151
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1698
I0
sS'practice_trials_Afirst.thisIndex'
p1699
g49
(g105
S'\x02\x00\x00\x00'
tRp1700
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1701
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1702
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1703
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1704
NsS'practice_blocks.thisIndex'
p1705
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1706
I21
sS'task.thisRepN'
p1707
I0
sg81
g146
sS'practice_Afirst.thisN'
p1708
I0
sS'practice_trials_Afirst.thisRepN'
p1709
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1710
I0
sg34
F0.10093593597412109
sg75
g155
sg53
g12
sg31
F0.1000678539276123
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1711
I1
sg87
I3
sg88
I4
sa(dp1712
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1713
I0
sS'task.thisIndex'
p1714
g106
sS'practice_Afirst.thisIndex'
p1715
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1716
NsS'task.thisN'
p1717
I0
sg71
g117
sg1274
I1
sg72
g118
sg23
g112
sg24
g151
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1718
I0
sS'practice_trials_Afirst.thisIndex'
p1719
g49
(g105
S'\x00\x00\x00\x00'
tRp1720
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1721
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1722
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1723
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1724
NsS'practice_blocks.thisIndex'
p1725
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1726
I22
sS'task.thisRepN'
p1727
I0
sg81
g146
sS'practice_Afirst.thisN'
p1728
I0
sS'practice_trials_Afirst.thisRepN'
p1729
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1730
I0
sg34
F0.10297203063964844
sg75
g155
sg53
g12
sg31
F0.10316610336303711
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1731
I2
sg87
I3
sg88
I4
sa(dp1732
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1733
I0
sS'task.thisIndex'
p1734
g106
sS'practice_Afirst.thisIndex'
p1735
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1736
NsS'task.thisN'
p1737
I0
sg71
g117
sg1274
I4
sg72
g118
sg23
g132
sg24
g100
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1738
I0
sS'practice_trials_Afirst.thisIndex'
p1739
g49
(g105
S'\x03\x00\x00\x00'
tRp1740
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1741
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1742
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1743
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1744
NsS'practice_blocks.thisIndex'
p1745
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1746
I23
sS'task.thisRepN'
p1747
I0
sg81
g146
sS'practice_Afirst.thisN'
p1748
I0
sS'practice_trials_Afirst.thisRepN'
p1749
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1750
I0
sg34
F0.10676097869873047
sg75
g155
sg53
g12
sg31
F0.10700011253356934
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1751
I3
sg87
I3
sg88
I4
sa(dp1752
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1753
I0
sS'task.thisIndex'
p1754
g106
sS'practice_Afirst.thisIndex'
p1755
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1756
NsS'task.thisN'
p1757
I0
sg71
g117
sg1274
I3
sg72
g118
sg23
g132
sg24
g150
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1758
I0
sS'practice_trials_Afirst.thisIndex'
p1759
g49
(g105
S'\x02\x00\x00\x00'
tRp1760
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1761
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1762
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1763
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1764
NsS'practice_blocks.thisIndex'
p1765
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1766
I24
sS'task.thisRepN'
p1767
I0
sg81
g146
sS'practice_Afirst.thisN'
p1768
I0
sS'practice_trials_Afirst.thisRepN'
p1769
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1770
I0
sg34
F0.096457004547119141
sg75
g155
sg53
g12
sg31
F0.096678972244262695
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1771
I0
sg87
I3
sg88
I4
sa(dp1772
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1773
I0
sS'task.thisIndex'
p1774
g106
sS'practice_Afirst.thisIndex'
p1775
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1776
NsS'task.thisN'
p1777
I0
sg71
g117
sg1274
I2
sg72
g118
sg23
g113
sg24
g98
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1778
I0
sS'practice_trials_Afirst.thisIndex'
p1779
g49
(g105
S'\x01\x00\x00\x00'
tRp1780
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1781
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1782
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1783
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1784
NsS'practice_blocks.thisIndex'
p1785
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1786
I25
sS'task.thisRepN'
p1787
I0
sg81
g146
sS'practice_Afirst.thisN'
p1788
I0
sS'practice_trials_Afirst.thisRepN'
p1789
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1790
I0
sg34
F0.0968780517578125
sg75
g155
sg53
g12
sg31
F0.097007989883422852
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1791
I1
sg87
I3
sg88
I4
sa(dp1792
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1793
I0
sS'task.thisIndex'
p1794
g106
sS'practice_Afirst.thisIndex'
p1795
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1796
NsS'task.thisN'
p1797
I0
sg71
g117
sg1274
I1
sg72
g118
sg23
g112
sg24
g123
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1798
I0
sS'practice_trials_Afirst.thisIndex'
p1799
g49
(g105
S'\x00\x00\x00\x00'
tRp1800
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1801
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1802
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1803
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1804
NsS'practice_blocks.thisIndex'
p1805
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1806
I26
sS'task.thisRepN'
p1807
I0
sg81
g146
sS'practice_Afirst.thisN'
p1808
I0
sS'practice_trials_Afirst.thisRepN'
p1809
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1810
I0
sg34
F0.10438179969787598
sg75
g155
sg53
g12
sg31
F0.10492181777954102
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1811
I2
sg87
I3
sg88
I4
sa(dp1812
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1813
I0
sS'task.thisIndex'
p1814
g106
sS'practice_Afirst.thisIndex'
p1815
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1816
NsS'task.thisN'
p1817
I0
sg71
g117
sg1274
I4
sg72
g118
sg23
g131
sg24
g100
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1818
I0
sS'practice_trials_Afirst.thisIndex'
p1819
g49
(g105
S'\x03\x00\x00\x00'
tRp1820
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1821
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1822
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1823
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1824
NsS'practice_blocks.thisIndex'
p1825
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1826
I27
sS'task.thisRepN'
p1827
I0
sg81
g146
sS'practice_Afirst.thisN'
p1828
I0
sS'practice_trials_Afirst.thisRepN'
p1829
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1830
I0
sg34
F0.10280990600585938
sg75
g155
sg53
g12
sg31
F0.10297799110412598
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1831
I3
sg87
I3
sg88
I4
sa(dp1832
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1833
I0
sS'task.thisIndex'
p1834
g106
sS'practice_Afirst.thisIndex'
p1835
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1836
NsS'task.thisN'
p1837
I0
sg71
g117
sg1274
I2
sg72
g118
sg23
g113
sg24
g100
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1838
I0
sS'practice_trials_Afirst.thisIndex'
p1839
g49
(g105
S'\x01\x00\x00\x00'
tRp1840
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1841
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1842
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1843
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1844
NsS'practice_blocks.thisIndex'
p1845
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1846
I28
sS'task.thisRepN'
p1847
I0
sg81
g146
sS'practice_Afirst.thisN'
p1848
I0
sS'practice_trials_Afirst.thisRepN'
p1849
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1850
I0
sg34
F0.10264396667480469
sg75
g155
sg53
g12
sg31
F0.10270810127258301
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1851
I0
sg87
I3
sg88
I4
sa(dp1852
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1853
I0
sS'task.thisIndex'
p1854
g106
sS'practice_Afirst.thisIndex'
p1855
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1856
NsS'task.thisN'
p1857
I0
sg71
g117
sg1274
I4
sg72
g118
sg23
g130
sg24
g101
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1858
I0
sS'practice_trials_Afirst.thisIndex'
p1859
g49
(g105
S'\x03\x00\x00\x00'
tRp1860
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1861
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1862
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1863
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1864
NsS'practice_blocks.thisIndex'
p1865
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1866
I29
sS'task.thisRepN'
p1867
I0
sg81
g146
sS'practice_Afirst.thisN'
p1868
I0
sS'practice_trials_Afirst.thisRepN'
p1869
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1870
I0
sg34
F0.10316705703735352
sg75
g155
sg53
g12
sg31
F0.10353899002075195
sg77
g157
sg46
V
sg47
V
sg1290
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1871
I1
sg87
I3
sg88
I4
sa(dp1872
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1873
I0
sS'task.thisIndex'
p1874
g106
sS'practice_Afirst.thisIndex'
p1875
g1271
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p1876
NsS'task.thisN'
p1877
I0
sg71
g117
sg1274
I3
sg72
g118
sg23
g119
sg24
g151
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p1878
I0
sS'practice_trials_Afirst.thisIndex'
p1879
g49
(g105
S'\x02\x00\x00\x00'
tRp1880
sg76
g128
sg28
g109
sg1278
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1881
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1882
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1883
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1884
NsS'practice_blocks.thisIndex'
p1885
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1886
I30
sS'task.thisRepN'
p1887
I0
sg81
g146
sS'practice_Afirst.thisN'
p1888
I0
sS'practice_trials_Afirst.thisRepN'
p1889
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1890
I0
sg34
F0.1008298397064209
sg75
g155
sg53
g12
sg31
F0.10097312927246094
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1891
I2
sg87
I3
sg88
I4
sa(dp1892
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p1893
I0
sS'task.thisIndex'
p1894
g106
sS'practice_Afirst.thisIndex'
p1895
g1271
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p1896
NsS'task.thisN'
p1897
I0
sg71
g117
sg1274
I1
sg72
g118
sg23
g112
sg24
g152
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p1898
I0
sS'practice_trials_Afirst.thisIndex'
p1899
g49
(g105
S'\x00\x00\x00\x00'
tRp1900
sg76
g128
sg28
g109
sg1278
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1901
I1
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p1902
I1
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1903
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1904
NsS'practice_blocks.thisIndex'
p1905
g1284
sg70
g144
sS'practice_trials_Afirst.thisN'
p1906
I31
sS'task.thisRepN'
p1907
I0
sg81
g146
sS'practice_Afirst.thisN'
p1908
I0
sS'practice_trials_Afirst.thisRepN'
p1909
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p1910
I0
sg34
F0.10848402976989746
sg75
g155
sg53
g12
sg31
F0.10867595672607422
sg77
g157
sg46
V
sg47
V
sg1290
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p1911
I3
sg87
I3
sg88
I4
sa(dp1912
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1913
g106
sg48
g52
sS'task.thisN'
p1914
I0
sS'practice_trials_B.thisIndex'
p1915
g49
(g105
S'\x01\x00\x00\x00'
tRp1916
sg36
I1
sVtrialType
p1917
I2
sg72
g118
sg23
g111
sg40
F0.10597491264343262
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p1918
I0
sg76
g128
sg28
g109
sVstimulus1_category
p1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1920
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1921
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1922
NsS'practice_blocks.thisIndex'
p1923
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p1924
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1925
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p1926
I0
sS'task.thisRepN'
p1927
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sVstimulus2_category
p1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1929
I0
sg37
F0.10618209838867188
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp1930
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1931
g106
sg48
g52
sS'task.thisN'
p1932
I0
sS'practice_trials_B.thisIndex'
p1933
g49
(g105
S'\x03\x00\x00\x00'
tRp1934
sg36
I1
sg1917
I4
sg72
g118
sg23
g119
sg40
F0.10437297821044922
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p1935
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1936
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1937
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1938
NsS'practice_blocks.thisIndex'
p1939
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p1940
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1941
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p1942
I1
sS'task.thisRepN'
p1943
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1944
I1
sg37
F0.10457897186279297
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp1945
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1946
g106
sg48
g52
sS'task.thisN'
p1947
I0
sS'practice_trials_B.thisIndex'
p1948
g49
(g105
S'\x00\x00\x00\x00'
tRp1949
sg36
I1
sg1917
I1
sg72
g118
sg23
g114
sg40
F0.10495805740356445
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p1950
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1951
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1952
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1953
NsS'practice_blocks.thisIndex'
p1954
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p1955
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1956
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p1957
I2
sS'task.thisRepN'
p1958
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1959
I2
sg37
F0.1051490306854248
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp1960
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1961
g106
sg48
g52
sS'task.thisN'
p1962
I0
sS'practice_trials_B.thisIndex'
p1963
g49
(g105
S'\x02\x00\x00\x00'
tRp1964
sg36
I1
sg1917
I3
sg72
g118
sg23
g132
sg40
F0.10692787170410156
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p1965
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1966
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1967
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1968
NsS'practice_blocks.thisIndex'
p1969
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p1970
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1971
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p1972
I3
sS'task.thisRepN'
p1973
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1974
I3
sg37
F0.10713911056518555
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp1975
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1976
g106
sg48
g52
sS'task.thisN'
p1977
I0
sS'practice_trials_B.thisIndex'
p1978
g49
(g105
S'\x01\x00\x00\x00'
tRp1979
sg36
I1
sg1917
I2
sg72
g118
sg23
g111
sg40
F0.10396504402160645
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p1980
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1981
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1982
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1983
NsS'practice_blocks.thisIndex'
p1984
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p1985
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p1986
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p1987
I0
sS'task.thisRepN'
p1988
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p1989
I4
sg37
F0.10416984558105469
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp1990
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p1991
g106
sg48
g52
sS'task.thisN'
p1992
I0
sS'practice_trials_B.thisIndex'
p1993
g49
(g105
S'\x02\x00\x00\x00'
tRp1994
sg36
I1
sg1917
I3
sg72
g118
sg23
g132
sg40
F0.1043388843536377
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p1995
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p1996
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p1997
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p1998
NsS'practice_blocks.thisIndex'
p1999
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2000
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2001
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2002
I1
sS'task.thisRepN'
p2003
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2004
I5
sg37
F0.10452580451965332
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp2005
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2006
g106
sg48
g52
sS'task.thisN'
p2007
I0
sS'practice_trials_B.thisIndex'
p2008
g49
(g105
S'\x00\x00\x00\x00'
tRp2009
sg36
I1
sg1917
I1
sg72
g118
sg23
g112
sg40
F0.10510611534118652
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p2010
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2011
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2012
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2013
NsS'practice_blocks.thisIndex'
p2014
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2015
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2016
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2017
I2
sS'task.thisRepN'
p2018
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2019
I6
sg37
F0.10532689094543457
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp2020
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2021
g106
sg48
g52
sS'task.thisN'
p2022
I0
sS'practice_trials_B.thisIndex'
p2023
g49
(g105
S'\x03\x00\x00\x00'
tRp2024
sg36
I1
sg1917
I4
sg72
g118
sg23
g130
sg40
F0.10183501243591309
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p2025
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2026
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2027
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2028
NsS'practice_blocks.thisIndex'
p2029
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2030
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2031
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2032
I3
sS'task.thisRepN'
p2033
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2034
I7
sg37
F0.10203909873962402
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp2035
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2036
g106
sg48
g52
sS'task.thisN'
p2037
I0
sS'practice_trials_B.thisIndex'
p2038
g49
(g105
S'\x00\x00\x00\x00'
tRp2039
sg36
I1
sg1917
I1
sg72
g118
sg23
g113
sg40
F0.10532093048095703
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p2040
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2041
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2042
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2043
NsS'practice_blocks.thisIndex'
p2044
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2045
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2046
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2047
I0
sS'task.thisRepN'
p2048
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2049
I8
sg37
F0.10551810264587402
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp2050
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2051
g106
sg48
g52
sS'task.thisN'
p2052
I0
sS'practice_trials_B.thisIndex'
p2053
g49
(g105
S'\x03\x00\x00\x00'
tRp2054
sg36
I1
sg1917
I4
sg72
g118
sg23
g131
sg40
F0.099694967269897461
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p2055
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2056
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2057
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2058
NsS'practice_blocks.thisIndex'
p2059
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2060
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2061
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2062
I1
sS'task.thisRepN'
p2063
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2064
I9
sg37
F0.099885940551757812
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp2065
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2066
g106
sg48
g52
sS'task.thisN'
p2067
I0
sS'practice_trials_B.thisIndex'
p2068
g49
(g105
S'\x01\x00\x00\x00'
tRp2069
sg36
I1
sg1917
I2
sg72
g118
sg23
g113
sg40
F0.098274946212768555
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p2070
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2071
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2072
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2073
NsS'practice_blocks.thisIndex'
p2074
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2075
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2076
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2077
I2
sS'task.thisRepN'
p2078
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2079
I10
sg37
F0.09844207763671875
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp2080
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2081
g106
sg48
g52
sS'task.thisN'
p2082
I0
sS'practice_trials_B.thisIndex'
p2083
g49
(g105
S'\x02\x00\x00\x00'
tRp2084
sg36
I1
sg1917
I3
sg72
g118
sg23
g119
sg40
F0.10749483108520508
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p2085
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2086
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2087
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2088
NsS'practice_blocks.thisIndex'
p2089
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2090
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2091
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2092
I3
sS'task.thisRepN'
p2093
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2094
I11
sg37
F0.10778403282165527
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp2095
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2096
g106
sg48
g52
sS'task.thisN'
p2097
I0
sS'practice_trials_B.thisIndex'
p2098
g49
(g105
S'\x00\x00\x00\x00'
tRp2099
sg36
I1
sg1917
I1
sg72
g118
sg23
g113
sg40
F0.1038510799407959
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p2100
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2101
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2102
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2103
NsS'practice_blocks.thisIndex'
p2104
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2105
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2106
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2107
I0
sS'task.thisRepN'
p2108
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2109
I12
sg37
F0.10404801368713379
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp2110
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2111
g106
sg48
g52
sS'task.thisN'
p2112
I0
sS'practice_trials_B.thisIndex'
p2113
g49
(g105
S'\x01\x00\x00\x00'
tRp2114
sg36
I1
sg1917
I2
sg72
g118
sg23
g114
sg40
F0.10341811180114746
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p2115
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2116
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2117
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2118
NsS'practice_blocks.thisIndex'
p2119
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2120
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2121
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2122
I1
sS'task.thisRepN'
p2123
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2124
I13
sg37
F0.10363292694091797
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp2125
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2126
g106
sg48
g52
sS'task.thisN'
p2127
I0
sS'practice_trials_B.thisIndex'
p2128
g49
(g105
S'\x02\x00\x00\x00'
tRp2129
sg36
I1
sg1917
I3
sg72
g118
sg23
g132
sg40
F0.1038360595703125
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p2130
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2131
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2132
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2133
NsS'practice_blocks.thisIndex'
p2134
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2135
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2136
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2137
I2
sS'task.thisRepN'
p2138
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2139
I14
sg37
F0.10403609275817871
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp2140
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2141
g106
sg48
g52
sS'task.thisN'
p2142
I0
sS'practice_trials_B.thisIndex'
p2143
g49
(g105
S'\x03\x00\x00\x00'
tRp2144
sg36
I1
sg1917
I4
sg72
g118
sg23
g130
sg40
F0.10307908058166504
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p2145
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2146
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2147
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2148
NsS'practice_blocks.thisIndex'
p2149
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2150
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2151
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2152
I3
sS'task.thisRepN'
p2153
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2154
I15
sg37
F0.1032559871673584
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp2155
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2156
g106
sg48
g52
sS'task.thisN'
p2157
I0
sS'practice_trials_B.thisIndex'
p2158
g49
(g105
S'\x02\x00\x00\x00'
tRp2159
sg36
I1
sg1917
I3
sg72
g118
sg23
g130
sg40
F0.10515499114990234
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p2160
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2161
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2162
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2163
NsS'practice_blocks.thisIndex'
p2164
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2165
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2166
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2167
I0
sS'task.thisRepN'
p2168
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2169
I16
sg37
F0.10535478591918945
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp2170
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2171
g106
sg48
g52
sS'task.thisN'
p2172
I0
sS'practice_trials_B.thisIndex'
p2173
g49
(g105
S'\x03\x00\x00\x00'
tRp2174
sg36
I1
sg1917
I4
sg72
g118
sg23
g131
sg40
F0.10252594947814941
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p2175
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2176
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2177
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2178
NsS'practice_blocks.thisIndex'
p2179
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2180
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2181
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2182
I1
sS'task.thisRepN'
p2183
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2184
I17
sg37
F0.10288786888122559
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp2185
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2186
g106
sg48
g52
sS'task.thisN'
p2187
I0
sS'practice_trials_B.thisIndex'
p2188
g49
(g105
S'\x00\x00\x00\x00'
tRp2189
sg36
I1
sg1917
I1
sg72
g118
sg23
g112
sg40
F0.10466408729553223
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p2190
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2191
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2192
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2193
NsS'practice_blocks.thisIndex'
p2194
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2195
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2196
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2197
I2
sS'task.thisRepN'
p2198
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2199
I18
sg37
F0.10486507415771484
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp2200
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2201
g106
sg48
g52
sS'task.thisN'
p2202
I0
sS'practice_trials_B.thisIndex'
p2203
g49
(g105
S'\x01\x00\x00\x00'
tRp2204
sg36
I1
sg1917
I2
sg72
g118
sg23
g112
sg40
F0.1043698787689209
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p2205
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2206
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2207
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2208
NsS'practice_blocks.thisIndex'
p2209
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2210
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2211
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2212
I3
sS'task.thisRepN'
p2213
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2214
I19
sg37
F0.10450315475463867
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp2215
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2216
g106
sg48
g52
sS'task.thisN'
p2217
I0
sS'practice_trials_B.thisIndex'
p2218
g49
(g105
S'\x00\x00\x00\x00'
tRp2219
sg36
I1
sg1917
I1
sg72
g118
sg23
g111
sg40
F0.1045069694519043
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p2220
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2221
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2222
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2223
NsS'practice_blocks.thisIndex'
p2224
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2225
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2226
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2227
I0
sS'task.thisRepN'
p2228
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2229
I20
sg37
F0.10470485687255859
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp2230
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2231
g106
sg48
g52
sS'task.thisN'
p2232
I0
sS'practice_trials_B.thisIndex'
p2233
g49
(g105
S'\x03\x00\x00\x00'
tRp2234
sg36
I1
sg1917
I4
sg72
g118
sg23
g131
sg40
F0.10429787635803223
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p2235
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2236
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2237
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2238
NsS'practice_blocks.thisIndex'
p2239
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2240
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2241
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2242
I1
sS'task.thisRepN'
p2243
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2244
I21
sg37
F0.10449004173278809
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp2245
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2246
g106
sg48
g52
sS'task.thisN'
p2247
I0
sS'practice_trials_B.thisIndex'
p2248
g49
(g105
S'\x01\x00\x00\x00'
tRp2249
sg36
I1
sg1917
I2
sg72
g118
sg23
g112
sg40
F0.097737789154052734
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p2250
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2251
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2252
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2253
NsS'practice_blocks.thisIndex'
p2254
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2255
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2256
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2257
I2
sS'task.thisRepN'
p2258
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2259
I22
sg37
F0.098052024841308594
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp2260
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2261
g106
sg48
g52
sS'task.thisN'
p2262
I0
sS'practice_trials_B.thisIndex'
p2263
g49
(g105
S'\x02\x00\x00\x00'
tRp2264
sg36
I1
sg1917
I3
sg72
g118
sg23
g132
sg40
F0.10378217697143555
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p2265
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2266
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2267
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2268
NsS'practice_blocks.thisIndex'
p2269
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2270
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2271
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2272
I3
sS'task.thisRepN'
p2273
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2274
I23
sg37
F0.10400104522705078
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp2275
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2276
g106
sg48
g52
sS'task.thisN'
p2277
I0
sS'practice_trials_B.thisIndex'
p2278
g49
(g105
S'\x03\x00\x00\x00'
tRp2279
sg36
I1
sg1917
I4
sg72
g118
sg23
g131
sg40
F0.10463500022888184
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p2280
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2281
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2282
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2283
NsS'practice_blocks.thisIndex'
p2284
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2285
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2286
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2287
I0
sS'task.thisRepN'
p2288
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2289
I24
sg37
F0.10483789443969727
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp2290
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2291
g106
sg48
g52
sS'task.thisN'
p2292
I0
sS'practice_trials_B.thisIndex'
p2293
g49
(g105
S'\x00\x00\x00\x00'
tRp2294
sg36
I1
sg1917
I1
sg72
g118
sg23
g113
sg40
F0.10282993316650391
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p2295
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2296
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2297
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2298
NsS'practice_blocks.thisIndex'
p2299
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2300
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2301
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2302
I1
sS'task.thisRepN'
p2303
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2304
I25
sg37
F0.10302400588989258
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp2305
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2306
g106
sg48
g52
sS'task.thisN'
p2307
I0
sS'practice_trials_B.thisIndex'
p2308
g49
(g105
S'\x02\x00\x00\x00'
tRp2309
sg36
I1
sg1917
I3
sg72
g118
sg23
g119
sg40
F0.11093902587890625
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p2310
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2311
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2312
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2313
NsS'practice_blocks.thisIndex'
p2314
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2315
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2316
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2317
I2
sS'task.thisRepN'
p2318
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2319
I26
sg37
F0.11118984222412109
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp2320
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2321
g106
sg48
g52
sS'task.thisN'
p2322
I0
sS'practice_trials_B.thisIndex'
p2323
g49
(g105
S'\x01\x00\x00\x00'
tRp2324
sg36
I1
sg1917
I2
sg72
g118
sg23
g111
sg40
F0.10379600524902344
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p2325
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2326
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2327
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2328
NsS'practice_blocks.thisIndex'
p2329
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2330
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2331
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2332
I3
sS'task.thisRepN'
p2333
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2334
I27
sg37
F0.10399007797241211
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp2335
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2336
g106
sg48
g52
sS'task.thisN'
p2337
I0
sS'practice_trials_B.thisIndex'
p2338
g49
(g105
S'\x03\x00\x00\x00'
tRp2339
sg36
I1
sg1917
I4
sg72
g118
sg23
g119
sg40
F0.10642910003662109
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p2340
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2341
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2342
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2343
NsS'practice_blocks.thisIndex'
p2344
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2345
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2346
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2347
I0
sS'task.thisRepN'
p2348
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2349
I28
sg37
F0.10662698745727539
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp2350
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2351
g106
sg48
g52
sS'task.thisN'
p2352
I0
sS'practice_trials_B.thisIndex'
p2353
g49
(g105
S'\x02\x00\x00\x00'
tRp2354
sg36
I1
sg1917
I3
sg72
g118
sg23
g130
sg40
F0.10398602485656738
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p2355
I0
sg76
g128
sg28
g109
sg1919
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2356
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2357
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2358
NsS'practice_blocks.thisIndex'
p2359
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2360
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2361
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2362
I1
sS'task.thisRepN'
p2363
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2364
I29
sg37
F0.10409879684448242
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp2365
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2366
g106
sg48
g52
sS'task.thisN'
p2367
I0
sS'practice_trials_B.thisIndex'
p2368
g49
(g105
S'\x00\x00\x00\x00'
tRp2369
sg36
I1
sg1917
I1
sg72
g118
sg23
g114
sg40
F0.10417985916137695
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p2370
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2371
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2372
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2373
NsS'practice_blocks.thisIndex'
p2374
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2375
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2376
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2377
I2
sS'task.thisRepN'
p2378
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg1928
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2379
I30
sg37
F0.1044011116027832
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp2380
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p2381
g106
sg48
g52
sS'task.thisN'
p2382
I0
sS'practice_trials_B.thisIndex'
p2383
g49
(g105
S'\x01\x00\x00\x00'
tRp2384
sg36
I1
sg1917
I2
sg72
g118
sg23
g114
sg40
F0.10288882255554199
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p2385
I0
sg76
g128
sg28
g109
sg1919
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2386
I1
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2387
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2388
NsS'practice_blocks.thisIndex'
p2389
g1284
sg70
g144
sS'practice_trials_B.thisRepN'
p2390
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p2391
I1
sg75
g155
sS'practice_trials_B.thisTrialN'
p2392
I3
sS'task.thisRepN'
p2393
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg1928
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p2394
I31
sg37
F0.10308599472045898
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp2395
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2396
I0
sS'task.thisIndex'
p2397
g106
sS'practice_Afirst.thisIndex'
p2398
g49
(g105
S'\x00\x00\x00\x00'
tRp2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2400
NsS'task.thisN'
p2401
I0
sg71
g117
sVtrialType
p2402
I4
sg72
g118
sg23
g130
sg24
g101
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2403
I0
sS'practice_trials_Afirst.thisIndex'
p2404
g49
(g105
S'\x03\x00\x00\x00'
tRp2405
sg76
g128
sg28
g109
sVstimulus1_category
p2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2407
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2408
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2409
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2410
NsS'practice_blocks.thisIndex'
p2411
g49
(g105
S'\x00\x00\x00\x00'
tRp2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2413
I0
sS'task.thisRepN'
p2414
I0
sg81
g146
sS'practice_Afirst.thisN'
p2415
I0
sS'practice_trials_Afirst.thisRepN'
p2416
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2417
I0
sg34
F0.10806798934936523
sg75
g155
sg53
g12
sg31
F0.10831403732299805
sg77
g157
sg46
V
sg47
V
sVstimulus2_category
p2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2419
I0
sg87
I3
sg88
I4
sa(dp2420
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2421
I0
sS'task.thisIndex'
p2422
g106
sS'practice_Afirst.thisIndex'
p2423
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p2424
NsS'task.thisN'
p2425
I0
sg71
g117
sg2402
I3
sg72
g118
sg23
g119
sg24
g150
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p2426
I0
sS'practice_trials_Afirst.thisIndex'
p2427
g49
(g105
S'\x02\x00\x00\x00'
tRp2428
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2429
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2430
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2431
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2432
NsS'practice_blocks.thisIndex'
p2433
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2434
I1
sS'task.thisRepN'
p2435
I0
sg81
g146
sS'practice_Afirst.thisN'
p2436
I0
sS'practice_trials_Afirst.thisRepN'
p2437
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2438
I0
sg34
F0.10393500328063965
sg75
g155
sg53
g12
sg31
F0.10415196418762207
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2439
I1
sg87
I3
sg88
I4
sa(dp2440
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2441
I0
sS'task.thisIndex'
p2442
g106
sS'practice_Afirst.thisIndex'
p2443
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2444
NsS'task.thisN'
p2445
I0
sg71
g117
sg2402
I1
sg72
g118
sg23
g112
sg24
g150
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2446
I0
sS'practice_trials_Afirst.thisIndex'
p2447
g49
(g105
S'\x00\x00\x00\x00'
tRp2448
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2449
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2450
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2451
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2452
NsS'practice_blocks.thisIndex'
p2453
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2454
I2
sS'task.thisRepN'
p2455
I0
sg81
g146
sS'practice_Afirst.thisN'
p2456
I0
sS'practice_trials_Afirst.thisRepN'
p2457
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2458
I0
sg34
F0.099882125854492188
sg75
g155
sg53
g12
sg31
F0.10002994537353516
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2459
I2
sg87
I3
sg88
I4
sa(dp2460
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2461
I0
sS'task.thisIndex'
p2462
g106
sS'practice_Afirst.thisIndex'
p2463
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p2464
NsS'task.thisN'
p2465
I0
sg71
g117
sg2402
I2
sg72
g118
sg23
g114
sg24
g98
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p2466
I0
sS'practice_trials_Afirst.thisIndex'
p2467
g49
(g105
S'\x01\x00\x00\x00'
tRp2468
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2469
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2470
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2471
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2472
NsS'practice_blocks.thisIndex'
p2473
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2474
I3
sS'task.thisRepN'
p2475
I0
sg81
g146
sS'practice_Afirst.thisN'
p2476
I0
sS'practice_trials_Afirst.thisRepN'
p2477
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2478
I0
sg34
F0.092305898666381836
sg75
g155
sg53
g12
sg31
F0.093519926071166992
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2479
I3
sg87
I3
sg88
I4
sa(dp2480
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2481
I0
sS'task.thisIndex'
p2482
g106
sS'practice_Afirst.thisIndex'
p2483
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p2484
NsS'task.thisN'
p2485
I0
sg71
g117
sg2402
I3
sg72
g118
sg23
g132
sg24
g123
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p2486
I0
sS'practice_trials_Afirst.thisIndex'
p2487
g49
(g105
S'\x02\x00\x00\x00'
tRp2488
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2489
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2490
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2491
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2492
NsS'practice_blocks.thisIndex'
p2493
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2494
I4
sS'task.thisRepN'
p2495
I0
sg81
g146
sS'practice_Afirst.thisN'
p2496
I0
sS'practice_trials_Afirst.thisRepN'
p2497
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2498
I0
sg34
F0.10290098190307617
sg75
g155
sg53
g12
sg31
F0.10317015647888184
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2499
I0
sg87
I3
sg88
I4
sa(dp2500
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2501
I0
sS'task.thisIndex'
p2502
g106
sS'practice_Afirst.thisIndex'
p2503
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2504
NsS'task.thisN'
p2505
I0
sg71
g117
sg2402
I1
sg72
g118
sg23
g112
sg24
g150
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2506
I0
sS'practice_trials_Afirst.thisIndex'
p2507
g49
(g105
S'\x00\x00\x00\x00'
tRp2508
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2509
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2510
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2511
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2512
NsS'practice_blocks.thisIndex'
p2513
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2514
I5
sS'task.thisRepN'
p2515
I0
sg81
g146
sS'practice_Afirst.thisN'
p2516
I0
sS'practice_trials_Afirst.thisRepN'
p2517
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2518
I0
sg34
F0.10677409172058105
sg75
g155
sg53
g12
sg31
F0.10695791244506836
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2519
I1
sg87
I3
sg88
I4
sa(dp2520
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2521
I0
sS'task.thisIndex'
p2522
g106
sS'practice_Afirst.thisIndex'
p2523
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2524
NsS'task.thisN'
p2525
I0
sg71
g117
sg2402
I4
sg72
g118
sg23
g130
sg24
g100
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2526
I0
sS'practice_trials_Afirst.thisIndex'
p2527
g49
(g105
S'\x03\x00\x00\x00'
tRp2528
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2529
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2530
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2531
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2532
NsS'practice_blocks.thisIndex'
p2533
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2534
I6
sS'task.thisRepN'
p2535
I0
sg81
g146
sS'practice_Afirst.thisN'
p2536
I0
sS'practice_trials_Afirst.thisRepN'
p2537
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2538
I0
sg34
F0.10161495208740234
sg75
g155
sg53
g12
sg31
F0.10225987434387207
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2539
I2
sg87
I3
sg88
I4
sa(dp2540
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2541
I0
sS'task.thisIndex'
p2542
g106
sS'practice_Afirst.thisIndex'
p2543
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p2544
NsS'task.thisN'
p2545
I0
sg71
g117
sg2402
I2
sg72
g118
sg23
g114
sg24
g98
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p2546
I0
sS'practice_trials_Afirst.thisIndex'
p2547
g49
(g105
S'\x01\x00\x00\x00'
tRp2548
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2549
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2550
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2551
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2552
NsS'practice_blocks.thisIndex'
p2553
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2554
I7
sS'task.thisRepN'
p2555
I0
sg81
g146
sS'practice_Afirst.thisN'
p2556
I0
sS'practice_trials_Afirst.thisRepN'
p2557
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2558
I0
sg34
F0.10030007362365723
sg75
g155
sg53
g12
sg31
F0.10862088203430176
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2559
I3
sg87
I3
sg88
I4
sa(dp2560
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2561
I0
sS'task.thisIndex'
p2562
g106
sS'practice_Afirst.thisIndex'
p2563
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2564
NsS'task.thisN'
p2565
I0
sg71
g117
sg2402
I4
sg72
g118
sg23
g119
sg24
g99
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2566
I0
sS'practice_trials_Afirst.thisIndex'
p2567
g49
(g105
S'\x03\x00\x00\x00'
tRp2568
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2569
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2570
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2571
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2572
NsS'practice_blocks.thisIndex'
p2573
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2574
I8
sS'task.thisRepN'
p2575
I0
sg81
g146
sS'practice_Afirst.thisN'
p2576
I0
sS'practice_trials_Afirst.thisRepN'
p2577
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2578
I0
sg34
F0.099199056625366211
sg75
g155
sg53
g12
sg31
F0.099492073059082031
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2579
I0
sg87
I3
sg88
I4
sa(dp2580
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2581
I0
sS'task.thisIndex'
p2582
g106
sS'practice_Afirst.thisIndex'
p2583
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p2584
NsS'task.thisN'
p2585
I0
sg71
g117
sg2402
I2
sg72
g118
sg23
g113
sg24
g98
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p2586
I0
sS'practice_trials_Afirst.thisIndex'
p2587
g49
(g105
S'\x01\x00\x00\x00'
tRp2588
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2589
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2590
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2591
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2592
NsS'practice_blocks.thisIndex'
p2593
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2594
I9
sS'task.thisRepN'
p2595
I0
sg81
g146
sS'practice_Afirst.thisN'
p2596
I0
sS'practice_trials_Afirst.thisRepN'
p2597
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2598
I0
sg34
F0.10480189323425293
sg75
g155
sg53
g12
sg31
F0.10501909255981445
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2599
I1
sg87
I3
sg88
I4
sa(dp2600
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2601
I0
sS'task.thisIndex'
p2602
g106
sS'practice_Afirst.thisIndex'
p2603
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2604
NsS'task.thisN'
p2605
I0
sg71
g117
sg2402
I1
sg72
g118
sg23
g114
sg24
g152
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2606
I0
sS'practice_trials_Afirst.thisIndex'
p2607
g49
(g105
S'\x00\x00\x00\x00'
tRp2608
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2609
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2610
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2611
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2612
NsS'practice_blocks.thisIndex'
p2613
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2614
I10
sS'task.thisRepN'
p2615
I0
sg81
g146
sS'practice_Afirst.thisN'
p2616
I0
sS'practice_trials_Afirst.thisRepN'
p2617
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2618
I0
sg34
F0.11120510101318359
sg75
g155
sg53
g12
sg31
F0.11150407791137695
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2619
I2
sg87
I3
sg88
I4
sa(dp2620
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2621
I0
sS'task.thisIndex'
p2622
g106
sS'practice_Afirst.thisIndex'
p2623
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p2624
NsS'task.thisN'
p2625
I0
sg71
g117
sg2402
I3
sg72
g118
sg23
g130
sg24
g151
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p2626
I0
sS'practice_trials_Afirst.thisIndex'
p2627
g49
(g105
S'\x02\x00\x00\x00'
tRp2628
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2629
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2630
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2631
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2632
NsS'practice_blocks.thisIndex'
p2633
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2634
I11
sS'task.thisRepN'
p2635
I0
sg81
g146
sS'practice_Afirst.thisN'
p2636
I0
sS'practice_trials_Afirst.thisRepN'
p2637
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2638
I0
sg34
F0.10269689559936523
sg75
g155
sg53
g12
sg31
F0.10315895080566406
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2639
I3
sg87
I3
sg88
I4
sa(dp2640
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2641
I0
sS'task.thisIndex'
p2642
g106
sS'practice_Afirst.thisIndex'
p2643
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p2644
NsS'task.thisN'
p2645
I0
sg71
g117
sg2402
I2
sg72
g118
sg23
g113
sg24
g101
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p2646
I0
sS'practice_trials_Afirst.thisIndex'
p2647
g49
(g105
S'\x01\x00\x00\x00'
tRp2648
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2649
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2650
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2651
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2652
NsS'practice_blocks.thisIndex'
p2653
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2654
I12
sS'task.thisRepN'
p2655
I0
sg81
g146
sS'practice_Afirst.thisN'
p2656
I0
sS'practice_trials_Afirst.thisRepN'
p2657
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2658
I0
sg34
F0.10399413108825684
sg75
g155
sg53
g12
sg31
F0.10415291786193848
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2659
I0
sg87
I3
sg88
I4
sa(dp2660
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2661
I0
sS'task.thisIndex'
p2662
g106
sS'practice_Afirst.thisIndex'
p2663
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2664
NsS'task.thisN'
p2665
I0
sg71
g117
sg2402
I1
sg72
g118
sg23
g114
sg24
g151
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2666
I0
sS'practice_trials_Afirst.thisIndex'
p2667
g49
(g105
S'\x00\x00\x00\x00'
tRp2668
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2669
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2670
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2671
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2672
NsS'practice_blocks.thisIndex'
p2673
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2674
I13
sS'task.thisRepN'
p2675
I0
sg81
g146
sS'practice_Afirst.thisN'
p2676
I0
sS'practice_trials_Afirst.thisRepN'
p2677
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2678
I0
sg34
F0.10472679138183594
sg75
g155
sg53
g12
sg31
F0.10503506660461426
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2679
I1
sg87
I3
sg88
I4
sa(dp2680
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2681
I0
sS'task.thisIndex'
p2682
g106
sS'practice_Afirst.thisIndex'
p2683
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2684
NsS'task.thisN'
p2685
I0
sg71
g117
sg2402
I4
sg72
g118
sg23
g132
sg24
g100
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2686
I0
sS'practice_trials_Afirst.thisIndex'
p2687
g49
(g105
S'\x03\x00\x00\x00'
tRp2688
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2689
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2690
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2691
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2692
NsS'practice_blocks.thisIndex'
p2693
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2694
I14
sS'task.thisRepN'
p2695
I0
sg81
g146
sS'practice_Afirst.thisN'
p2696
I0
sS'practice_trials_Afirst.thisRepN'
p2697
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2698
I0
sg34
F0.10500502586364746
sg75
g155
sg53
g12
sg31
F0.10520100593566895
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2699
I2
sg87
I3
sg88
I4
sa(dp2700
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2701
I0
sS'task.thisIndex'
p2702
g106
sS'practice_Afirst.thisIndex'
p2703
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p2704
NsS'task.thisN'
p2705
I0
sg71
g117
sg2402
I3
sg72
g118
sg23
g130
sg24
g123
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p2706
I0
sS'practice_trials_Afirst.thisIndex'
p2707
g49
(g105
S'\x02\x00\x00\x00'
tRp2708
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2709
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2710
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2711
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2712
NsS'practice_blocks.thisIndex'
p2713
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2714
I15
sS'task.thisRepN'
p2715
I0
sg81
g146
sS'practice_Afirst.thisN'
p2716
I0
sS'practice_trials_Afirst.thisRepN'
p2717
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2718
I0
sg34
F0.10190105438232422
sg75
g155
sg53
g12
sg31
F0.10213685035705566
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2719
I3
sg87
I3
sg88
I4
sa(dp2720
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2721
I0
sS'task.thisIndex'
p2722
g106
sS'practice_Afirst.thisIndex'
p2723
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2724
NsS'task.thisN'
p2725
I0
sg71
g117
sg2402
I4
sg72
g118
sg23
g131
sg24
g99
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2726
I0
sS'practice_trials_Afirst.thisIndex'
p2727
g49
(g105
S'\x03\x00\x00\x00'
tRp2728
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2729
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2730
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2731
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2732
NsS'practice_blocks.thisIndex'
p2733
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2734
I16
sS'task.thisRepN'
p2735
I0
sg81
g146
sS'practice_Afirst.thisN'
p2736
I0
sS'practice_trials_Afirst.thisRepN'
p2737
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2738
I0
sg34
F0.10610413551330566
sg75
g155
sg53
g12
sg31
F0.10629892349243164
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2739
I0
sg87
I3
sg88
I4
sa(dp2740
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2741
I0
sS'task.thisIndex'
p2742
g106
sS'practice_Afirst.thisIndex'
p2743
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p2744
NsS'task.thisN'
p2745
I0
sg71
g117
sg2402
I3
sg72
g118
sg23
g132
sg24
g123
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p2746
I0
sS'practice_trials_Afirst.thisIndex'
p2747
g49
(g105
S'\x02\x00\x00\x00'
tRp2748
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2749
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2750
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2751
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2752
NsS'practice_blocks.thisIndex'
p2753
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2754
I17
sS'task.thisRepN'
p2755
I0
sg81
g146
sS'practice_Afirst.thisN'
p2756
I0
sS'practice_trials_Afirst.thisRepN'
p2757
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2758
I0
sg34
F0.1053779125213623
sg75
g155
sg53
g12
sg31
F0.1054680347442627
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2759
I1
sg87
I3
sg88
I4
sa(dp2760
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2761
I0
sS'task.thisIndex'
p2762
g106
sS'practice_Afirst.thisIndex'
p2763
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2764
NsS'task.thisN'
p2765
I0
sg71
g117
sg2402
I1
sg72
g118
sg23
g112
sg24
g152
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2766
I0
sS'practice_trials_Afirst.thisIndex'
p2767
g49
(g105
S'\x00\x00\x00\x00'
tRp2768
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2769
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2770
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2771
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2772
NsS'practice_blocks.thisIndex'
p2773
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2774
I18
sS'task.thisRepN'
p2775
I0
sg81
g146
sS'practice_Afirst.thisN'
p2776
I0
sS'practice_trials_Afirst.thisRepN'
p2777
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2778
I0
sg34
F0.10461306571960449
sg75
g155
sg53
g12
sg31
F0.10471582412719727
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2779
I2
sg87
I3
sg88
I4
sa(dp2780
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2781
I0
sS'task.thisIndex'
p2782
g106
sS'practice_Afirst.thisIndex'
p2783
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p2784
NsS'task.thisN'
p2785
I0
sg71
g117
sg2402
I2
sg72
g118
sg23
g111
sg24
g99
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p2786
I0
sS'practice_trials_Afirst.thisIndex'
p2787
g49
(g105
S'\x01\x00\x00\x00'
tRp2788
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2789
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2790
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2791
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2792
NsS'practice_blocks.thisIndex'
p2793
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2794
I19
sS'task.thisRepN'
p2795
I0
sg81
g146
sS'practice_Afirst.thisN'
p2796
I0
sS'practice_trials_Afirst.thisRepN'
p2797
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2798
I0
sg34
F0.1063530445098877
sg75
g155
sg53
g12
sg31
F0.10656380653381348
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2799
I3
sg87
I3
sg88
I4
sa(dp2800
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2801
I0
sS'task.thisIndex'
p2802
g106
sS'practice_Afirst.thisIndex'
p2803
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2804
NsS'task.thisN'
p2805
I0
sg71
g117
sg2402
I1
sg72
g118
sg23
g112
sg24
g152
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2806
I0
sS'practice_trials_Afirst.thisIndex'
p2807
g49
(g105
S'\x00\x00\x00\x00'
tRp2808
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2809
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2810
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2811
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2812
NsS'practice_blocks.thisIndex'
p2813
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2814
I20
sS'task.thisRepN'
p2815
I0
sg81
g146
sS'practice_Afirst.thisN'
p2816
I0
sS'practice_trials_Afirst.thisRepN'
p2817
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2818
I0
sg34
F0.10588312149047852
sg75
g155
sg53
g12
sg31
F0.10613799095153809
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2819
I0
sg87
I3
sg88
I4
sa(dp2820
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2821
I0
sS'task.thisIndex'
p2822
g106
sS'practice_Afirst.thisIndex'
p2823
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p2824
NsS'task.thisN'
p2825
I0
sg71
g117
sg2402
I3
sg72
g118
sg23
g131
sg24
g123
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p2826
I0
sS'practice_trials_Afirst.thisIndex'
p2827
g49
(g105
S'\x02\x00\x00\x00'
tRp2828
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2829
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2830
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2831
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2832
NsS'practice_blocks.thisIndex'
p2833
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2834
I21
sS'task.thisRepN'
p2835
I0
sg81
g146
sS'practice_Afirst.thisN'
p2836
I0
sS'practice_trials_Afirst.thisRepN'
p2837
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2838
I0
sg34
F0.098265171051025391
sg75
g155
sg53
g12
sg31
F0.098473072052001953
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2839
I1
sg87
I3
sg88
I4
sa(dp2840
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2841
I0
sS'task.thisIndex'
p2842
g106
sS'practice_Afirst.thisIndex'
p2843
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2844
NsS'task.thisN'
p2845
I0
sg71
g117
sg2402
I4
sg72
g118
sg23
g119
sg24
g100
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2846
I0
sS'practice_trials_Afirst.thisIndex'
p2847
g49
(g105
S'\x03\x00\x00\x00'
tRp2848
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2849
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2850
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2851
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2852
NsS'practice_blocks.thisIndex'
p2853
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2854
I22
sS'task.thisRepN'
p2855
I0
sg81
g146
sS'practice_Afirst.thisN'
p2856
I0
sS'practice_trials_Afirst.thisRepN'
p2857
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2858
I0
sg34
F0.10297513008117676
sg75
g155
sg53
g12
sg31
F0.10317707061767578
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2859
I2
sg87
I3
sg88
I4
sa(dp2860
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2861
I0
sS'task.thisIndex'
p2862
g106
sS'practice_Afirst.thisIndex'
p2863
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p2864
NsS'task.thisN'
p2865
I0
sg71
g117
sg2402
I2
sg72
g118
sg23
g113
sg24
g101
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p2866
I0
sS'practice_trials_Afirst.thisIndex'
p2867
g49
(g105
S'\x01\x00\x00\x00'
tRp2868
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2869
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2870
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2871
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2872
NsS'practice_blocks.thisIndex'
p2873
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2874
I23
sS'task.thisRepN'
p2875
I0
sg81
g146
sS'practice_Afirst.thisN'
p2876
I0
sS'practice_trials_Afirst.thisRepN'
p2877
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2878
I0
sg34
F0.10422182083129883
sg75
g155
sg53
g12
sg31
F0.1043548583984375
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2879
I3
sg87
I3
sg88
I4
sa(dp2880
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2881
I0
sS'task.thisIndex'
p2882
g106
sS'practice_Afirst.thisIndex'
p2883
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p2884
NsS'task.thisN'
p2885
I0
sg71
g117
sg2402
I3
sg72
g118
sg23
g131
sg24
g152
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p2886
I0
sS'practice_trials_Afirst.thisIndex'
p2887
g49
(g105
S'\x02\x00\x00\x00'
tRp2888
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2889
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2890
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2891
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2892
NsS'practice_blocks.thisIndex'
p2893
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2894
I24
sS'task.thisRepN'
p2895
I0
sg81
g146
sS'practice_Afirst.thisN'
p2896
I0
sS'practice_trials_Afirst.thisRepN'
p2897
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2898
I0
sg34
F0.10498213768005371
sg75
g155
sg53
g12
sg31
F0.10519313812255859
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2899
I0
sg87
I3
sg88
I4
sa(dp2900
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2901
I0
sS'task.thisIndex'
p2902
g106
sS'practice_Afirst.thisIndex'
p2903
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2904
NsS'task.thisN'
p2905
I0
sg71
g117
sg2402
I4
sg72
g118
sg23
g119
sg24
g99
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2906
I0
sS'practice_trials_Afirst.thisIndex'
p2907
g49
(g105
S'\x03\x00\x00\x00'
tRp2908
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2909
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2910
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2911
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2912
NsS'practice_blocks.thisIndex'
p2913
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2914
I25
sS'task.thisRepN'
p2915
I0
sg81
g146
sS'practice_Afirst.thisN'
p2916
I0
sS'practice_trials_Afirst.thisRepN'
p2917
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2918
I0
sg34
F0.10174894332885742
sg75
g155
sg53
g12
sg31
F0.10194015502929688
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2919
I1
sg87
I3
sg88
I4
sa(dp2920
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2921
I0
sS'task.thisIndex'
p2922
g106
sS'practice_Afirst.thisIndex'
p2923
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p2924
NsS'task.thisN'
p2925
I0
sg71
g117
sg2402
I2
sg72
g118
sg23
g111
sg24
g98
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p2926
I0
sS'practice_trials_Afirst.thisIndex'
p2927
g49
(g105
S'\x01\x00\x00\x00'
tRp2928
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2929
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2930
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2931
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2932
NsS'practice_blocks.thisIndex'
p2933
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2934
I26
sS'task.thisRepN'
p2935
I0
sg81
g146
sS'practice_Afirst.thisN'
p2936
I0
sS'practice_trials_Afirst.thisRepN'
p2937
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2938
I0
sg34
F0.1006309986114502
sg75
g155
sg53
g12
sg31
F0.10085082054138184
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2939
I2
sg87
I3
sg88
I4
sa(dp2940
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2941
I0
sS'task.thisIndex'
p2942
g106
sS'practice_Afirst.thisIndex'
p2943
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2944
NsS'task.thisN'
p2945
I0
sg71
g117
sg2402
I1
sg72
g118
sg23
g113
sg24
g150
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2946
I0
sS'practice_trials_Afirst.thisIndex'
p2947
g49
(g105
S'\x00\x00\x00\x00'
tRp2948
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2949
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2950
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2951
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2952
NsS'practice_blocks.thisIndex'
p2953
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2954
I27
sS'task.thisRepN'
p2955
I0
sg81
g146
sS'practice_Afirst.thisN'
p2956
I0
sS'practice_trials_Afirst.thisRepN'
p2957
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2958
I0
sg34
F0.10643982887268066
sg75
g155
sg53
g12
sg31
F0.10713505744934082
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2959
I3
sg87
I3
sg88
I4
sa(dp2960
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2961
I0
sS'task.thisIndex'
p2962
g106
sS'practice_Afirst.thisIndex'
p2963
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2964
NsS'task.thisN'
p2965
I0
sg71
g117
sg2402
I4
sg72
g118
sg23
g131
sg24
g101
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2966
I0
sS'practice_trials_Afirst.thisIndex'
p2967
g49
(g105
S'\x03\x00\x00\x00'
tRp2968
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2969
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2970
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2971
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2972
NsS'practice_blocks.thisIndex'
p2973
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2974
I28
sS'task.thisRepN'
p2975
I0
sg81
g146
sS'practice_Afirst.thisN'
p2976
I0
sS'practice_trials_Afirst.thisRepN'
p2977
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2978
I0
sg34
F0.090587139129638672
sg75
g155
sg53
g12
sg31
F0.099301815032958984
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2979
I0
sg87
I3
sg88
I4
sa(dp2980
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p2981
I0
sS'task.thisIndex'
p2982
g106
sS'practice_Afirst.thisIndex'
p2983
g2399
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p2984
NsS'task.thisN'
p2985
I0
sg71
g117
sg2402
I1
sg72
g118
sg23
g111
sg24
g151
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p2986
I0
sS'practice_trials_Afirst.thisIndex'
p2987
g49
(g105
S'\x00\x00\x00\x00'
tRp2988
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p2989
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p2990
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p2991
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p2992
NsS'practice_blocks.thisIndex'
p2993
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p2994
I29
sS'task.thisRepN'
p2995
I0
sg81
g146
sS'practice_Afirst.thisN'
p2996
I0
sS'practice_trials_Afirst.thisRepN'
p2997
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p2998
I0
sg34
F0.10640096664428711
sg75
g155
sg53
g12
sg31
F0.10658001899719238
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p2999
I1
sg87
I3
sg88
I4
sa(dp3000
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3001
I0
sS'task.thisIndex'
p3002
g106
sS'practice_Afirst.thisIndex'
p3003
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p3004
NsS'task.thisN'
p3005
I0
sg71
g117
sg2402
I2
sg72
g118
sg23
g111
sg24
g100
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p3006
I0
sS'practice_trials_Afirst.thisIndex'
p3007
g49
(g105
S'\x01\x00\x00\x00'
tRp3008
sg76
g128
sg28
g109
sg2406
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3009
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3010
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3011
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3012
NsS'practice_blocks.thisIndex'
p3013
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p3014
I30
sS'task.thisRepN'
p3015
I0
sg81
g146
sS'practice_Afirst.thisN'
p3016
I0
sS'practice_trials_Afirst.thisRepN'
p3017
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3018
I0
sg34
F0.10519218444824219
sg75
g155
sg53
g12
sg31
F0.1053779125213623
sg77
g157
sg46
V
sg47
V
sg2418
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3019
I2
sg87
I3
sg88
I4
sa(dp3020
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3021
I0
sS'task.thisIndex'
p3022
g106
sS'practice_Afirst.thisIndex'
p3023
g2399
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p3024
NsS'task.thisN'
p3025
I0
sg71
g117
sg2402
I3
sg72
g118
sg23
g132
sg24
g151
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p3026
I0
sS'practice_trials_Afirst.thisIndex'
p3027
g49
(g105
S'\x02\x00\x00\x00'
tRp3028
sg76
g128
sg28
g109
sg2406
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3029
I2
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3030
I2
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3031
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3032
NsS'practice_blocks.thisIndex'
p3033
g2412
sg70
g144
sS'practice_trials_Afirst.thisN'
p3034
I31
sS'task.thisRepN'
p3035
I0
sg81
g146
sS'practice_Afirst.thisN'
p3036
I0
sS'practice_trials_Afirst.thisRepN'
p3037
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3038
I0
sg34
F0.10091400146484375
sg75
g155
sg53
g12
sg31
F0.10118699073791504
sg77
g157
sg46
V
sg47
V
sg2418
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3039
I3
sg87
I3
sg88
I4
sa(dp3040
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3041
g106
sg48
g52
sS'task.thisN'
p3042
I0
sS'practice_trials_B.thisIndex'
p3043
g49
(g105
S'\x03\x00\x00\x00'
tRp3044
sg36
I1
sVtrialType
p3045
I4
sg72
g118
sg23
g130
sg40
F0.10856199264526367
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p3046
I0
sg76
g128
sg28
g109
sVstimulus1_category
p3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3048
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3049
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3050
NsS'practice_blocks.thisIndex'
p3051
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3052
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3053
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3054
I0
sS'task.thisRepN'
p3055
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sVstimulus2_category
p3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3057
I0
sg37
F0.10889005661010742
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3058
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3059
g106
sg48
g52
sS'task.thisN'
p3060
I0
sS'practice_trials_B.thisIndex'
p3061
g49
(g105
S'\x01\x00\x00\x00'
tRp3062
sg36
I1
sg3045
I2
sg72
g118
sg23
g111
sg40
F0.094025850296020508
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p3063
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3064
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3065
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3066
NsS'practice_blocks.thisIndex'
p3067
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3068
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3069
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3070
I1
sS'task.thisRepN'
p3071
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3072
I1
sg37
F0.095540046691894531
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3073
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3074
g106
sg48
g52
sS'task.thisN'
p3075
I0
sS'practice_trials_B.thisIndex'
p3076
g49
(g105
S'\x00\x00\x00\x00'
tRp3077
sg36
I1
sg3045
I1
sg72
g118
sg23
g113
sg40
F0.10207700729370117
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p3078
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3079
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3080
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3081
NsS'practice_blocks.thisIndex'
p3082
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3083
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3084
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3085
I2
sS'task.thisRepN'
p3086
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3087
I2
sg37
F0.10341119766235352
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3088
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3089
g106
sg48
g52
sS'task.thisN'
p3090
I0
sS'practice_trials_B.thisIndex'
p3091
g49
(g105
S'\x02\x00\x00\x00'
tRp3092
sg36
I1
sg3045
I3
sg72
g118
sg23
g119
sg40
F0.10582184791564941
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p3093
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3094
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3095
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3096
NsS'practice_blocks.thisIndex'
p3097
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3098
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3099
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3100
I3
sS'task.thisRepN'
p3101
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3102
I3
sg37
F0.10586309432983398
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3103
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3104
g106
sg48
g52
sS'task.thisN'
p3105
I0
sS'practice_trials_B.thisIndex'
p3106
g49
(g105
S'\x02\x00\x00\x00'
tRp3107
sg36
I1
sg3045
I3
sg72
g118
sg23
g132
sg40
F0.10804986953735352
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p3108
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3109
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3110
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3111
NsS'practice_blocks.thisIndex'
p3112
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3113
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3114
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3115
I0
sS'task.thisRepN'
p3116
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3117
I4
sg37
F0.10917901992797852
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3118
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3119
g106
sg48
g52
sS'task.thisN'
p3120
I0
sS'practice_trials_B.thisIndex'
p3121
g49
(g105
S'\x01\x00\x00\x00'
tRp3122
sg36
I1
sg3045
I2
sg72
g118
sg23
g112
sg40
F0.099580049514770508
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p3123
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3124
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3125
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3126
NsS'practice_blocks.thisIndex'
p3127
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3128
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3129
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3130
I1
sS'task.thisRepN'
p3131
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3132
I5
sg37
F0.10000896453857422
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3133
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3134
g106
sg48
g52
sS'task.thisN'
p3135
I0
sS'practice_trials_B.thisIndex'
p3136
g49
(g105
S'\x03\x00\x00\x00'
tRp3137
sg36
I1
sg3045
I4
sg72
g118
sg23
g131
sg40
F0.10597491264343262
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p3138
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3139
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3140
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3141
NsS'practice_blocks.thisIndex'
p3142
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3143
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3144
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3145
I2
sS'task.thisRepN'
p3146
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3147
I6
sg37
F0.10619187355041504
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3148
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3149
g106
sg48
g52
sS'task.thisN'
p3150
I0
sS'practice_trials_B.thisIndex'
p3151
g49
(g105
S'\x00\x00\x00\x00'
tRp3152
sg36
I1
sg3045
I1
sg72
g118
sg23
g113
sg40
F0.10291695594787598
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p3153
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3154
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3155
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3156
NsS'practice_blocks.thisIndex'
p3157
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3158
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3159
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3160
I3
sS'task.thisRepN'
p3161
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3162
I7
sg37
F0.10318303108215332
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3163
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3164
g106
sg48
g52
sS'task.thisN'
p3165
I0
sS'practice_trials_B.thisIndex'
p3166
g49
(g105
S'\x00\x00\x00\x00'
tRp3167
sg36
I1
sg3045
I1
sg72
g118
sg23
g111
sg40
F0.098098039627075195
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p3168
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3169
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3170
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3171
NsS'practice_blocks.thisIndex'
p3172
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3173
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3174
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3175
I0
sS'task.thisRepN'
p3176
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3177
I8
sg37
F0.099261999130249023
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3178
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3179
g106
sg48
g52
sS'task.thisN'
p3180
I0
sS'practice_trials_B.thisIndex'
p3181
g49
(g105
S'\x01\x00\x00\x00'
tRp3182
sg36
I1
sg3045
I2
sg72
g118
sg23
g112
sg40
F0.10775899887084961
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p3183
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3184
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3185
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3186
NsS'practice_blocks.thisIndex'
p3187
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3188
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3189
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3190
I1
sS'task.thisRepN'
p3191
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3192
I9
sg37
F0.10809993743896484
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3193
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3194
g106
sg48
g52
sS'task.thisN'
p3195
I0
sS'practice_trials_B.thisIndex'
p3196
g49
(g105
S'\x03\x00\x00\x00'
tRp3197
sg36
I1
sg3045
I4
sg72
g118
sg23
g119
sg40
F0.10084891319274902
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p3198
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3199
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3200
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3201
NsS'practice_blocks.thisIndex'
p3202
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3203
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3204
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3205
I2
sS'task.thisRepN'
p3206
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3207
I10
sg37
F0.10126709938049316
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3208
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3209
g106
sg48
g52
sS'task.thisN'
p3210
I0
sS'practice_trials_B.thisIndex'
p3211
g49
(g105
S'\x02\x00\x00\x00'
tRp3212
sg36
I1
sg3045
I3
sg72
g118
sg23
g119
sg40
F0.097636222839355469
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p3213
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3214
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3215
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3216
NsS'practice_blocks.thisIndex'
p3217
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3218
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3219
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3220
I3
sS'task.thisRepN'
p3221
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3222
I11
sg37
F0.09784388542175293
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3223
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3224
g106
sg48
g52
sS'task.thisN'
p3225
I0
sS'practice_trials_B.thisIndex'
p3226
g49
(g105
S'\x03\x00\x00\x00'
tRp3227
sg36
I1
sg3045
I4
sg72
g118
sg23
g130
sg40
F0.10166716575622559
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p3228
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3229
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3230
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3231
NsS'practice_blocks.thisIndex'
p3232
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3233
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3234
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3235
I0
sS'task.thisRepN'
p3236
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3237
I12
sg37
F0.10190916061401367
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3238
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3239
g106
sg48
g52
sS'task.thisN'
p3240
I0
sS'practice_trials_B.thisIndex'
p3241
g49
(g105
S'\x00\x00\x00\x00'
tRp3242
sg36
I1
sg3045
I1
sg72
g118
sg23
g111
sg40
F0.10064005851745605
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p3243
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3244
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3245
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3246
NsS'practice_blocks.thisIndex'
p3247
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3248
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3249
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3250
I1
sS'task.thisRepN'
p3251
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3252
I13
sg37
F0.1008601188659668
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3253
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3254
g106
sg48
g52
sS'task.thisN'
p3255
I0
sS'practice_trials_B.thisIndex'
p3256
g49
(g105
S'\x01\x00\x00\x00'
tRp3257
sg36
I1
sg3045
I2
sg72
g118
sg23
g113
sg40
F0.10257101058959961
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p3258
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3259
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3260
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3261
NsS'practice_blocks.thisIndex'
p3262
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3263
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3264
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3265
I2
sS'task.thisRepN'
p3266
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3267
I14
sg37
F0.10286998748779297
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3268
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3269
g106
sg48
g52
sS'task.thisN'
p3270
I0
sS'practice_trials_B.thisIndex'
p3271
g49
(g105
S'\x02\x00\x00\x00'
tRp3272
sg36
I1
sg3045
I3
sg72
g118
sg23
g131
sg40
F0.10199403762817383
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p3273
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3274
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3275
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3276
NsS'practice_blocks.thisIndex'
p3277
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3278
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3279
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3280
I3
sS'task.thisRepN'
p3281
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3282
I15
sg37
F0.10217189788818359
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3283
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3284
g106
sg48
g52
sS'task.thisN'
p3285
I0
sS'practice_trials_B.thisIndex'
p3286
g49
(g105
S'\x03\x00\x00\x00'
tRp3287
sg36
I1
sg3045
I4
sg72
g118
sg23
g132
sg40
F0.1021120548248291
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p3288
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3289
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3290
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3291
NsS'practice_blocks.thisIndex'
p3292
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3293
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3294
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3295
I0
sS'task.thisRepN'
p3296
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3297
I16
sg37
F0.10228085517883301
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3298
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3299
g106
sg48
g52
sS'task.thisN'
p3300
I0
sS'practice_trials_B.thisIndex'
p3301
g49
(g105
S'\x01\x00\x00\x00'
tRp3302
sg36
I1
sg3045
I2
sg72
g118
sg23
g114
sg40
F0.110260009765625
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p3303
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3304
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3305
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3306
NsS'practice_blocks.thisIndex'
p3307
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3308
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3309
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3310
I1
sS'task.thisRepN'
p3311
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3312
I17
sg37
F0.11043715476989746
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3313
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3314
g106
sg48
g52
sS'task.thisN'
p3315
I0
sS'practice_trials_B.thisIndex'
p3316
g49
(g105
S'\x02\x00\x00\x00'
tRp3317
sg36
I1
sg3045
I3
sg72
g118
sg23
g132
sg40
F0.098057985305786133
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p3318
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3319
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3320
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3321
NsS'practice_blocks.thisIndex'
p3322
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3323
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3324
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3325
I2
sS'task.thisRepN'
p3326
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3327
I18
sg37
F0.10215497016906738
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3328
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3329
g106
sg48
g52
sS'task.thisN'
p3330
I0
sS'practice_trials_B.thisIndex'
p3331
g49
(g105
S'\x00\x00\x00\x00'
tRp3332
sg36
I1
sg3045
I1
sg72
g118
sg23
g114
sg40
F0.10768699645996094
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p3333
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3334
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3335
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3336
NsS'practice_blocks.thisIndex'
p3337
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3338
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3339
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3340
I3
sS'task.thisRepN'
p3341
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3342
I19
sg37
F0.1078948974609375
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3343
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3344
g106
sg48
g52
sS'task.thisN'
p3345
I0
sS'practice_trials_B.thisIndex'
p3346
g49
(g105
S'\x01\x00\x00\x00'
tRp3347
sg36
I1
sg3045
I2
sg72
g118
sg23
g114
sg40
F0.099412918090820312
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p3348
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3349
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3350
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3351
NsS'practice_blocks.thisIndex'
p3352
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3353
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3354
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3355
I0
sS'task.thisRepN'
p3356
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3357
I20
sg37
F0.099621057510375977
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3358
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3359
g106
sg48
g52
sS'task.thisN'
p3360
I0
sS'practice_trials_B.thisIndex'
p3361
g49
(g105
S'\x02\x00\x00\x00'
tRp3362
sg36
I1
sg3045
I3
sg72
g118
sg23
g131
sg40
F0.10681009292602539
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p3363
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3364
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3365
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3366
NsS'practice_blocks.thisIndex'
p3367
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3368
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3369
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3370
I1
sS'task.thisRepN'
p3371
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3372
I21
sg37
F0.10705804824829102
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3373
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3374
g106
sg48
g52
sS'task.thisN'
p3375
I0
sS'practice_trials_B.thisIndex'
p3376
g49
(g105
S'\x00\x00\x00\x00'
tRp3377
sg36
I1
sg3045
I1
sg72
g118
sg23
g114
sg40
F0.10810708999633789
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p3378
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3379
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3380
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3381
NsS'practice_blocks.thisIndex'
p3382
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3383
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3384
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3385
I2
sS'task.thisRepN'
p3386
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3387
I22
sg37
F0.10828518867492676
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3388
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3389
g106
sg48
g52
sS'task.thisN'
p3390
I0
sS'practice_trials_B.thisIndex'
p3391
g49
(g105
S'\x03\x00\x00\x00'
tRp3392
sg36
I1
sg3045
I4
sg72
g118
sg23
g130
sg40
F0.10465288162231445
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p3393
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3394
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3395
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3396
NsS'practice_blocks.thisIndex'
p3397
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3398
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3399
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3400
I3
sS'task.thisRepN'
p3401
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3402
I23
sg37
F0.1051790714263916
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3403
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3404
g106
sg48
g52
sS'task.thisN'
p3405
I0
sS'practice_trials_B.thisIndex'
p3406
g49
(g105
S'\x00\x00\x00\x00'
tRp3407
sg36
I1
sg3045
I1
sg72
g118
sg23
g112
sg40
F0.10060000419616699
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p3408
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3409
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3410
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3411
NsS'practice_blocks.thisIndex'
p3412
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3413
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3414
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3415
I0
sS'task.thisRepN'
p3416
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3417
I24
sg37
F0.10092616081237793
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3418
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3419
g106
sg48
g52
sS'task.thisN'
p3420
I0
sS'practice_trials_B.thisIndex'
p3421
g49
(g105
S'\x01\x00\x00\x00'
tRp3422
sg36
I1
sg3045
I2
sg72
g118
sg23
g112
sg40
F0.099066972732543945
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p3423
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3424
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3425
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3426
NsS'practice_blocks.thisIndex'
p3427
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3428
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3429
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3430
I1
sS'task.thisRepN'
p3431
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3432
I25
sg37
F0.099270105361938477
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3433
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3434
g106
sg48
g52
sS'task.thisN'
p3435
I0
sS'practice_trials_B.thisIndex'
p3436
g49
(g105
S'\x02\x00\x00\x00'
tRp3437
sg36
I1
sg3045
I3
sg72
g118
sg23
g131
sg40
F0.1091310977935791
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p3438
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3439
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3440
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3441
NsS'practice_blocks.thisIndex'
p3442
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3443
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3444
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3445
I2
sS'task.thisRepN'
p3446
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3447
I26
sg37
F0.10929608345031738
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3448
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3449
g106
sg48
g52
sS'task.thisN'
p3450
I0
sS'practice_trials_B.thisIndex'
p3451
g49
(g105
S'\x03\x00\x00\x00'
tRp3452
sg36
I1
sg3045
I4
sg72
g118
sg23
g119
sg40
F0.10188794136047363
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p3453
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3454
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3455
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3456
NsS'practice_blocks.thisIndex'
p3457
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3458
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3459
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3460
I3
sS'task.thisRepN'
p3461
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3462
I27
sg37
F0.10209488868713379
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3463
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3464
g106
sg48
g52
sS'task.thisN'
p3465
I0
sS'practice_trials_B.thisIndex'
p3466
g49
(g105
S'\x03\x00\x00\x00'
tRp3467
sg36
I1
sg3045
I4
sg72
g118
sg23
g132
sg40
F0.14267301559448242
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p3468
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3469
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3470
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3471
NsS'practice_blocks.thisIndex'
p3472
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3473
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3474
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3475
I0
sS'task.thisRepN'
p3476
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3477
I28
sg37
F0.14293098449707031
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3478
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3479
g106
sg48
g52
sS'task.thisN'
p3480
I0
sS'practice_trials_B.thisIndex'
p3481
g49
(g105
S'\x00\x00\x00\x00'
tRp3482
sg36
I1
sg3045
I1
sg72
g118
sg23
g111
sg40
F0.099920034408569336
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p3483
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3484
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3485
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3486
NsS'practice_blocks.thisIndex'
p3487
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3488
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3489
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3490
I1
sS'task.thisRepN'
p3491
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3492
I29
sg37
F0.10168194770812988
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp3493
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3494
g106
sg48
g52
sS'task.thisN'
p3495
I0
sS'practice_trials_B.thisIndex'
p3496
g49
(g105
S'\x01\x00\x00\x00'
tRp3497
sg36
I1
sg3045
I2
sg72
g118
sg23
g113
sg40
F0.10250496864318848
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p3498
I0
sg76
g128
sg28
g109
sg3047
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3499
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3500
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3501
NsS'practice_blocks.thisIndex'
p3502
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3503
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3504
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3505
I2
sS'task.thisRepN'
p3506
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3507
I30
sg37
F0.10258889198303223
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3508
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p3509
g106
sg48
g52
sS'task.thisN'
p3510
I0
sS'practice_trials_B.thisIndex'
p3511
g49
(g105
S'\x02\x00\x00\x00'
tRp3512
sg36
I1
sg3045
I3
sg72
g118
sg23
g130
sg40
F0.098682165145874023
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p3513
I0
sg76
g128
sg28
g109
sg3047
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3514
I2
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3515
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3516
NsS'practice_blocks.thisIndex'
p3517
g2412
sg70
g144
sS'practice_trials_B.thisRepN'
p3518
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p3519
I2
sg75
g155
sS'practice_trials_B.thisTrialN'
p3520
I3
sS'task.thisRepN'
p3521
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg3056
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p3522
I31
sg37
F0.098945140838623047
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp3523
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3524
I0
sS'task.thisIndex'
p3525
g106
sS'practice_Afirst.thisIndex'
p3526
g49
(g105
S'\x00\x00\x00\x00'
tRp3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p3528
NsS'task.thisN'
p3529
I0
sg71
g117
sVtrialType
p3530
I4
sg72
g118
sg23
g130
sg24
g101
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p3531
I0
sS'practice_trials_Afirst.thisIndex'
p3532
g49
(g105
S'\x03\x00\x00\x00'
tRp3533
sg76
g128
sg28
g109
sVstimulus1_category
p3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3535
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3536
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3537
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3538
NsS'practice_blocks.thisIndex'
p3539
g49
(g105
S'\x00\x00\x00\x00'
tRp3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3541
I0
sS'task.thisRepN'
p3542
I0
sg81
g146
sS'practice_Afirst.thisN'
p3543
I0
sS'practice_trials_Afirst.thisRepN'
p3544
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3545
I0
sg34
F0.099107027053833008
sg75
g155
sg53
g12
sg31
F0.099287986755371094
sg77
g157
sg46
V
sg47
V
sVstimulus2_category
p3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3547
I0
sg87
I3
sg88
I4
sa(dp3548
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3549
I0
sS'task.thisIndex'
p3550
g106
sS'practice_Afirst.thisIndex'
p3551
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p3552
NsS'task.thisN'
p3553
I0
sg71
g117
sg3530
I3
sg72
g118
sg23
g119
sg24
g150
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p3554
I0
sS'practice_trials_Afirst.thisIndex'
p3555
g49
(g105
S'\x02\x00\x00\x00'
tRp3556
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3557
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3558
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3559
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3560
NsS'practice_blocks.thisIndex'
p3561
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3562
I1
sS'task.thisRepN'
p3563
I0
sg81
g146
sS'practice_Afirst.thisN'
p3564
I0
sS'practice_trials_Afirst.thisRepN'
p3565
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3566
I0
sg34
F0.10623502731323242
sg75
g155
sg53
g12
sg31
F0.1063539981842041
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3567
I1
sg87
I3
sg88
I4
sa(dp3568
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3569
I0
sS'task.thisIndex'
p3570
g106
sS'practice_Afirst.thisIndex'
p3571
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p3572
NsS'task.thisN'
p3573
I0
sg71
g117
sg3530
I2
sg72
g118
sg23
g113
sg24
g99
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p3574
I0
sS'practice_trials_Afirst.thisIndex'
p3575
g49
(g105
S'\x01\x00\x00\x00'
tRp3576
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3577
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3578
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3579
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3580
NsS'practice_blocks.thisIndex'
p3581
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3582
I2
sS'task.thisRepN'
p3583
I0
sg81
g146
sS'practice_Afirst.thisN'
p3584
I0
sS'practice_trials_Afirst.thisRepN'
p3585
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3586
I0
sg34
F0.097198963165283203
sg75
g155
sg53
g12
sg31
F0.097539186477661133
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3587
I2
sg87
I3
sg88
I4
sa(dp3588
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3589
I0
sS'task.thisIndex'
p3590
g106
sS'practice_Afirst.thisIndex'
p3591
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p3592
NsS'task.thisN'
p3593
I0
sg71
g117
sg3530
I1
sg72
g118
sg23
g112
sg24
g150
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p3594
I0
sS'practice_trials_Afirst.thisIndex'
p3595
g49
(g105
S'\x00\x00\x00\x00'
tRp3596
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3597
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3598
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3599
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3600
NsS'practice_blocks.thisIndex'
p3601
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3602
I3
sS'task.thisRepN'
p3603
I0
sg81
g146
sS'practice_Afirst.thisN'
p3604
I0
sS'practice_trials_Afirst.thisRepN'
p3605
I0
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3606
I0
sg34
F0.10439491271972656
sg75
g155
sg53
g12
sg31
F0.10459303855895996
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3607
I3
sg87
I3
sg88
I4
sa(dp3608
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3609
I0
sS'task.thisIndex'
p3610
g106
sS'practice_Afirst.thisIndex'
p3611
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p3612
NsS'task.thisN'
p3613
I0
sg71
g117
sg3530
I1
sg72
g118
sg23
g114
sg24
g152
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p3614
I0
sS'practice_trials_Afirst.thisIndex'
p3615
g49
(g105
S'\x00\x00\x00\x00'
tRp3616
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3617
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3618
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3619
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3620
NsS'practice_blocks.thisIndex'
p3621
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3622
I4
sS'task.thisRepN'
p3623
I0
sg81
g146
sS'practice_Afirst.thisN'
p3624
I0
sS'practice_trials_Afirst.thisRepN'
p3625
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3626
I0
sg34
F0.10277009010314941
sg75
g155
sg53
g12
sg31
F0.10296392440795898
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3627
I0
sg87
I3
sg88
I4
sa(dp3628
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3629
I0
sS'task.thisIndex'
p3630
g106
sS'practice_Afirst.thisIndex'
p3631
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p3632
NsS'task.thisN'
p3633
I0
sg71
g117
sg3530
I4
sg72
g118
sg23
g131
sg24
g99
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p3634
I0
sS'practice_trials_Afirst.thisIndex'
p3635
g49
(g105
S'\x03\x00\x00\x00'
tRp3636
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3637
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3638
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3639
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3640
NsS'practice_blocks.thisIndex'
p3641
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3642
I5
sS'task.thisRepN'
p3643
I0
sg81
g146
sS'practice_Afirst.thisN'
p3644
I0
sS'practice_trials_Afirst.thisRepN'
p3645
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3646
I0
sg34
F0.10099101066589355
sg75
g155
sg53
g12
sg31
F0.10122990608215332
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3647
I1
sg87
I3
sg88
I4
sa(dp3648
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3649
I0
sS'task.thisIndex'
p3650
g106
sS'practice_Afirst.thisIndex'
p3651
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p3652
NsS'task.thisN'
p3653
I0
sg71
g117
sg3530
I3
sg72
g118
sg23
g119
sg24
g150
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p3654
I0
sS'practice_trials_Afirst.thisIndex'
p3655
g49
(g105
S'\x02\x00\x00\x00'
tRp3656
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3657
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3658
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3659
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3660
NsS'practice_blocks.thisIndex'
p3661
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3662
I6
sS'task.thisRepN'
p3663
I0
sg81
g146
sS'practice_Afirst.thisN'
p3664
I0
sS'practice_trials_Afirst.thisRepN'
p3665
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3666
I0
sg34
F0.10704708099365234
sg75
g155
sg53
g12
sg31
F0.10724592208862305
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3667
I2
sg87
I3
sg88
I4
sa(dp3668
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3669
I0
sS'task.thisIndex'
p3670
g106
sS'practice_Afirst.thisIndex'
p3671
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p3672
NsS'task.thisN'
p3673
I0
sg71
g117
sg3530
I2
sg72
g118
sg23
g111
sg24
g99
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p3674
I0
sS'practice_trials_Afirst.thisIndex'
p3675
g49
(g105
S'\x01\x00\x00\x00'
tRp3676
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3677
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3678
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3679
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3680
NsS'practice_blocks.thisIndex'
p3681
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3682
I7
sS'task.thisRepN'
p3683
I0
sg81
g146
sS'practice_Afirst.thisN'
p3684
I0
sS'practice_trials_Afirst.thisRepN'
p3685
I1
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3686
I0
sg34
F0.099200010299682617
sg75
g155
sg53
g12
sg31
F0.099518060684204102
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3687
I3
sg87
I3
sg88
I4
sa(dp3688
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3689
I0
sS'task.thisIndex'
p3690
g106
sS'practice_Afirst.thisIndex'
p3691
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p3692
NsS'task.thisN'
p3693
I0
sg71
g117
sg3530
I1
sg72
g118
sg23
g114
sg24
g152
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p3694
I0
sS'practice_trials_Afirst.thisIndex'
p3695
g49
(g105
S'\x00\x00\x00\x00'
tRp3696
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3697
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3698
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3699
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3700
NsS'practice_blocks.thisIndex'
p3701
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3702
I8
sS'task.thisRepN'
p3703
I0
sg81
g146
sS'practice_Afirst.thisN'
p3704
I0
sS'practice_trials_Afirst.thisRepN'
p3705
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3706
I0
sg34
F0.097320079803466797
sg75
g155
sg53
g12
sg31
F0.097550868988037109
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3707
I0
sg87
I3
sg88
I4
sa(dp3708
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3709
I0
sS'task.thisIndex'
p3710
g106
sS'practice_Afirst.thisIndex'
p3711
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p3712
NsS'task.thisN'
p3713
I0
sg71
g117
sg3530
I4
sg72
g118
sg23
g131
sg24
g100
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p3714
I0
sS'practice_trials_Afirst.thisIndex'
p3715
g49
(g105
S'\x03\x00\x00\x00'
tRp3716
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3717
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3718
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3719
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3720
NsS'practice_blocks.thisIndex'
p3721
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3722
I9
sS'task.thisRepN'
p3723
I0
sg81
g146
sS'practice_Afirst.thisN'
p3724
I0
sS'practice_trials_Afirst.thisRepN'
p3725
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3726
I0
sg34
F0.10339498519897461
sg75
g155
sg53
g12
sg31
F0.10352516174316406
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3727
I1
sg87
I3
sg88
I4
sa(dp3728
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3729
I0
sS'task.thisIndex'
p3730
g106
sS'practice_Afirst.thisIndex'
p3731
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p3732
NsS'task.thisN'
p3733
I0
sg71
g117
sg3530
I2
sg72
g118
sg23
g112
sg24
g101
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p3734
I0
sS'practice_trials_Afirst.thisIndex'
p3735
g49
(g105
S'\x01\x00\x00\x00'
tRp3736
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3737
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3738
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3739
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3740
NsS'practice_blocks.thisIndex'
p3741
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3742
I10
sS'task.thisRepN'
p3743
I0
sg81
g146
sS'practice_Afirst.thisN'
p3744
I0
sS'practice_trials_Afirst.thisRepN'
p3745
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3746
I0
sg34
F0.1031498908996582
sg75
g155
sg53
g12
sg31
F0.10333991050720215
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3747
I2
sg87
I3
sg88
I4
sa(dp3748
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3749
I0
sS'task.thisIndex'
p3750
g106
sS'practice_Afirst.thisIndex'
p3751
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p3752
NsS'task.thisN'
p3753
I0
sg71
g117
sg3530
I3
sg72
g118
sg23
g131
sg24
g151
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p3754
I0
sS'practice_trials_Afirst.thisIndex'
p3755
g49
(g105
S'\x02\x00\x00\x00'
tRp3756
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3757
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3758
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3759
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3760
NsS'practice_blocks.thisIndex'
p3761
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3762
I11
sS'task.thisRepN'
p3763
I0
sg81
g146
sS'practice_Afirst.thisN'
p3764
I0
sS'practice_trials_Afirst.thisRepN'
p3765
I2
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3766
I0
sg34
F0.10654091835021973
sg75
g155
sg53
g12
sg31
F0.106842041015625
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3767
I3
sg87
I3
sg88
I4
sa(dp3768
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3769
I0
sS'task.thisIndex'
p3770
g106
sS'practice_Afirst.thisIndex'
p3771
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p3772
NsS'task.thisN'
p3773
I0
sg71
g117
sg3530
I1
sg72
g118
sg23
g112
sg24
g151
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p3774
I0
sS'practice_trials_Afirst.thisIndex'
p3775
g49
(g105
S'\x00\x00\x00\x00'
tRp3776
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3777
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3778
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3779
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3780
NsS'practice_blocks.thisIndex'
p3781
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3782
I12
sS'task.thisRepN'
p3783
I0
sg81
g146
sS'practice_Afirst.thisN'
p3784
I0
sS'practice_trials_Afirst.thisRepN'
p3785
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3786
I0
sg34
F0.10535192489624023
sg75
g155
sg53
g12
sg31
F0.10552096366882324
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3787
I0
sg87
I3
sg88
I4
sa(dp3788
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3789
I0
sS'task.thisIndex'
p3790
g106
sS'practice_Afirst.thisIndex'
p3791
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p3792
NsS'task.thisN'
p3793
I0
sg71
g117
sg3530
I2
sg72
g118
sg23
g114
sg24
g98
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p3794
I0
sS'practice_trials_Afirst.thisIndex'
p3795
g49
(g105
S'\x01\x00\x00\x00'
tRp3796
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3797
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3798
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3799
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3800
NsS'practice_blocks.thisIndex'
p3801
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3802
I13
sS'task.thisRepN'
p3803
I0
sg81
g146
sS'practice_Afirst.thisN'
p3804
I0
sS'practice_trials_Afirst.thisRepN'
p3805
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3806
I0
sg34
F0.098297119140625
sg75
g155
sg53
g12
sg31
F0.10598015785217285
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3807
I1
sg87
I3
sg88
I4
sa(dp3808
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3809
I0
sS'task.thisIndex'
p3810
g106
sS'practice_Afirst.thisIndex'
p3811
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p3812
NsS'task.thisN'
p3813
I0
sg71
g117
sg3530
I3
sg72
g118
sg23
g131
sg24
g123
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p3814
I0
sS'practice_trials_Afirst.thisIndex'
p3815
g49
(g105
S'\x02\x00\x00\x00'
tRp3816
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3817
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3818
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3819
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3820
NsS'practice_blocks.thisIndex'
p3821
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3822
I14
sS'task.thisRepN'
p3823
I0
sg81
g146
sS'practice_Afirst.thisN'
p3824
I0
sS'practice_trials_Afirst.thisRepN'
p3825
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3826
I0
sg34
F0.096557140350341797
sg75
g155
sg53
g12
sg31
F0.10488295555114746
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3827
I2
sg87
I3
sg88
I4
sa(dp3828
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3829
I0
sS'task.thisIndex'
p3830
g106
sS'practice_Afirst.thisIndex'
p3831
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p3832
NsS'task.thisN'
p3833
I0
sg71
g117
sg3530
I4
sg72
g118
sg23
g130
sg24
g98
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p3834
I0
sS'practice_trials_Afirst.thisIndex'
p3835
g49
(g105
S'\x03\x00\x00\x00'
tRp3836
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3837
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3838
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3839
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3840
NsS'practice_blocks.thisIndex'
p3841
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3842
I15
sS'task.thisRepN'
p3843
I0
sg81
g146
sS'practice_Afirst.thisN'
p3844
I0
sS'practice_trials_Afirst.thisRepN'
p3845
I3
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3846
I0
sg34
F0.10404491424560547
sg75
g155
sg53
g12
sg31
F0.10438394546508789
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3847
I3
sg87
I3
sg88
I4
sa(dp3848
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3849
I0
sS'task.thisIndex'
p3850
g106
sS'practice_Afirst.thisIndex'
p3851
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p3852
NsS'task.thisN'
p3853
I0
sg71
g117
sg3530
I2
sg72
g118
sg23
g114
sg24
g100
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p3854
I0
sS'practice_trials_Afirst.thisIndex'
p3855
g49
(g105
S'\x01\x00\x00\x00'
tRp3856
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3857
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3858
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3859
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3860
NsS'practice_blocks.thisIndex'
p3861
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3862
I16
sS'task.thisRepN'
p3863
I0
sg81
g146
sS'practice_Afirst.thisN'
p3864
I0
sS'practice_trials_Afirst.thisRepN'
p3865
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3866
I0
sg34
F0.10340499877929688
sg75
g155
sg53
g12
sg31
F0.10362792015075684
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3867
I0
sg87
I3
sg88
I4
sa(dp3868
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3869
I0
sS'task.thisIndex'
p3870
g106
sS'practice_Afirst.thisIndex'
p3871
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p3872
NsS'task.thisN'
p3873
I0
sg71
g117
sg3530
I4
sg72
g118
sg23
g132
sg24
g99
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p3874
I0
sS'practice_trials_Afirst.thisIndex'
p3875
g49
(g105
S'\x03\x00\x00\x00'
tRp3876
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3877
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3878
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3879
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3880
NsS'practice_blocks.thisIndex'
p3881
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3882
I17
sS'task.thisRepN'
p3883
I0
sg81
g146
sS'practice_Afirst.thisN'
p3884
I0
sS'practice_trials_Afirst.thisRepN'
p3885
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3886
I0
sg34
F0.10425996780395508
sg75
g155
sg53
g12
sg31
F0.10438394546508789
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3887
I1
sg87
I3
sg88
I4
sa(dp3888
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3889
I0
sS'task.thisIndex'
p3890
g106
sS'practice_Afirst.thisIndex'
p3891
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p3892
NsS'task.thisN'
p3893
I0
sg71
g117
sg3530
I1
sg72
g118
sg23
g111
sg24
g123
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p3894
I0
sS'practice_trials_Afirst.thisIndex'
p3895
g49
(g105
S'\x00\x00\x00\x00'
tRp3896
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3897
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3898
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3899
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3900
NsS'practice_blocks.thisIndex'
p3901
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3902
I18
sS'task.thisRepN'
p3903
I0
sg81
g146
sS'practice_Afirst.thisN'
p3904
I0
sS'practice_trials_Afirst.thisRepN'
p3905
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3906
I0
sg34
F0.10430812835693359
sg75
g155
sg53
g12
sg31
F0.10451912879943848
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3907
I2
sg87
I3
sg88
I4
sa(dp3908
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3909
I0
sS'task.thisIndex'
p3910
g106
sS'practice_Afirst.thisIndex'
p3911
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p3912
NsS'task.thisN'
p3913
I0
sg71
g117
sg3530
I3
sg72
g118
sg23
g119
sg24
g123
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p3914
I0
sS'practice_trials_Afirst.thisIndex'
p3915
g49
(g105
S'\x02\x00\x00\x00'
tRp3916
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3917
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3918
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3919
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3920
NsS'practice_blocks.thisIndex'
p3921
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3922
I19
sS'task.thisRepN'
p3923
I0
sg81
g146
sS'practice_Afirst.thisN'
p3924
I0
sS'practice_trials_Afirst.thisRepN'
p3925
I4
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3926
I0
sg34
F0.10481405258178711
sg75
g155
sg53
g12
sg31
F0.10501003265380859
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3927
I3
sg87
I3
sg88
I4
sa(dp3928
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3929
I0
sS'task.thisIndex'
p3930
g106
sS'practice_Afirst.thisIndex'
p3931
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p3932
NsS'task.thisN'
p3933
I0
sg71
g117
sg3530
I4
sg72
g118
sg23
g130
sg24
g101
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p3934
I0
sS'practice_trials_Afirst.thisIndex'
p3935
g49
(g105
S'\x03\x00\x00\x00'
tRp3936
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3937
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3938
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3939
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3940
NsS'practice_blocks.thisIndex'
p3941
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3942
I20
sS'task.thisRepN'
p3943
I0
sg81
g146
sS'practice_Afirst.thisN'
p3944
I0
sS'practice_trials_Afirst.thisRepN'
p3945
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3946
I0
sg34
F0.10720491409301758
sg75
g155
sg53
g12
sg31
F0.1074068546295166
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3947
I0
sg87
I3
sg88
I4
sa(dp3948
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3949
I0
sS'task.thisIndex'
p3950
g106
sS'practice_Afirst.thisIndex'
p3951
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p3952
NsS'task.thisN'
p3953
I0
sg71
g117
sg3530
I3
sg72
g118
sg23
g119
sg24
g151
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p3954
I0
sS'practice_trials_Afirst.thisIndex'
p3955
g49
(g105
S'\x02\x00\x00\x00'
tRp3956
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3957
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3958
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3959
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3960
NsS'practice_blocks.thisIndex'
p3961
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3962
I21
sS'task.thisRepN'
p3963
I0
sg81
g146
sS'practice_Afirst.thisN'
p3964
I0
sS'practice_trials_Afirst.thisRepN'
p3965
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3966
I0
sg34
F0.10362601280212402
sg75
g155
sg53
g12
sg31
F0.10382699966430664
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3967
I1
sg87
I3
sg88
I4
sa(dp3968
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3969
I0
sS'task.thisIndex'
p3970
g106
sS'practice_Afirst.thisIndex'
p3971
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p3972
NsS'task.thisN'
p3973
I0
sg71
g117
sg3530
I1
sg72
g118
sg23
g112
sg24
g123
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p3974
I0
sS'practice_trials_Afirst.thisIndex'
p3975
g49
(g105
S'\x00\x00\x00\x00'
tRp3976
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3977
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3978
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3979
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p3980
NsS'practice_blocks.thisIndex'
p3981
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p3982
I22
sS'task.thisRepN'
p3983
I0
sg81
g146
sS'practice_Afirst.thisN'
p3984
I0
sS'practice_trials_Afirst.thisRepN'
p3985
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p3986
I0
sg34
F0.1058650016784668
sg75
g155
sg53
g12
sg31
F0.10607099533081055
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p3987
I2
sg87
I3
sg88
I4
sa(dp3988
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p3989
I0
sS'task.thisIndex'
p3990
g106
sS'practice_Afirst.thisIndex'
p3991
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p3992
NsS'task.thisN'
p3993
I0
sg71
g117
sg3530
I2
sg72
g118
sg23
g113
sg24
g100
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p3994
I0
sS'practice_trials_Afirst.thisIndex'
p3995
g49
(g105
S'\x01\x00\x00\x00'
tRp3996
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p3997
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p3998
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p3999
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4000
NsS'practice_blocks.thisIndex'
p4001
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p4002
I23
sS'task.thisRepN'
p4003
I0
sg81
g146
sS'practice_Afirst.thisN'
p4004
I0
sS'practice_trials_Afirst.thisRepN'
p4005
I5
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p4006
I0
sg34
F0.10162782669067383
sg75
g155
sg53
g12
sg31
F0.10222005844116211
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p4007
I3
sg87
I3
sg88
I4
sa(dp4008
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p4009
I0
sS'task.thisIndex'
p4010
g106
sS'practice_Afirst.thisIndex'
p4011
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p4012
NsS'task.thisN'
p4013
I0
sg71
g117
sg3530
I2
sg72
g118
sg23
g111
sg24
g101
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p4014
I0
sS'practice_trials_Afirst.thisIndex'
p4015
g49
(g105
S'\x01\x00\x00\x00'
tRp4016
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4017
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p4018
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4019
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4020
NsS'practice_blocks.thisIndex'
p4021
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p4022
I24
sS'task.thisRepN'
p4023
I0
sg81
g146
sS'practice_Afirst.thisN'
p4024
I0
sS'practice_trials_Afirst.thisRepN'
p4025
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p4026
I0
sg34
F0.099026918411254883
sg75
g155
sg53
g12
sg31
F0.099170923233032227
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p4027
I0
sg87
I3
sg88
I4
sa(dp4028
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p4029
I0
sS'task.thisIndex'
p4030
g106
sS'practice_Afirst.thisIndex'
p4031
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p4032
NsS'task.thisN'
p4033
I0
sg71
g117
sg3530
I1
sg72
g118
sg23
g113
sg24
g152
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p4034
I0
sS'practice_trials_Afirst.thisIndex'
p4035
g49
(g105
S'\x00\x00\x00\x00'
tRp4036
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4037
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p4038
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4039
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4040
NsS'practice_blocks.thisIndex'
p4041
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p4042
I25
sS'task.thisRepN'
p4043
I0
sg81
g146
sS'practice_Afirst.thisN'
p4044
I0
sS'practice_trials_Afirst.thisRepN'
p4045
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p4046
I0
sg34
F0.10316705703735352
sg75
g155
sg53
g12
sg31
F0.10350990295410156
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p4047
I1
sg87
I3
sg88
I4
sa(dp4048
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p4049
I0
sS'task.thisIndex'
p4050
g106
sS'practice_Afirst.thisIndex'
p4051
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p4052
NsS'task.thisN'
p4053
I0
sg71
g117
sg3530
I4
sg72
g118
sg23
g132
sg24
g98
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p4054
I0
sS'practice_trials_Afirst.thisIndex'
p4055
g49
(g105
S'\x03\x00\x00\x00'
tRp4056
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4057
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p4058
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4059
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4060
NsS'practice_blocks.thisIndex'
p4061
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p4062
I26
sS'task.thisRepN'
p4063
I0
sg81
g146
sS'practice_Afirst.thisN'
p4064
I0
sS'practice_trials_Afirst.thisRepN'
p4065
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p4066
I0
sg34
F0.10493302345275879
sg75
g155
sg53
g12
sg31
F0.1050870418548584
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p4067
I2
sg87
I3
sg88
I4
sa(dp4068
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p4069
I0
sS'task.thisIndex'
p4070
g106
sS'practice_Afirst.thisIndex'
p4071
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p4072
NsS'task.thisN'
p4073
I0
sg71
g117
sg3530
I3
sg72
g118
sg23
g132
sg24
g150
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p4074
I0
sS'practice_trials_Afirst.thisIndex'
p4075
g49
(g105
S'\x02\x00\x00\x00'
tRp4076
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4077
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p4078
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4079
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4080
NsS'practice_blocks.thisIndex'
p4081
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p4082
I27
sS'task.thisRepN'
p4083
I0
sg81
g146
sS'practice_Afirst.thisN'
p4084
I0
sS'practice_trials_Afirst.thisRepN'
p4085
I6
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p4086
I0
sg34
F0.10405492782592773
sg75
g155
sg53
g12
sg31
F0.10437417030334473
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p4087
I3
sg87
I3
sg88
I4
sa(dp4088
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p4089
I0
sS'task.thisIndex'
p4090
g106
sS'practice_Afirst.thisIndex'
p4091
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p4092
NsS'task.thisN'
p4093
I0
sg71
g117
sg3530
I3
sg72
g118
sg23
g132
sg24
g152
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p4094
I0
sS'practice_trials_Afirst.thisIndex'
p4095
g49
(g105
S'\x02\x00\x00\x00'
tRp4096
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4097
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p4098
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4099
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4100
NsS'practice_blocks.thisIndex'
p4101
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p4102
I28
sS'task.thisRepN'
p4103
I0
sg81
g146
sS'practice_Afirst.thisN'
p4104
I0
sS'practice_trials_Afirst.thisRepN'
p4105
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p4106
I0
sg34
F0.1049659252166748
sg75
g155
sg53
g12
sg31
F0.10516190528869629
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p4107
I0
sg87
I3
sg88
I4
sa(dp4108
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p4109
I0
sS'task.thisIndex'
p4110
g106
sS'practice_Afirst.thisIndex'
p4111
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p4112
NsS'task.thisN'
p4113
I0
sg71
g117
sg3530
I4
sg72
g118
sg23
g130
sg24
g100
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p4114
I0
sS'practice_trials_Afirst.thisIndex'
p4115
g49
(g105
S'\x03\x00\x00\x00'
tRp4116
sg76
g128
sg28
g109
sg3534
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4117
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p4118
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4119
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4120
NsS'practice_blocks.thisIndex'
p4121
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p4122
I29
sS'task.thisRepN'
p4123
I0
sg81
g146
sS'practice_Afirst.thisN'
p4124
I0
sS'practice_trials_Afirst.thisRepN'
p4125
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p4126
I0
sg34
F0.10585284233093262
sg75
g155
sg53
g12
sg31
F0.10604000091552734
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p4127
I1
sg87
I3
sg88
I4
sa(dp4128
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p4129
I0
sS'task.thisIndex'
p4130
g106
sS'practice_Afirst.thisIndex'
p4131
g3527
sg29
Ve
sg48
g52
sS'practice_Afirst.thisTrial'
p4132
NsS'task.thisN'
p4133
I0
sg71
g117
sg3530
I2
sg72
g118
sg23
g113
sg24
g98
sg73
g124
sg32
Vi
sS'practice_blocks.thisTrialN'
p4134
I0
sS'practice_trials_Afirst.thisIndex'
p4135
g49
(g105
S'\x01\x00\x00\x00'
tRp4136
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4137
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p4138
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4139
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4140
NsS'practice_blocks.thisIndex'
p4141
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p4142
I30
sS'task.thisRepN'
p4143
I0
sg81
g146
sS'practice_Afirst.thisN'
p4144
I0
sS'practice_trials_Afirst.thisRepN'
p4145
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p4146
I0
sg34
F0.10289502143859863
sg75
g155
sg53
g12
sg31
F0.10308098793029785
sg77
g157
sg46
V
sg47
V
sg3546
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p4147
I2
sg87
I3
sg88
I4
sa(dp4148
g65
g96
sg66
I80
sg67
g102
sS'practice_Afirst.thisTrialN'
p4149
I0
sS'task.thisIndex'
p4150
g106
sS'practice_Afirst.thisIndex'
p4151
g3527
sg29
Vi
sg48
g52
sS'practice_Afirst.thisTrial'
p4152
NsS'task.thisN'
p4153
I0
sg71
g117
sg3530
I1
sg72
g118
sg23
g111
sg24
g151
sg73
g124
sg32
Ve
sS'practice_blocks.thisTrialN'
p4154
I0
sS'practice_trials_Afirst.thisIndex'
p4155
g49
(g105
S'\x00\x00\x00\x00'
tRp4156
sg76
g128
sg28
g109
sg3534
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4157
I3
sg86
g137
sg30
I1
sS'practice_blocks.thisRepN'
p4158
I3
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4159
I0
sg33
I1
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4160
NsS'practice_blocks.thisIndex'
p4161
g3540
sg70
g144
sS'practice_trials_Afirst.thisN'
p4162
I31
sS'task.thisRepN'
p4163
I0
sg81
g146
sS'practice_Afirst.thisN'
p4164
I0
sS'practice_trials_Afirst.thisRepN'
p4165
I7
sg54
g55
sg44
V2
sg74
g153
sS'practice_Afirst.thisRepN'
p4166
I0
sg34
F0.10297203063964844
sg75
g155
sg53
g12
sg31
F0.103179931640625
sg77
g157
sg46
V
sg47
V
sg3546
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_Afirst.thisTrialN'
p4167
I3
sg87
I3
sg88
I4
sa(dp4168
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4169
g106
sg48
g52
sS'task.thisN'
p4170
I0
sS'practice_trials_B.thisIndex'
p4171
g49
(g105
S'\x01\x00\x00\x00'
tRp4172
sg36
I1
sVtrialType
p4173
I2
sg72
g118
sg23
g111
sg40
F0.093678951263427734
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p4174
I0
sg76
g128
sg28
g109
sVstimulus1_category
p4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4176
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4177
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4178
NsS'practice_blocks.thisIndex'
p4179
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4180
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4181
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4182
I0
sS'task.thisRepN'
p4183
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sVstimulus2_category
p4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4185
I0
sg37
F0.09396815299987793
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4186
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4187
g106
sg48
g52
sS'task.thisN'
p4188
I0
sS'practice_trials_B.thisIndex'
p4189
g49
(g105
S'\x02\x00\x00\x00'
tRp4190
sg36
I1
sg4173
I3
sg72
g118
sg23
g131
sg40
F0.11904311180114746
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p4191
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4192
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4193
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4194
NsS'practice_blocks.thisIndex'
p4195
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4196
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4197
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4198
I1
sS'task.thisRepN'
p4199
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4200
I1
sg37
F0.11987185478210449
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4201
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4202
g106
sg48
g52
sS'task.thisN'
p4203
I0
sS'practice_trials_B.thisIndex'
p4204
g49
(g105
S'\x03\x00\x00\x00'
tRp4205
sg36
I1
sg4173
I4
sg72
g118
sg23
g119
sg40
F0.096215963363647461
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p4206
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4207
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4208
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4209
NsS'practice_blocks.thisIndex'
p4210
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4211
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4212
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4213
I2
sS'task.thisRepN'
p4214
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4215
I2
sg37
F0.096393108367919922
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4216
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4217
g106
sg48
g52
sS'task.thisN'
p4218
I0
sS'practice_trials_B.thisIndex'
p4219
g49
(g105
S'\x00\x00\x00\x00'
tRp4220
sg36
I1
sg4173
I1
sg72
g118
sg23
g113
sg40
F0.10709095001220703
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p4221
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4222
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4223
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4224
NsS'practice_blocks.thisIndex'
p4225
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4226
I0
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4227
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4228
I3
sS'task.thisRepN'
p4229
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4230
I3
sg37
F0.10725307464599609
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4231
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4232
g106
sg48
g52
sS'task.thisN'
p4233
I0
sS'practice_trials_B.thisIndex'
p4234
g49
(g105
S'\x02\x00\x00\x00'
tRp4235
sg36
I1
sg4173
I3
sg72
g118
sg23
g131
sg40
F0.10347700119018555
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p4236
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4237
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4238
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4239
NsS'practice_blocks.thisIndex'
p4240
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4241
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4242
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4243
I0
sS'task.thisRepN'
p4244
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4245
I4
sg37
F0.10366201400756836
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4246
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4247
g106
sg48
g52
sS'task.thisN'
p4248
I0
sS'practice_trials_B.thisIndex'
p4249
g49
(g105
S'\x00\x00\x00\x00'
tRp4250
sg36
I1
sg4173
I1
sg72
g118
sg23
g112
sg40
F0.10246801376342773
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p4251
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4252
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4253
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4254
NsS'practice_blocks.thisIndex'
p4255
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4256
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4257
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4258
I1
sS'task.thisRepN'
p4259
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4260
I5
sg37
F0.10277891159057617
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4261
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4262
g106
sg48
g52
sS'task.thisN'
p4263
I0
sS'practice_trials_B.thisIndex'
p4264
g49
(g105
S'\x01\x00\x00\x00'
tRp4265
sg36
I1
sg4173
I2
sg72
g118
sg23
g111
sg40
F0.10648393630981445
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p4266
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4267
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4268
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4269
NsS'practice_blocks.thisIndex'
p4270
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4271
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4272
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4273
I2
sS'task.thisRepN'
p4274
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4275
I6
sg37
F0.10675907135009766
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4276
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4277
g106
sg48
g52
sS'task.thisN'
p4278
I0
sS'practice_trials_B.thisIndex'
p4279
g49
(g105
S'\x03\x00\x00\x00'
tRp4280
sg36
I1
sg4173
I4
sg72
g118
sg23
g132
sg40
F0.087034940719604492
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p4281
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4282
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4283
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4284
NsS'practice_blocks.thisIndex'
p4285
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4286
I1
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4287
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4288
I3
sS'task.thisRepN'
p4289
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4290
I7
sg37
F0.088280916213989258
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4291
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4292
g106
sg48
g52
sS'task.thisN'
p4293
I0
sS'practice_trials_B.thisIndex'
p4294
g49
(g105
S'\x00\x00\x00\x00'
tRp4295
sg36
I1
sg4173
I1
sg72
g118
sg23
g114
sg40
F0.10685110092163086
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p4296
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4297
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4298
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4299
NsS'practice_blocks.thisIndex'
p4300
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4301
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4302
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4303
I0
sS'task.thisRepN'
p4304
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4305
I8
sg37
F0.10860109329223633
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4306
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4307
g106
sg48
g52
sS'task.thisN'
p4308
I0
sS'practice_trials_B.thisIndex'
p4309
g49
(g105
S'\x03\x00\x00\x00'
tRp4310
sg36
I1
sg4173
I4
sg72
g118
sg23
g131
sg40
F0.10349512100219727
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p4311
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4312
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4313
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4314
NsS'practice_blocks.thisIndex'
p4315
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4316
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4317
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4318
I1
sS'task.thisRepN'
p4319
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4320
I9
sg37
F0.10369396209716797
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4321
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4322
g106
sg48
g52
sS'task.thisN'
p4323
I0
sS'practice_trials_B.thisIndex'
p4324
g49
(g105
S'\x01\x00\x00\x00'
tRp4325
sg36
I1
sg4173
I2
sg72
g118
sg23
g111
sg40
F0.10459494590759277
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p4326
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4327
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4328
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4329
NsS'practice_blocks.thisIndex'
p4330
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4331
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4332
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4333
I2
sS'task.thisRepN'
p4334
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4335
I10
sg37
F0.10490179061889648
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4336
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4337
g106
sg48
g52
sS'task.thisN'
p4338
I0
sS'practice_trials_B.thisIndex'
p4339
g49
(g105
S'\x02\x00\x00\x00'
tRp4340
sg36
I1
sg4173
I3
sg72
g118
sg23
g119
sg40
F0.10745692253112793
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p4341
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4342
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4343
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4344
NsS'practice_blocks.thisIndex'
p4345
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4346
I2
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4347
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4348
I3
sS'task.thisRepN'
p4349
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4350
I11
sg37
F0.10767412185668945
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4351
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4352
g106
sg48
g52
sS'task.thisN'
p4353
I0
sS'practice_trials_B.thisIndex'
p4354
g49
(g105
S'\x02\x00\x00\x00'
tRp4355
sg36
I1
sg4173
I3
sg72
g118
sg23
g132
sg40
F0.1018679141998291
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p4356
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4357
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4358
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4359
NsS'practice_blocks.thisIndex'
p4360
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4361
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4362
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4363
I0
sS'task.thisRepN'
p4364
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4365
I12
sg37
F0.10205507278442383
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4366
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4367
g106
sg48
g52
sS'task.thisN'
p4368
I0
sS'practice_trials_B.thisIndex'
p4369
g49
(g105
S'\x03\x00\x00\x00'
tRp4370
sg36
I1
sg4173
I4
sg72
g118
sg23
g132
sg40
F0.10411906242370605
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p4371
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4372
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4373
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4374
NsS'practice_blocks.thisIndex'
p4375
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4376
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4377
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4378
I1
sS'task.thisRepN'
p4379
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4380
I13
sg37
F0.10430407524108887
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4381
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4382
g106
sg48
g52
sS'task.thisN'
p4383
I0
sS'practice_trials_B.thisIndex'
p4384
g49
(g105
S'\x00\x00\x00\x00'
tRp4385
sg36
I1
sg4173
I1
sg72
g118
sg23
g114
sg40
F0.1039121150970459
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p4386
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4387
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4388
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4389
NsS'practice_blocks.thisIndex'
p4390
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4391
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4392
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4393
I2
sS'task.thisRepN'
p4394
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4395
I14
sg37
F0.10513210296630859
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4396
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4397
g106
sg48
g52
sS'task.thisN'
p4398
I0
sS'practice_trials_B.thisIndex'
p4399
g49
(g105
S'\x01\x00\x00\x00'
tRp4400
sg36
I1
sg4173
I2
sg72
g118
sg23
g112
sg40
F0.10555291175842285
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p4401
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4402
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4403
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4404
NsS'practice_blocks.thisIndex'
p4405
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4406
I3
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4407
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4408
I3
sS'task.thisRepN'
p4409
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4410
I15
sg37
F0.10580110549926758
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4411
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4412
g106
sg48
g52
sS'task.thisN'
p4413
I0
sS'practice_trials_B.thisIndex'
p4414
g49
(g105
S'\x00\x00\x00\x00'
tRp4415
sg36
I1
sg4173
I1
sg72
g118
sg23
g113
sg40
F0.099519014358520508
sg39
I1
sg24
g123
sg73
g124
sS'practice_blocks.thisTrialN'
p4416
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4417
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4418
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4419
NsS'practice_blocks.thisIndex'
p4420
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4421
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4422
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4423
I0
sS'task.thisRepN'
p4424
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4425
I16
sg37
F0.10793209075927734
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4426
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4427
g106
sg48
g52
sS'task.thisN'
p4428
I0
sS'practice_trials_B.thisIndex'
p4429
g49
(g105
S'\x02\x00\x00\x00'
tRp4430
sg36
I1
sg4173
I3
sg72
g118
sg23
g130
sg40
F0.10272598266601562
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p4431
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4432
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4433
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4434
NsS'practice_blocks.thisIndex'
p4435
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4436
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4437
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4438
I1
sS'task.thisRepN'
p4439
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4440
I17
sg37
F0.10312294960021973
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4441
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4442
g106
sg48
g52
sS'task.thisN'
p4443
I0
sS'practice_trials_B.thisIndex'
p4444
g49
(g105
S'\x03\x00\x00\x00'
tRp4445
sg36
I1
sg4173
I4
sg72
g118
sg23
g132
sg40
F0.10693883895874023
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p4446
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4447
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4448
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4449
NsS'practice_blocks.thisIndex'
p4450
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4451
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4452
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4453
I2
sS'task.thisRepN'
p4454
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4455
I18
sg37
F0.10711979866027832
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4456
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4457
g106
sg48
g52
sS'task.thisN'
p4458
I0
sS'practice_trials_B.thisIndex'
p4459
g49
(g105
S'\x01\x00\x00\x00'
tRp4460
sg36
I1
sg4173
I2
sg72
g118
sg23
g113
sg40
F0.10116791725158691
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p4461
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4462
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4463
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4464
NsS'practice_blocks.thisIndex'
p4465
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4466
I4
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4467
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4468
I3
sS'task.thisRepN'
p4469
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4470
I19
sg37
F0.10137319564819336
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4471
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4472
g106
sg48
g52
sS'task.thisN'
p4473
I0
sS'practice_trials_B.thisIndex'
p4474
g49
(g105
S'\x03\x00\x00\x00'
tRp4475
sg36
I1
sg4173
I4
sg72
g118
sg23
g130
sg40
F0.098417997360229492
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p4476
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4477
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4478
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4479
NsS'practice_blocks.thisIndex'
p4480
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4481
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4482
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4483
I0
sS'task.thisRepN'
p4484
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4485
I20
sg37
F0.098640918731689453
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4486
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4487
g106
sg48
g52
sS'task.thisN'
p4488
I0
sS'practice_trials_B.thisIndex'
p4489
g49
(g105
S'\x02\x00\x00\x00'
tRp4490
sg36
I1
sg4173
I3
sg72
g118
sg23
g130
sg40
F0.098839998245239258
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p4491
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4492
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4493
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4494
NsS'practice_blocks.thisIndex'
p4495
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4496
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4497
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4498
I1
sS'task.thisRepN'
p4499
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4500
I21
sg37
F0.099125146865844727
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4501
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4502
g106
sg48
g52
sS'task.thisN'
p4503
I0
sS'practice_trials_B.thisIndex'
p4504
g49
(g105
S'\x00\x00\x00\x00'
tRp4505
sg36
I1
sg4173
I1
sg72
g118
sg23
g114
sg40
F0.097636938095092773
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p4506
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4507
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4508
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4509
NsS'practice_blocks.thisIndex'
p4510
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4511
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4512
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4513
I2
sS'task.thisRepN'
p4514
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4515
I22
sg37
F0.097839117050170898
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4516
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4517
g106
sg48
g52
sS'task.thisN'
p4518
I0
sS'practice_trials_B.thisIndex'
p4519
g49
(g105
S'\x01\x00\x00\x00'
tRp4520
sg36
I1
sg4173
I2
sg72
g118
sg23
g111
sg40
F0.10506916046142578
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p4521
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4522
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4523
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4524
NsS'practice_blocks.thisIndex'
p4525
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4526
I5
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4527
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4528
I3
sS'task.thisRepN'
p4529
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4530
I23
sg37
F0.10526609420776367
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4531
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4532
g106
sg48
g52
sS'task.thisN'
p4533
I0
sS'practice_trials_B.thisIndex'
p4534
g49
(g105
S'\x02\x00\x00\x00'
tRp4535
sg36
I1
sg4173
I3
sg72
g118
sg23
g131
sg40
F0.10524606704711914
sg39
I1
sg24
g151
sg73
g124
sS'practice_blocks.thisTrialN'
p4536
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4537
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4538
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4539
NsS'practice_blocks.thisIndex'
p4540
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4541
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4542
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4543
I0
sS'task.thisRepN'
p4544
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4545
I24
sg37
F0.10540080070495605
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4546
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4547
g106
sg48
g52
sS'task.thisN'
p4548
I0
sS'practice_trials_B.thisIndex'
p4549
g49
(g105
S'\x03\x00\x00\x00'
tRp4550
sg36
I1
sg4173
I4
sg72
g118
sg23
g119
sg40
F0.10364699363708496
sg39
I1
sg24
g101
sg73
g124
sS'practice_blocks.thisTrialN'
p4551
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4552
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4553
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4554
NsS'practice_blocks.thisIndex'
p4555
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4556
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4557
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4558
I1
sS'task.thisRepN'
p4559
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4560
I25
sg37
F0.10398006439208984
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4561
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4562
g106
sg48
g52
sS'task.thisN'
p4563
I0
sS'practice_trials_B.thisIndex'
p4564
g49
(g105
S'\x01\x00\x00\x00'
tRp4565
sg36
I1
sg4173
I2
sg72
g118
sg23
g114
sg40
F0.10230612754821777
sg39
I1
sg24
g99
sg73
g124
sS'practice_blocks.thisTrialN'
p4566
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4567
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4568
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4569
NsS'practice_blocks.thisIndex'
p4570
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4571
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4572
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4573
I2
sS'task.thisRepN'
p4574
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4575
I26
sg37
F0.10246396064758301
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4576
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4577
g106
sg48
g52
sS'task.thisN'
p4578
I0
sS'practice_trials_B.thisIndex'
p4579
g49
(g105
S'\x00\x00\x00\x00'
tRp4580
sg36
I1
sg4173
I1
sg72
g118
sg23
g112
sg40
F0.096150875091552734
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p4581
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4582
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4583
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4584
NsS'practice_blocks.thisIndex'
p4585
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4586
I6
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4587
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4588
I3
sS'task.thisRepN'
p4589
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4590
I27
sg37
F0.096285104751586914
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4591
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4592
g106
sg48
g52
sS'task.thisN'
p4593
I0
sS'practice_trials_B.thisIndex'
p4594
g49
(g105
S'\x03\x00\x00\x00'
tRp4595
sg36
I1
sg4173
I4
sg72
g118
sg23
g119
sg40
F0.093689203262329102
sg39
I1
sg24
g98
sg73
g124
sS'practice_blocks.thisTrialN'
p4596
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4597
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4598
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4599
NsS'practice_blocks.thisIndex'
p4600
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4601
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4602
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4603
I0
sS'task.thisRepN'
p4604
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4605
I28
sg37
F0.094721078872680664
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sa(dp4606
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4607
g106
sg48
g52
sS'task.thisN'
p4608
I0
sS'practice_trials_B.thisIndex'
p4609
g49
(g105
S'\x01\x00\x00\x00'
tRp4610
sg36
I1
sg4173
I2
sg72
g118
sg23
g112
sg40
F0.1062629222869873
sg39
I1
sg24
g100
sg73
g124
sS'practice_blocks.thisTrialN'
p4611
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4612
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4613
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4614
NsS'practice_blocks.thisIndex'
p4615
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4616
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4617
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4618
I1
sS'task.thisRepN'
p4619
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vd
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4620
I29
sg37
F0.10657095909118652
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4621
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4622
g106
sg48
g52
sS'task.thisN'
p4623
I0
sS'practice_trials_B.thisIndex'
p4624
g49
(g105
S'\x02\x00\x00\x00'
tRp4625
sg36
I1
sg4173
I3
sg72
g118
sg23
g130
sg40
F0.1043391227722168
sg39
I1
sg24
g152
sg73
g124
sS'practice_blocks.thisTrialN'
p4626
I0
sg76
g128
sg28
g109
sg4175
Vb
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4627
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4628
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4629
NsS'practice_blocks.thisIndex'
p4630
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4631
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4632
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4633
I2
sS'task.thisRepN'
p4634
I0
sg38
Ve
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4635
I30
sg37
F0.10468411445617676
sg87
I3
sg88
I4
sg71
g117
sg35
Vi
sa(dp4636
g65
g96
sg66
I80
sg67
g102
sS'task.thisIndex'
p4637
g106
sg48
g52
sS'task.thisN'
p4638
I0
sS'practice_trials_B.thisIndex'
p4639
g49
(g105
S'\x00\x00\x00\x00'
tRp4640
sg36
I1
sg4173
I1
sg72
g118
sg23
g113
sg40
F0.10191798210144043
sg39
I1
sg24
g150
sg73
g124
sS'practice_blocks.thisTrialN'
p4641
I0
sg76
g128
sg28
g109
sg4175
Va
sg78
g133
sg79
g134
sg25
g121
sg26
g121
sg83
g135
sg84
g109
sg85
I2
sS'practice_blocks.thisN'
p4642
I3
sg86
g137
sg89
g140
sg27
g135
sS'task.thisTrialN'
p4643
I0
sg53
g12
sg45
Vy
sg69
g69
sg56
Va
sS'practice_blocks.thisTrial'
p4644
NsS'practice_blocks.thisIndex'
p4645
g3540
sg70
g144
sS'practice_trials_B.thisRepN'
p4646
I7
sg81
g146
sg54
g55
sg44
V2
sg74
g153
sS'practice_blocks.thisRepN'
p4647
I3
sg75
g155
sS'practice_trials_B.thisTrialN'
p4648
I3
sS'task.thisRepN'
p4649
I0
sg38
Vi
sg77
g157
sg46
V
sg47
V
sg4184
Vc
sg80
g158
sg82
g160
sg68
g161
sS'practice_trials_B.thisN'
p4650
I31
sg37
F0.10210299491882324
sg87
I3
sg88
I4
sg71
g117
sg35
Ve
sasS'loops'
p4651
(lp4652
g1
(cpsychopy.data
TrialHandler
p4653
g3
NtRp4654
(dp4655
S'origin'
p4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4657
sS'thisTrial'
p4658
(lp4659
sS'_exp'
p4660
I207184688
sg11
S'task'
p4661
sg6
g7
sS'thisRepN'
p4662
I1
sg41
I01
sg42
g43
sS'data'
p4663
g1
(cpsychopy.data
DataHandler
p4664
c__builtin__
dict
p4665
(dp4666
S'ran'
p4667
cnumpy.ma.core
_mareconstruct
p4668
(cnumpy.ma.core
MaskedArray
p4669
cnumpy
ndarray
p4670
(I0
tp4671
S'b'
tRp4672
(I1
(I1
I1
tg50
(S'f4'
I0
I1
tRp4673
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?'
S'\x00'
NtbsS'order'
p4674
g4668
(g4669
g4670
g4671
S'b'
tRp4675
(I1
(I1
I1
tg4673
I00
S'\x00\x00\x00\x00'
S'\x00'
NtbstRp4676
(dp4677
S'isNumeric'
p4678
(dp4679
g4667
I01
sg4674
I01
ssS'trials'
p4680
g4654
sS'dataTypes'
p4681
(lp4682
g4667
ag4674
asS'dataShape'
p4683
(lp4684
I1
aI1
asbsS'method'
p4685
S'sequential'
p4686
sS'sequenceIndices'
p4687
cnumpy.core.multiarray
_reconstruct
p4688
(g4670
(I0
tS'b'
tRp4689
(I1
(I1
I1
tg105
I00
S'\x00\x00\x00\x00'
tbsS'finished'
p4690
I01
sS'nReps'
p4691
I1
sS'nRemaining'
p4692
I-1
sS'trialList'
p4693
(lp4694
g1
(cpsychopy.data
TrialType
p4695
g4665
(dp4696
g65
g96
sg66
I80
sg67
g102
sg69
g69
sg70
g144
sg71
g117
sg72
g118
sg73
g124
sg74
g153
sg75
g155
sg76
g128
sg77
g157
sg78
g133
sg79
g134
sg80
g158
sg81
g146
sg82
g160
sg83
g135
sg84
g109
sg68
g161
sg86
g137
sg87
I3
sg88
I4
sg85
I2
sg89
g140
stRp4697
asS'seed'
p4698
NsS'thisIndex'
p4699
g106
sS'thisN'
p4700
I1
sS'thisTrialN'
p4701
I0
sS'nTotal'
p4702
I1
sS'_warnUseOfNext'
p4703
I01
sbag1
(g4653
g3
NtRp4704
(dp4705
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4706
sg4658
(lp4707
sg4660
I207184688
sg11
S'practice_blocks'
p4708
sg6
g7
sg4662
I4
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp4709
g4667
g4668
(g4669
g4670
g4671
S'b'
tRp4710
(I1
(I1
I4
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00'
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp4711
(I1
(I1
I4
tg4673
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@'
S'\x00\x00\x00\x00'
NtbstRp4712
(dp4713
g4678
(dp4714
g4667
I01
sg4674
I01
ssg4680
g4704
sg4681
(lp4715
g4667
ag4674
asg4683
(lp4716
I1
aI4
asbsg4685
g4686
sg4687
g4688
(g4670
(I0
tS'b'
tRp4717
(I1
(I1
I4
tg105
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg4690
I01
sg4691
I4
sg4692
I-1
sg4693
(lp4718
Nasg4698
Nsg4699
g3540
sg4700
I4
sg4701
I0
sg4702
I4
sg4703
I01
sbag1
(g4653
g3
NtRp4719
(dp4720
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4721
sg4658
(lp4722
sg4660
I207184688
sg11
S'practice_Afirst'
p4723
sg6
g7
sg4662
I1
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp4724
g4667
g4668
(g4669
g4670
g4671
S'b'
tRp4725
(I1
(I1
I1
tg4673
I00
S'\x00\x00\x80?'
S'\x00'
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp4726
(I1
(I1
I1
tg4673
I00
S'\x00\x00\x00\x00'
S'\x00'
NtbstRp4727
(dp4728
g4678
(dp4729
g4667
I01
sg4674
I01
ssg4680
g4719
sg4681
(lp4730
g4667
ag4674
asg4683
(lp4731
I1
aI1
asbsg4685
g4686
sg4687
g4688
(g4670
(I0
tS'b'
tRp4732
(I1
(I1
I1
tg105
I00
S'\x00\x00\x00\x00'
tbsg4690
I01
sg4691
I1
sg4692
I-1
sg4693
(lp4733
Nasg4698
Nsg4699
g108
sg4700
I1
sg4701
I0
sg4702
I1
sg4703
I01
sbag1
(g4653
g3
NtRp4734
(dp4735
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4736
sg4658
(lp4737
sg4660
I207184688
sg11
S'practice_trials_Afirst'
p4738
sg6
g7
sg4662
I8
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp4739
g31
g4668
(g4669
g4670
g4671
S'b'
tRp4740
(I1
(I4
I8
tg4673
I00
S'`8\xd0=@\x80\xd0=`R\xd1=\xa0\xc1\xd0=\x80\x1b\xd0= \xf5\xcc=`}\xd1=\xa0P\xcf=`G\xd1=\xc0B\xd0=\x80\xbe\xd1=\x00\x9e\xd0=\x00)\xd1=@\x0b\xd0= \x12\xd0=`A\xd0=\xe0\xeb\xcf=\xc0\xcc\xd0=\x80<\xd0=\x80\xfc\xd0=\x80{\xd0=\x00f\xd0=`\xba\xd0=\x80\x91\xd0=\x00Q\xd0=\x80b\xcf=\x00\x99\xcf=\xe00\xd1=\x00%\xd0=\xe0e\xd1= \xa8\xcf=\x80\xfd\xd0='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g4668
(g4669
g4670
g4671
S'b'
tRp4741
(I1
(I4
I8
tg4673
I00
S'\xa0\x90\xcf=\x00\x1c\xd0= \x95\xd0=@*\xd0=\xc0]\xcf=`w\xcc=\x80\xdd\xd0= \xb1\xce=\x00\xdd\xd0=@\xd3\xcf=\xc0\x99\xd1= =\xd0=\xc0W\xd0=`\xec\xcf=@\xca\xcf=\xa0\xa8\xcf=\x00\x99\xcf=\x00R\xd0=\x00\xf1\xcf=\x80\xb2\xd0=\xa0\xd1\xcf=\xc0*\xd0= I\xd0=\x00$\xd0=\xe0\xcb\xcf=\x80\x03\xcf=@2\xcf=\xc0\x95\xd0=\x80c\xcf=\x00R\xd1=\xc0\x13\xcf=\xa0\x94\xd0='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg4667
g4668
(g4669
g4670
g4671
S'b'
tRp4742
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg29
g4688
(g4670
(I0
tS'b'
tRp4743
(I1
(I4
I8
tg50
(S'O4'
I0
I1
tRp4744
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp4745
Vi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
atbsg32
g4688
(g4670
(I0
tS'b'
tRp4746
(I1
(I4
I8
tg4744
I00
(lp4747
Ve
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
atbsg33
g4668
(g4669
g4670
g4671
S'b'
tRp4748
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg30
g4668
(g4669
g4670
g4671
S'b'
tRp4749
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp4750
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x00@\x00\x00\x80@\x00\x00\x10A\x00\x00@A\x00\x00\x90A\x00\x00\xa0A\x00\x00\xc0A\x00\x00\xe0A\x00\x00\x80?\x00\x00\xa0@\x00\x00 A\x00\x00`A\x00\x00\x88A\x00\x00\xb0A\x00\x00\xd8A\x00\x00\xf8A\x00\x00\x00\x00\x00\x00\xe0@\x00\x000A\x00\x00PA\x00\x00\x80A\x00\x00\xa8A\x00\x00\xc8A\x00\x00\xe8A\x00\x00@@\x00\x00\xc0@\x00\x00\x00A\x00\x00pA\x00\x00\x98A\x00\x00\xb8A\x00\x00\xd0A\x00\x00\xf0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4751
(dp4752
g4678
(dp4753
g31
I01
sg34
I01
sg4667
I01
sg29
I00
sg4674
I01
sg33
I01
sg30
I01
sg32
I00
ssg4680
g4734
sg4681
(lp4754
g4667
ag4674
ag29
ag30
ag31
ag32
ag33
ag34
asg4683
(lp4755
I4
aI8
asbsg4685
S'random'
p4756
sg4687
g4688
(g4670
(I0
tS'b'
tRp4757
(I1
(I4
I8
tg105
I01
S'\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00'
tbsg4690
I01
sg4691
I8
sg4692
I-1
sg4693
(lp4758
g1
(g4695
g4665
(dp4759
g90
I1
sg91
Va
sg92
Vc
stRp4760
ag1
(g4695
g4665
(dp4761
g90
I2
sg91
Va
sg92
Vd
stRp4762
ag1
(g4695
g4665
(dp4763
g90
I3
sg91
Vb
sg92
Vc
stRp4764
ag1
(g4695
g4665
(dp4765
g90
I4
sg91
Vb
sg92
Vd
stRp4766
asg4698
Nsg4699
g772
sg4700
I32
sg4701
I0
sg4702
I32
sg4703
I01
sbag1
(g4653
g3
NtRp4767
(dp4768
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4769
sg4658
(lp4770
sg4660
I207184688
sg11
S'practice_trials_B'
p4771
sg6
g7
sg4662
I8
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp4772
g38
g4688
(g4670
(I0
tS'b'
tRp4773
(I1
(I4
I8
tg4744
I00
(lp4774
Vi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
atbsg4667
g4668
(g4669
g4670
g4671
S'b'
tRp4775
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg36
g4668
(g4669
g4670
g4671
S'b'
tRp4776
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg37
g4668
(g4669
g4670
g4671
S'b'
tRp4777
(I1
(I4
I8
tg4673
I00
S'\xa0\x0f\xcf=@U\xfe=\x00L\xc7=\xa0Q\xcf=@^\xd6=`\x8e\xd7=\xa0\xf4\xd0=\x80g\xd1=\x80Z\xd0=@#\xd8=\x80\xdb\xc1=\xa0\xe6\xce=\xa0\t\xd7=\x80\x90\xd3=`\xb5\xd6=\xe0\xa2\xda=\x00\x1c\xcd=\xa0\x80\xdc=\xc0\xfa\xd4=\x80"\xcc=`\xde\xdf=\x80\xce\xb6=`\xda\xd7=@8\xd8=@\xa8\xd6=\xe0\xb4\xf9=\xa0\xee\xe3=`\xb8\xd7=\xc0\xe4\xb8=`\xb7\xcf=`\xbe\xce=\x00\xa3\xd2='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg40
g4668
(g4669
g4670
g4671
S'b'
tRp4778
(I1
(I4
I8
tg4673
I00
S'\xa0#\xce=`\xe1\xfd=@ \xc2=\xa0\xef\xce=\xe0\x14\xd6=\x00\x05\xd7=\xa0\x11\xcf= \x85\xc7=\x80N\xcf=@\xb8\xd7=\xa0\x85\xc0=\xe0F\xd1=`\xb5\xd6=\x809\xd3=`\xdd\xd5=`x\xd7=\xe0\t\xcc=\xc0\x1a\xdc= \xc1\xd4=\x80L\xcb=\xa0v\xdf=\x80m\xb2=@\xb1\xd5=\xa0\xde\xd7=\xa0\x17\xd5=\xa0M\xf9=`f\xe3=\x80P\xd7=\x80r\xb7=\xe0\x8e\xcc=\x00\n\xce=\xc0=\xd2='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g4668
(g4669
g4670
g4671
S'b'
tRp4779
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp4780
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x00@\x00\x00\xc0@\x00\x000A\x00\x00`A\x00\x00\x90A\x00\x00\xb0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\x80?\x00\x00\xe0@\x00\x00 A\x00\x00pA\x00\x00\x88A\x00\x00\xa0A\x00\x00\xc8A\x00\x00\xf8A\x00\x00\x00\x00\x00\x00\x80@\x00\x00\x00A\x00\x00@A\x00\x00\x80A\x00\x00\xb8A\x00\x00\xd0A\x00\x00\xe8A\x00\x00@@\x00\x00\xa0@\x00\x00\x10A\x00\x00PA\x00\x00\x98A\x00\x00\xa8A\x00\x00\xc0A\x00\x00\xf0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg35
g4688
(g4670
(I0
tS'b'
tRp4781
(I1
(I4
I8
tg4744
I00
(lp4782
Ve
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
atbstRp4783
(dp4784
g4678
(dp4785
g38
I00
sg4667
I01
sg36
I01
sg37
I01
sg40
I01
sg39
I01
sg4674
I01
sg35
I00
ssg4680
g4767
sg4681
(lp4786
g4667
ag4674
ag35
ag36
ag37
ag38
ag39
ag40
asg4683
(lp4787
I4
aI8
asbsg4685
g4756
sg4687
g4688
(g4670
(I0
tS'b'
tRp4788
(I1
(I4
I8
tg105
I01
S'\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00'
tbsg4690
I01
sg4691
I8
sg4692
I-1
sg4693
(lp4789
g1
(g4695
g4665
(dp4790
g789
I1
sg791
Va
sg800
Vc
stRp4791
ag1
(g4695
g4665
(dp4792
g789
I2
sg791
Va
sg800
Vd
stRp4793
ag1
(g4695
g4665
(dp4794
g789
I3
sg791
Vb
sg800
Vc
stRp4795
ag1
(g4695
g4665
(dp4796
g789
I4
sg791
Vb
sg800
Vd
stRp4797
asg4698
Nsg4699
g1256
sg4700
I32
sg4701
I0
sg4702
I32
sg4703
I01
sbag1
(g4653
g3
NtRp4798
(dp4799
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4800
sg4658
(lp4801
sg4660
I207184688
sg11
S'practice_Asecond'
p4802
sg6
g7
sg4662
I0
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp4803
g4667
g4668
(g4669
g4670
g4671
S'b'
tRp4804
(I1
(I1
I0
tg4673
I00
S''
S''
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp4805
(I1
(I1
I0
tg4673
I00
S''
S''
NtbstRp4806
(dp4807
g4678
(dp4808
g4667
I01
sg4674
I01
ssg4680
g4798
sg4681
(lp4809
g4667
ag4674
asg4683
(lp4810
I1
aI0
asbsg4685
g4686
sg4687
g4688
(g4670
(I0
tS'b'
tRp4811
(I1
(I1
I0
tg105
I00
S''
tbsg4690
I01
sg4691
I0
sg4692
I-1
sg4693
(lp4812
Nasg4698
Nsg4699
I0
sg4700
I0
sg4701
I0
sg4702
I0
sg4703
I01
sbag1
(g4653
g3
NtRp4813
(dp4814
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4815
sg4658
(lp4816
sg4660
I207184688
sg11
g4723
sg6
g7
sg4662
I1
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp4817
g4667
g4668
(g4669
g4670
g4671
S'b'
tRp4818
(I1
(I1
I1
tg4673
I00
S'\x00\x00\x80?'
S'\x00'
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp4819
(I1
(I1
I1
tg4673
I00
S'\x00\x00\x00\x00'
S'\x00'
NtbstRp4820
(dp4821
g4678
(dp4822
g4667
I01
sg4674
I01
ssg4680
g4813
sg4681
(lp4823
g4667
ag4674
asg4683
(lp4824
I1
aI1
asbsg4685
g4686
sg4687
g4688
(g4670
(I0
tS'b'
tRp4825
(I1
(I1
I1
tg105
I00
S'\x00\x00\x00\x00'
tbsg4690
I01
sg4691
I1
sg4692
I-1
sg4693
(lp4826
Nasg4698
Nsg4699
g1271
sg4700
I1
sg4701
I0
sg4702
I1
sg4703
I01
sbag1
(g4653
g3
NtRp4827
(dp4828
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4829
sg4658
(lp4830
sg4660
I207184688
sg11
g4738
sg6
g7
sg4662
I8
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp4831
g31
g4668
(g4669
g4670
g4671
S'b'
tRp4832
(I1
(I4
I8
tg4673
I00
S'@\xb7\xd3= M\xd5=\xa0V\xc7=\xa0\xdd\xd0=`\xcb\xcf=\xc0H\xd3=@\xe1\xd6=\x80\x91\xde=\x80Q\xc9=@v\xc8=\x00\x86\xcc=\x80\xc6\xda=\xe0d\xd8=\xa0`}> \xac\xc6=\xa0X\xd2=\xa0.\xd9=\xa0\'\xd7=`\x9b\xd1= \xd2\xda=`\xf8\xd2=`\xf0\xcc=\xa0\xff\xc5=\x00\xcb\xce=\xe0\xad\xda= ?\xdf=\xc0n\xd1=\xc0\x89\xd6=\xc0k\xd7=\xe0"\xdb= \xe6\xd2=@\x0c\xd4='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g4668
(g4669
g4670
g4671
S'b'
tRp4833
(I1
(I4
I8
tg4673
I00
S'`\xeb\xd2=`\xe6\xd4=`\xe6\xc6=\xc0\x81\xd0=\xe0 \xcf=\x00\xe3\xd2= \xc6\xd5=\xe0,\xde=\x00\xef\xc8=\x80\x0e\xc8=\xe0\xea\xcb=\xa0[\xda=\xe0\x04\xd8=\x90Gr>\x00h\xc6=\x007\xd2= \xc2\xd8=\xc0\xc9\xd6=\x80\xbc\xd0=\x80\x05\xda=\x80L\xd2=\x80\xb7\xce=@\x8b\xc5=\xe0\x7f\xce=\xa0F\xda=@\xf5\xde=\x803\xd1=\x80\xb4\xd5=@\xb3\xd6=\x80\xa5\xda=\x00\x8e\xd2=@I\xd3='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg4667
g4668
(g4669
g4670
g4671
S'b'
tRp4834
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg29
g4688
(g4670
(I0
tS'b'
tRp4835
(I1
(I4
I8
tg4744
I00
(lp4836
Vi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
atbsg32
g4688
(g4670
(I0
tS'b'
tRp4837
(I1
(I4
I8
tg4744
I00
(lp4838
Ve
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
atbsg33
g4668
(g4669
g4670
g4671
S'b'
tRp4839
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg30
g4668
(g4669
g4670
g4671
S'b'
tRp4840
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp4841
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x00\x00\x00\x00\xe0@\x00\x00\x00A\x00\x00pA\x00\x00\x90A\x00\x00\xb0A\x00\x00\xd0A\x00\x00\xf8A\x00\x00\x80?\x00\x00\xa0@\x00\x00\x10A\x00\x00`A\x00\x00\x88A\x00\x00\xa0A\x00\x00\xc8A\x00\x00\xe0A\x00\x00\x00@\x00\x00\xc0@\x00\x000A\x00\x00PA\x00\x00\x98A\x00\x00\xa8A\x00\x00\xc0A\x00\x00\xf0A\x00\x00@@\x00\x00\x80@\x00\x00 A\x00\x00@A\x00\x00\x80A\x00\x00\xb8A\x00\x00\xd8A\x00\x00\xe8A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4842
(dp4843
g4678
(dp4844
g31
I01
sg34
I01
sg4667
I01
sg29
I00
sg4674
I01
sg33
I01
sg30
I01
sg32
I00
ssg4680
g4827
sg4681
(lp4845
g4667
ag4674
ag29
ag30
ag31
ag32
ag33
ag34
asg4683
(lp4846
I4
aI8
asbsg4685
g4756
sg4687
g4688
(g4670
(I0
tS'b'
tRp4847
(I1
(I4
I8
tg105
I01
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00'
tbsg4690
I01
sg4691
I8
sg4692
I-1
sg4693
(lp4848
g1
(g4695
g4665
(dp4849
g1274
I1
sg1278
Va
sg1290
Vc
stRp4850
ag1
(g4695
g4665
(dp4851
g1274
I2
sg1278
Va
sg1290
Vd
stRp4852
ag1
(g4695
g4665
(dp4853
g1274
I3
sg1278
Vb
sg1290
Vc
stRp4854
ag1
(g4695
g4665
(dp4855
g1274
I4
sg1278
Vb
sg1290
Vd
stRp4856
asg4698
Nsg4699
g1900
sg4700
I32
sg4701
I0
sg4702
I32
sg4703
I01
sbag1
(g4653
g3
NtRp4857
(dp4858
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4859
sg4658
(lp4860
sg4660
I207184688
sg11
g4771
sg6
g7
sg4662
I8
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp4861
g38
g4688
(g4670
(I0
tS'b'
tRp4862
(I1
(I4
I8
tg4744
I00
(lp4863
Vi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
atbsg4667
g4668
(g4669
g4670
g4671
S'b'
tRp4864
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg36
g4668
(g4669
g4670
g4671
S'b'
tRp4865
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg37
g4668
(g4669
g4670
g4671
S'b'
tRp4866
(I1
(I4
I8
tg4673
I00
S'`X\xd7=\xa0\xb5\xd7=\xe0\x19\xd8= \x17\xd5=\x80\xc3\xd6=\x80o\xd6=@\xfe\xd2=@\xd0\xd5=\x00v\xd9=\x00W\xd5=\x00\x9c\xc9=\x80=\xd4=\xc0\x05\xd6=\x80\xcf\xc8=\xc0\xf8\xd4=\xc0\x1e\xd3=\xc0k\xdb=\xa0\x11\xd6=\xe0\xbd\xdc=\xe0\x10\xd5=@\xc4\xd7=\x80\xfe\xd4=\x80\xb7\xe3=\xc01\xd5=\x80-\xd6=\xe0\xf9\xd0=\x00\x91\xcc=\xe0w\xd3=\xe0\xb6\xd2=\xe0\xfe\xd5=@\xb5\xd6=@_\xda='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg40
g4668
(g4669
g4670
g4671
S'b'
tRp4867
(I1
(I4
I8
tg4673
I00
S'@\xf4\xd6=\xe0A\xd7=\x80\xb2\xd7=\xe0\xaf\xd4= Z\xd6=\xc0\x07\xd6=\x80\x98\xd2=@\\\xd5=`\t\xd9=\xa0\xeb\xd4=`D\xc9=\xe0\xcc\xd3=\xe0\xbf\xd5=\xc0*\xc8=\x00\x93\xd4=`\xb7\xd2=\x00\xfd\xda=\xa0\xaf\xd5=@&\xdc=\x00\xa8\xd4=\x80[\xd7=\xc0\x8b\xd4=\x004\xe3=\xa0\xf6\xd4=\x80\xc1\xd5=\xe0\x8e\xd0=\xe0,\xcc= \x1b\xd3= \xf9\xd1= \x9a\xd5=\xe0J\xd6=\x80\xf7\xd9='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g4668
(g4669
g4670
g4671
S'b'
tRp4868
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp4869
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x00@\x00\x00\xc0@\x00\x00\x00A\x00\x00@A\x00\x00\x90A\x00\x00\xa0A\x00\x00\xc8A\x00\x00\xf0A\x00\x00\x00\x00\x00\x00\x80@\x00\x00 A\x00\x00PA\x00\x00\x98A\x00\x00\xb0A\x00\x00\xd8A\x00\x00\xf8A\x00\x00@@\x00\x00\xa0@\x00\x000A\x00\x00`A\x00\x00\x80A\x00\x00\xb8A\x00\x00\xd0A\x00\x00\xe8A\x00\x00\x80?\x00\x00\xe0@\x00\x00\x10A\x00\x00pA\x00\x00\x88A\x00\x00\xa8A\x00\x00\xc0A\x00\x00\xe0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg35
g4688
(g4670
(I0
tS'b'
tRp4870
(I1
(I4
I8
tg4744
I00
(lp4871
Ve
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
atbstRp4872
(dp4873
g4678
(dp4874
g38
I00
sg4667
I01
sg36
I01
sg37
I01
sg40
I01
sg39
I01
sg4674
I01
sg35
I00
ssg4680
g4857
sg4681
(lp4875
g4667
ag4674
ag35
ag36
ag37
ag38
ag39
ag40
asg4683
(lp4876
I4
aI8
asbsg4685
g4756
sg4687
g4688
(g4670
(I0
tS'b'
tRp4877
(I1
(I4
I8
tg105
I01
S'\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
tbsg4690
I01
sg4691
I8
sg4692
I-1
sg4693
(lp4878
g1
(g4695
g4665
(dp4879
g1917
I1
sg1919
Va
sg1928
Vc
stRp4880
ag1
(g4695
g4665
(dp4881
g1917
I2
sg1919
Va
sg1928
Vd
stRp4882
ag1
(g4695
g4665
(dp4883
g1917
I3
sg1919
Vb
sg1928
Vc
stRp4884
ag1
(g4695
g4665
(dp4885
g1917
I4
sg1919
Vb
sg1928
Vd
stRp4886
asg4698
Nsg4699
g2384
sg4700
I32
sg4701
I0
sg4702
I32
sg4703
I01
sbag1
(g4653
g3
NtRp4887
(dp4888
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4889
sg4658
(lp4890
sg4660
I207184688
sg11
g4802
sg6
g7
sg4662
I0
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp4891
g4667
g4668
(g4669
g4670
g4671
S'b'
tRp4892
(I1
(I1
I0
tg4673
I00
S''
S''
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp4893
(I1
(I1
I0
tg4673
I00
S''
S''
NtbstRp4894
(dp4895
g4678
(dp4896
g4667
I01
sg4674
I01
ssg4680
g4887
sg4681
(lp4897
g4667
ag4674
asg4683
(lp4898
I1
aI0
asbsg4685
g4686
sg4687
g4688
(g4670
(I0
tS'b'
tRp4899
(I1
(I1
I0
tg105
I00
S''
tbsg4690
I01
sg4691
I0
sg4692
I-1
sg4693
(lp4900
Nasg4698
Nsg4699
I0
sg4700
I0
sg4701
I0
sg4702
I0
sg4703
I01
sbag1
(g4653
g3
NtRp4901
(dp4902
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4903
sg4658
(lp4904
sg4660
I207184688
sg11
g4723
sg6
g7
sg4662
I1
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp4905
g4667
g4668
(g4669
g4670
g4671
S'b'
tRp4906
(I1
(I1
I1
tg4673
I00
S'\x00\x00\x80?'
S'\x00'
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp4907
(I1
(I1
I1
tg4673
I00
S'\x00\x00\x00\x00'
S'\x00'
NtbstRp4908
(dp4909
g4678
(dp4910
g4667
I01
sg4674
I01
ssg4680
g4901
sg4681
(lp4911
g4667
ag4674
asg4683
(lp4912
I1
aI1
asbsg4685
g4686
sg4687
g4688
(g4670
(I0
tS'b'
tRp4913
(I1
(I1
I1
tg105
I00
S'\x00\x00\x00\x00'
tbsg4690
I01
sg4691
I1
sg4692
I-1
sg4693
(lp4914
Nasg4698
Nsg4699
g2399
sg4700
I1
sg4701
I0
sg4702
I1
sg4703
I01
sbag1
(g4653
g3
NtRp4915
(dp4916
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4917
sg4658
(lp4918
sg4660
I207184688
sg11
g4738
sg6
g7
sg4662
I8
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp4919
g31
g4668
(g4669
g4670
g4671
S'b'
tRp4920
(I1
(I4
I8
tg4673
I00
S'\x80\xdc\xcc=\xc0\x0c\xdb=@\\\xe4=\xa0\x1c\xd7=@u\xd6=\xe0^\xd9=\xa0i\xdb=\xa0F\xda=`\x87\xbf=\xa0t\xde=@\x14\xd7= N\xd5= >\xda=\x00\xb8\xd5=\xe0\x8a\xce=`\xd0\xd7=\xa0M\xd5=\xe0J\xd3=\x00E\xd3= -\xd1=\xa0\xff\xd7=@\xac\xc9=\x80o\xd7= ;\xcf=\xc0\xd3\xdd=\xa0m\xd1=\x80\xc2\xcb=\xa0s\xd7=@\xb3\xd9=\x80N\xd3=\x00\xc6\xd0=\xc0^\xcb='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g4668
(g4669
g4670
g4671
S'b'
tRp4921
(I1
(I4
I8
tg4673
I00
S'\x00\x8f\xcc=`\xac\xda=\x80\xbf\xe3=\x00{\xd6=`?\xd6=@\xd9\xd8= \xfd\xd9=\xc0\xe8\xd9=\xe0\n\xbd= j\xcd=`\xa2\xd6=\xe0\xfa\xd4=\xa0\xcf\xd9=@r\xd5=\xa0\x17\xce=\x00o\xd7=\xe0\xdb\xd4=\xc0\xbd\xd2=\xc0R\xd2=\x80\xb1\xd0=`\xd0\xd7=@?\xc9=\xe0\x00\xd7=\x00\xac\xce=\xc0R\xdd=\x80\x1b\xd0=\xe0(\xcb=\xe0\x0c\xd7= M\xd9=\xa0\xe4\xd2=\xc0a\xd0=\xc0\x85\xb9='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg4667
g4668
(g4669
g4670
g4671
S'b'
tRp4922
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg29
g4688
(g4670
(I0
tS'b'
tRp4923
(I1
(I4
I8
tg4744
I00
(lp4924
Vi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
atbsg32
g4688
(g4670
(I0
tS'b'
tRp4925
(I1
(I4
I8
tg4744
I00
(lp4926
Ve
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
atbsg33
g4668
(g4669
g4670
g4671
S'b'
tRp4927
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg30
g4668
(g4669
g4670
g4671
S'b'
tRp4928
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp4929
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x00@\x00\x00\xa0@\x00\x00 A\x00\x00PA\x00\x00\x90A\x00\x00\xa0A\x00\x00\xd8A\x00\x00\xe8A\x00\x00@@\x00\x00\xe0@\x00\x00\x10A\x00\x00@A\x00\x00\x98A\x00\x00\xb8A\x00\x00\xd0A\x00\x00\xf0A\x00\x00\x80?\x00\x00\x80@\x00\x000A\x00\x00pA\x00\x00\x88A\x00\x00\xa8A\x00\x00\xc0A\x00\x00\xf8A\x00\x00\x00\x00\x00\x00\xc0@\x00\x00\x00A\x00\x00`A\x00\x00\x80A\x00\x00\xb0A\x00\x00\xc8A\x00\x00\xe0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4930
(dp4931
g4678
(dp4932
g31
I01
sg34
I01
sg4667
I01
sg29
I00
sg4674
I01
sg33
I01
sg30
I01
sg32
I00
ssg4680
g4915
sg4681
(lp4933
g4667
ag4674
ag29
ag30
ag31
ag32
ag33
ag34
asg4683
(lp4934
I4
aI8
asbsg4685
g4756
sg4687
g4688
(g4670
(I0
tS'b'
tRp4935
(I1
(I4
I8
tg105
I01
S'\x03\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00'
tbsg4690
I01
sg4691
I8
sg4692
I-1
sg4693
(lp4936
g1
(g4695
g4665
(dp4937
g2402
I1
sg2406
Va
sg2418
Vc
stRp4938
ag1
(g4695
g4665
(dp4939
g2402
I2
sg2406
Va
sg2418
Vd
stRp4940
ag1
(g4695
g4665
(dp4941
g2402
I3
sg2406
Vb
sg2418
Vc
stRp4942
ag1
(g4695
g4665
(dp4943
g2402
I4
sg2406
Vb
sg2418
Vd
stRp4944
asg4698
Nsg4699
g3028
sg4700
I32
sg4701
I0
sg4702
I32
sg4703
I01
sbag1
(g4653
g3
NtRp4945
(dp4946
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4947
sg4658
(lp4948
sg4660
I207184688
sg11
g4771
sg6
g7
sg4662
I8
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp4949
g38
g4688
(g4670
(I0
tS'b'
tRp4950
(I1
(I4
I8
tg4744
I00
(lp4951
Vi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
atbsg4667
g4668
(g4669
g4670
g4671
S'b'
tRp4952
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg36
g4668
(g4669
g4670
g4671
S'b'
tRp4953
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg37
g4668
(g4669
g4670
g4671
S'b'
tRp4954
(I1
(I4
I8
tg4673
I00
S'@\xc9\xd3=\xa0Q\xd3=\xe0I\xcb=\xc0\x8f\xce=\x00\xf8\xdc=\xa0\xc4\xdd=`\xb2\xce=\xa0>\xd0=\x80\xaa\xc3=\x80\xd1\xcc=\x80c\xdd=\x80\xad\xd2=\xe0,\xe2= \x06\xcc= N\xcb= \x1a\xd2=\xc0\xce\xd8=@\x99\xdf=`b\xc8=\x80?\xd1=\xa06\xd1=@A\xdb=\xa0\xd6\xdf=\xc0\xa3\xca=\xc0\x01\xdf= {\xd9= e\xcf=\xc0\xb5\xd0=\xa0x\xd1= h\xd7= \x17\xd1=\x80\\\x12>'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg40
g4668
(g4669
g4670
g4671
S'b'
tRp4955
(I1
(I4
I8
tg4673
I00
S'\xc0\r\xd1= \xc6\xd2=\xa0\xe7\xc8=`\x1c\xce=\x00\x8b\xdc=@g\xdd=`\x07\xce=\xe0\xa2\xcc=\xa0\x90\xc0=\xa0\xf0\xcb=\xc0\xb0\xdc=\xc0\x10\xd2=\x00\xd0\xe1=\x00\x99\xcb=\xa0\xe3\xca= \xee\xd1= \xb9\xd8=@I\xdd=\x80\xf5\xc7=@\xe2\xd0=\xa0\xd2\xc8=@\xbf\xda= \x80\xdf=\xe0\x19\xca=\xc0U\xde=`\t\xd9=\xe0\x89\xce=\xe06\xd0=  \xd1=@T\xd6=\xa0\xaa\xd0=\xe0\x18\x12>'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g4668
(g4669
g4670
g4671
S'b'
tRp4956
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp4957
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x00@\x00\x00\xe0@\x00\x00\x00A\x00\x00PA\x00\x00\x98A\x00\x00\xb0A\x00\x00\xc0A\x00\x00\xe8A\x00\x00\x80?\x00\x00\xa0@\x00\x00\x10A\x00\x00`A\x00\x00\x88A\x00\x00\xa0A\x00\x00\xc8A\x00\x00\xf0A\x00\x00@@\x00\x00\x80@\x00\x000A\x00\x00pA\x00\x00\x90A\x00\x00\xa8A\x00\x00\xd0A\x00\x00\xf8A\x00\x00\x00\x00\x00\x00\xc0@\x00\x00 A\x00\x00@A\x00\x00\x80A\x00\x00\xb8A\x00\x00\xd8A\x00\x00\xe0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg35
g4688
(g4670
(I0
tS'b'
tRp4958
(I1
(I4
I8
tg4744
I00
(lp4959
Ve
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
atbstRp4960
(dp4961
g4678
(dp4962
g38
I00
sg4667
I01
sg36
I01
sg37
I01
sg40
I01
sg39
I01
sg4674
I01
sg35
I00
ssg4680
g4945
sg4681
(lp4963
g4667
ag4674
ag35
ag36
ag37
ag38
ag39
ag40
asg4683
(lp4964
I4
aI8
asbsg4685
g4756
sg4687
g4688
(g4670
(I0
tS'b'
tRp4965
(I1
(I4
I8
tg105
I01
S'\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00'
tbsg4690
I01
sg4691
I8
sg4692
I-1
sg4693
(lp4966
g1
(g4695
g4665
(dp4967
g3045
I1
sg3047
Va
sg3056
Vc
stRp4968
ag1
(g4695
g4665
(dp4969
g3045
I2
sg3047
Va
sg3056
Vd
stRp4970
ag1
(g4695
g4665
(dp4971
g3045
I3
sg3047
Vb
sg3056
Vc
stRp4972
ag1
(g4695
g4665
(dp4973
g3045
I4
sg3047
Vb
sg3056
Vd
stRp4974
asg4698
Nsg4699
g3512
sg4700
I32
sg4701
I0
sg4702
I32
sg4703
I01
sbag1
(g4653
g3
NtRp4975
(dp4976
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4977
sg4658
(lp4978
sg4660
I207184688
sg11
g4802
sg6
g7
sg4662
I0
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp4979
g4667
g4668
(g4669
g4670
g4671
S'b'
tRp4980
(I1
(I1
I0
tg4673
I00
S''
S''
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp4981
(I1
(I1
I0
tg4673
I00
S''
S''
NtbstRp4982
(dp4983
g4678
(dp4984
g4667
I01
sg4674
I01
ssg4680
g4975
sg4681
(lp4985
g4667
ag4674
asg4683
(lp4986
I1
aI0
asbsg4685
g4686
sg4687
g4688
(g4670
(I0
tS'b'
tRp4987
(I1
(I1
I0
tg105
I00
S''
tbsg4690
I01
sg4691
I0
sg4692
I-1
sg4693
(lp4988
Nasg4698
Nsg4699
I0
sg4700
I0
sg4701
I0
sg4702
I0
sg4703
I01
sbag1
(g4653
g3
NtRp4989
(dp4990
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p4991
sg4658
(lp4992
sg4660
I207184688
sg11
g4723
sg6
g7
sg4662
I1
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp4993
g4667
g4668
(g4669
g4670
g4671
S'b'
tRp4994
(I1
(I1
I1
tg4673
I00
S'\x00\x00\x80?'
S'\x00'
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp4995
(I1
(I1
I1
tg4673
I00
S'\x00\x00\x00\x00'
S'\x00'
NtbstRp4996
(dp4997
g4678
(dp4998
g4667
I01
sg4674
I01
ssg4680
g4989
sg4681
(lp4999
g4667
ag4674
asg4683
(lp5000
I1
aI1
asbsg4685
g4686
sg4687
g4688
(g4670
(I0
tS'b'
tRp5001
(I1
(I1
I1
tg105
I00
S'\x00\x00\x00\x00'
tbsg4690
I01
sg4691
I1
sg4692
I-1
sg4693
(lp5002
Nasg4698
Nsg4699
g3527
sg4700
I1
sg4701
I0
sg4702
I1
sg4703
I01
sbag1
(g4653
g3
NtRp5003
(dp5004
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p5005
sg4658
(lp5006
sg4660
I207184688
sg11
g4738
sg6
g7
sg4662
I8
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp5007
g31
g4668
(g4669
g4670
g4671
S'b'
tRp5008
(I1
(I4
I8
tg4673
I00
S'\xe04\xd6=\xc0\xde\xd2=\xc0\xc8\xc7=`\x1b\xd8= \x0e\xd6=\xc0;\xd9=\x00\xfd\xd3=\x00P\xd3=\xa0\xc2\xc7= \xd0\xcb=\xe0\xa3\xd3= \x0c\xd9=\xe0:\xd4=\xc0X\xd1= \x1a\xcb= \x1c\xd3= \xd0\xd9=\xc0\xa3\xdb=\x00\xd0\xda=\xe0\xcc\xd6=\x80\x0f\xd7=@\xa3\xd4= \xc2\xd5= _\xd7=\x80W\xcb=\xa0Q\xcf=\x00\x05\xd4=@\xc7\xd5=@\xc7\xd5= \xf8\xdb=\xe07\xd7=\x80+\xd9='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g4668
(g4669
g4670
g4671
S'b'
tRp5009
(I1
(I4
I8
tg4673
I00
S'\x00\xcd\xd5= y\xd2=\xc0O\xc7=\xc0\xc2\xd7=\x80\x9f\xd5=\xc0\xcf\xd8=@I\xd3=\x00\xe3\xd2=@\x10\xc7=`)\xcb=@@\xd3=\x00P\xc9=\x00\xc6\xd3=@"\xd0=\xa0\xce\xca=\xa0\xba\xd2=\xc0\x91\xd9=\x80;\xdb= 2\xda=\xc0\xbf\xc5=\xc0\xa8\xd6=\xe09\xd4=\xc0\x1a\xd5=`\xf8\xd6=\xa0\xf8\xca=`\xd4\xce=\xc0\xc0\xd3=\x80\x15\xd5=@\x86\xd5=@\x8e\xdb= \xe7\xd6=`\xc9\xd8='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg4667
g4668
(g4669
g4670
g4671
S'b'
tRp5010
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg29
g4688
(g4670
(I0
tS'b'
tRp5011
(I1
(I4
I8
tg4744
I00
(lp5012
Vi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
atbsg32
g4688
(g4670
(I0
tS'b'
tRp5013
(I1
(I4
I8
tg4744
I00
(lp5014
Ve
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
atbsg33
g4668
(g4669
g4670
g4671
S'b'
tRp5015
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg30
g4668
(g4669
g4670
g4671
S'b'
tRp5016
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp5017
(I1
(I4
I8
tg4673
I00
S'\x00\x00@@\x00\x00\x80@\x00\x00\x00A\x00\x00@A\x00\x00\x90A\x00\x00\xb0A\x00\x00\xc8A\x00\x00\xf8A\x00\x00\x00@\x00\x00\xe0@\x00\x00 A\x00\x00PA\x00\x00\x80A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xf0A\x00\x00\x80?\x00\x00\xc0@\x00\x000A\x00\x00`A\x00\x00\x98A\x00\x00\xa8A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x10A\x00\x00pA\x00\x00\x88A\x00\x00\xa0A\x00\x00\xd0A\x00\x00\xe8A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp5018
(dp5019
g4678
(dp5020
g31
I01
sg34
I01
sg4667
I01
sg29
I00
sg4674
I01
sg33
I01
sg30
I01
sg32
I00
ssg4680
g5003
sg4681
(lp5021
g4667
ag4674
ag29
ag30
ag31
ag32
ag33
ag34
asg4683
(lp5022
I4
aI8
asbsg4685
g4756
sg4687
g4688
(g4670
(I0
tS'b'
tRp5023
(I1
(I4
I8
tg105
I01
S'\x03\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
tbsg4690
I01
sg4691
I8
sg4692
I-1
sg4693
(lp5024
g1
(g4695
g4665
(dp5025
g3530
I1
sg3534
Va
sg3546
Vc
stRp5026
ag1
(g4695
g4665
(dp5027
g3530
I2
sg3534
Va
sg3546
Vd
stRp5028
ag1
(g4695
g4665
(dp5029
g3530
I3
sg3534
Vb
sg3546
Vc
stRp5030
ag1
(g4695
g4665
(dp5031
g3530
I4
sg3534
Vb
sg3546
Vd
stRp5032
asg4698
Nsg4699
g4156
sg4700
I32
sg4701
I0
sg4702
I32
sg4703
I01
sbag1
(g4653
g3
NtRp5033
(dp5034
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p5035
sg4658
(lp5036
sg4660
I207184688
sg11
g4771
sg6
g7
sg4662
I8
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp5037
g38
g4688
(g4670
(I0
tS'b'
tRp5038
(I1
(I4
I8
tg4744
I00
(lp5039
Vi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
atbsg4667
g4668
(g4669
g4670
g4671
S'b'
tRp5040
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg36
g4668
(g4669
g4670
g4671
S'b'
tRp5041
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg37
g4668
(g4669
g4670
g4671
S'b'
tRp5042
(I1
(I4
I8
tg4673
I00
S'\x80\xa7\xdb=\xc0}\xd2=@j\xde=\x80O\xd7=\x80\x0b\xdd=\xe0_\xc8= 1\xc5=`\x1b\xd1=`r\xc0=\x80\xa4\xda=\xc0\xd6\xd6=@\xae\xd8=\xc0\x9c\xcf=\xc0\x95\xd7=\xa0\xd8\xd1=\xe0A\xda=`\x7f\xf5=\xc0L\xd4=@\x84\xdc=@\x02\xd1= 2\xd3= \x02\xcb=`\xdc\xd7=\xa0d\xd6=\xc0i\xc5=\xa0\xcc\xb4=\x80]\xd4=`\x9d\xd5=\xa0a\xdb=@\x04\xca=\x80\xf3\xd4= \xfd\xc1='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg40
g4668
(g4669
g4670
g4671
S'b'
tRp5043
(I1
(I4
I8
tg4673
I00
S'\x80R\xdb=\xc0\xda\xd1=\xc0\xd4\xda=\xe0\xcf\xd4=\xa0\xd0\xcb=\xe0\xf5\xc7=\xc0\xea\xc4=`\xba\xd0=\xc0\xda\xbf=@\x14\xda=\xe05\xd6= ,\xd8= 1\xcf=\x80.\xd7=\xe0\x85\xd1=`\xa0\xd9=\xe0\xcc\xf3=\xc0\xeb\xd3=`\x12\xdc= \xa0\xd0=\x00b\xd2=\xa0l\xca=@\x8b\xd7=\xc0\xaf\xd5=\xe0\x0c\xc5=`?\xb2=@\xf5\xd3=`<\xd5=\xc0\x02\xdb=`\x8f\xc9=\xe0D\xd4= \xe0\xbf='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g4668
(g4669
g4670
g4671
S'b'
tRp5044
(I1
(I4
I8
tg4673
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp5045
(I1
(I4
I8
tg4673
I00
S'\x00\x00@@\x00\x00\xa0@\x00\x00\x00A\x00\x00`A\x00\x00\x80A\x00\x00\xb0A\x00\x00\xd8A\x00\x00\xf8A\x00\x00\x00\x00\x00\x00\xc0@\x00\x00 A\x00\x00pA\x00\x00\x98A\x00\x00\xb8A\x00\x00\xd0A\x00\x00\xe8A\x00\x00\x80?\x00\x00\x80@\x00\x000A\x00\x00@A\x00\x00\x88A\x00\x00\xa8A\x00\x00\xc0A\x00\x00\xf0A\x00\x00\x00@\x00\x00\xe0@\x00\x00\x10A\x00\x00PA\x00\x00\x90A\x00\x00\xa0A\x00\x00\xc8A\x00\x00\xe0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg35
g4688
(g4670
(I0
tS'b'
tRp5046
(I1
(I4
I8
tg4744
I00
(lp5047
Ve
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVi
aVe
aVe
aVe
aVe
aVe
aVe
aVe
aVe
atbstRp5048
(dp5049
g4678
(dp5050
g38
I00
sg4667
I01
sg36
I01
sg37
I01
sg40
I01
sg39
I01
sg4674
I01
sg35
I00
ssg4680
g5033
sg4681
(lp5051
g4667
ag4674
ag35
ag36
ag37
ag38
ag39
ag40
asg4683
(lp5052
I4
aI8
asbsg4685
g4756
sg4687
g4688
(g4670
(I0
tS'b'
tRp5053
(I1
(I4
I8
tg105
I01
S'\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00'
tbsg4690
I01
sg4691
I8
sg4692
I-1
sg4693
(lp5054
g1
(g4695
g4665
(dp5055
g4173
I1
sg4175
Va
sg4184
Vc
stRp5056
ag1
(g4695
g4665
(dp5057
g4173
I2
sg4175
Va
sg4184
Vd
stRp5058
ag1
(g4695
g4665
(dp5059
g4173
I3
sg4175
Vb
sg4184
Vc
stRp5060
ag1
(g4695
g4665
(dp5061
g4173
I4
sg4175
Vb
sg4184
Vd
stRp5062
asg4698
Nsg4699
g4640
sg4700
I32
sg4701
I0
sg4702
I32
sg4703
I01
sbag1
(g4653
g3
NtRp5063
(dp5064
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p5065
sg4658
(lp5066
sg4660
I207184688
sg11
g4802
sg6
g7
sg4662
I0
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp5067
g4667
g4668
(g4669
g4670
g4671
S'b'
tRp5068
(I1
(I1
I0
tg4673
I00
S''
S''
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp5069
(I1
(I1
I0
tg4673
I00
S''
S''
NtbstRp5070
(dp5071
g4678
(dp5072
g4667
I01
sg4674
I01
ssg4680
g5063
sg4681
(lp5073
g4667
ag4674
asg4683
(lp5074
I1
aI0
asbsg4685
g4686
sg4687
g4688
(g4670
(I0
tS'b'
tRp5075
(I1
(I1
I0
tg105
I00
S''
tbsg4690
I01
sg4691
I0
sg4692
I-1
sg4693
(lp5076
Nasg4698
Nsg4699
I0
sg4700
I0
sg4701
I0
sg4702
I0
sg4703
I01
sbag1
(g4653
g3
NtRp5077
(dp5078
g4656
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.path.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u'', u'StartingBlock': u'a', u'UseMonkey': u'n'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="IRAP" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="norm" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="practice_postblock_B">\u000a      <CodeComponent name="practice_postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;prac_block_B_percentage_accuracy = (float(practice_trials_B.data['required_response_B.corr'].count()) - float(practice_trials_B.data['feedback_response_B.corr'].sum())) /  float(practice_trials_B.data['required_response_B.corr'].count()) * 100 &#10;prac_block_B_median_latency = np.median(practice_trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_B_percentage_accuracy', prac_block_B_percentage_accuracy)&#10;##thisExp.addData('prac_block_B_median_latency', prac_block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="practice_postblock_A">\u000a      <CodeComponent name="practice_postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    practice_trials_Afirst.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Afirst.data['required_response_A.corr'].count()) - float(practice_trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Afirst.data['required_response_A.rt'])&#10;&#10;try: &#10;    practice_trials_Asecond.data&#10;except NameError:&#10;    pass&#10;else:  # if it does exist, calculate block summary data&#10;    prac_block_A_percentage_accuracy = (float(practice_trials_Asecond.data['required_response_A.corr'].count()) - float(practice_trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(practice_trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    prac_block_A_median_latency = np.median(practice_trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, prac_block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, prac_block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('prac_block_A_percentage_accuracy', prac_block_A_percentage_accuracy)&#10;##thisExp.addData('prac_block_A_median_latency', prac_block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="practice_aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="practice_latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="practice_latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_prac_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_prac_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="practice_postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="practice_postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$end_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="end_response">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="end_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'return'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".4" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_B">\u000a      <CodeComponent name="postblock_code_B">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;block_B_percentage_accuracy = (float(trials_B.data['required_response_B.corr'].count()) - float(trials_B.data['feedback_response_B.corr'].sum())) /  float(trials_B.data['required_response_B.corr'].count()) * 100 &#10;block_B_median_latency = np.median(trials_B.data['required_response_B.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_B_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_B_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_B_percentage_accuracy', block_B_percentage_accuracy)&#10;##thisExp.addData('block_B_median_latency', block_B_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_B">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="postblock_A">\u000a      <CodeComponent name="postblock_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="postblock_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# calculate summary stats&#10;try:  # first check which block was run by seeing if the object exists&#10;    trials_Afirst.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Afirst.data['required_response_A.corr'].count()) - float(trials_Afirst.data['feedback_response_A.corr'].sum())) /  float(trials_Afirst.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Afirst.data['required_response_A.rt'])&#10;&#10;try:&#10;    trials_Asecond.data&#10;except NameError:&#10;    continue&#10;else:  # if it does exist, calculate block summary data&#10;    block_A_percentage_accuracy = (float(trials_Asecond.data['required_response_A.corr'].count()) - float(trials_Asecond.data['feedback_response_A.corr'].sum())) /  float(trials_Asecond.data['required_response_A.corr'].count()) * 100 &#10;    block_A_median_latency = np.median(trials_Asecond.data['required_response_A.rt'])&#10;&#10;# set messages&#10;msg_accuracy = &quot;%s %i %s&quot; %(accuracy, block_A_percentage_accuracy, percentCorrect) &#10;msg_latency = &quot;%s %.2f %s&quot; %(speed, block_A_median_latency, seconds)&#10;&#10;### save summary stats to experiment handler so they're written to the csv file&#10;##thisExp.addData('block_A_percentage_accuracy', block_A_percentage_accuracy)&#10;##thisExp.addData('block_A_median_latency', block_A_median_latency)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="aim_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="aim_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$aim" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_accuracy" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="latency_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="latency_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg_latency" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.2]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="press_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="press_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$press_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -0.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="postblock_response_A">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="postblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial_B">\u000a      <CodeComponent name="trial_code_B">\u000a        <Param name="Begin Experiment" val="#msg variable just needs some value at start&#10;accuracyFeedback=''" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_B" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'  # PATTERN REVERED FROM BLOCK A&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_B.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_B">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_B">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_B" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_A">\u000a      <CodeComponent name="trial_code_A">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trial_code_A" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(0.5, 'e'), (0.5, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# For each stimlulus, choose a random exemplar from the appropriate list&#10;# word stimulus 1&#10;if stimulus1_category == 'a':&#10;    stimulus1 = stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    stimulus1 = stim1_catB_stimuli_many.pop()&#10;&#10;# word stimulus 2&#10;if stimulus2_category == 'c':&#10;    stimulus2 = stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    stimulus2 = stim2_catB_stimuli_many.pop()&#10;&#10;# image stimulus 1&#10;if stimulus1_category == 'a':&#10;    img_stimulus1 = img_stim1_catA_stimuli_many.pop()&#10;elif stimulus1_category == 'b':&#10;    img_stimulus1 = img_stim1_catB_stimuli_many.pop()&#10;&#10;# image stimulus 2&#10;if stimulus2_category == 'c':&#10;    img_stimulus2 = img_stim2_catA_stimuli_many.pop()&#10;elif stimulus2_category == 'd':&#10;    img_stimulus2 = img_stim2_catB_stimuli_many.pop()&#10;&#10;# set correct and incorrect responses&#10;if string_to_booleanl(moving_response_options) == False:&#10;    response_option_left = response_option_B  # i.e., the focal trial type is the right hand one, for hand dominance&#10;    response_option_right = response_option_A&#10;    response_option_onset = 0  # response options are onscreen constantly&#10;    if (trialType == 1) or (trialType == 4):&#10;        required_allowed = 'i'&#10;        required_correct = 'i'&#10;        feedback_allowed = 'e'&#10;        feedback_correct = 'e'&#10;    elif (trialType == 2) or (trialType == 3):&#10;        required_allowed = 'e'&#10;        required_correct = 'e'&#10;        feedback_allowed = 'i'&#10;        feedback_correct = 'i'&#10;elif string_to_booleanl(moving_response_options) == True:&#10;    rand_positions = randint(1, 3)&#10;    response_option_onset = 0.4  # response options appear with stimuli&#10;    if rand_positions == 1:&#10;        response_option_left = response_option_B&#10;        response_option_right = response_option_A&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;    elif rand_positions == 2:&#10;        response_option_left = response_option_A&#10;        response_option_right = response_option_B&#10;        if (trialType == 1) or (trialType == 4):&#10;            required_allowed = 'e'&#10;            required_correct = 'e'&#10;            feedback_allowed = 'i'&#10;            feedback_correct = 'i'&#10;        elif (trialType == 2) or (trialType == 3):&#10;            required_allowed = 'i'&#10;            required_correct = 'i'&#10;            feedback_allowed = 'e'&#10;            feedback_correct = 'e'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="# save exemplars to experiment handler so they're written to the csv file&#10;thisExp.addData('stimulus1', stimulus1)&#10;thisExp.addData('stimulus2', stimulus2)&#10;thisExp.addData('img_stimulus1', img_stimulus1)&#10;thisExp.addData('img_stimulus2', img_stimulus2)&#10;thisExp.addData('response_option_left', response_option_left)&#10;thisExp.addData('response_option_right', response_option_right)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="# Accuracy feedback message&#10;if len(feedback_response_A.keys)&lt;1:&#10;    accuracyFeedback=&quot;&quot;&#10;else:&#10;    accuracyFeedback=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <ImageComponent name="image_stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <ImageComponent name="image_stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="flipVert" val="False" valType="bool" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="image_stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="color" val="$[1,1,1]" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="mask" val="None" valType="str" updates="constant"/>\u000a        <Param name="pos" val="image_stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="texture resolution" val="128" valType="code" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="flipHoriz" val="False" valType="bool" updates="constant"/>\u000a        <Param name="image" val="$img_stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </ImageComponent>\u000a      <TextComponent name="stimulus1_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus1_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus1" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus1_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="stimulus2_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus2_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$stimulus2" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="stimulus2_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="required_response_A">\u000a        <Param name="correctAns" val="$required_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response_A">\u000a        <Param name="correctAns" val="$feedback_correct" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="left_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="left_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_left" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_left_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="right_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="right_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$response_option_right" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="response_option_right_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="0" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="$response_option_onset" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="accuracy_feedback_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="accuracy_feedback_box_A" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$accuracyFeedback" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="accuracy_feedback_location" valType="code" updates="set every repeat"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="end_practice_blocks">\u000a      <CodeComponent name="end_practice_code">\u000a        <Param name="Begin Experiment" val="# by default, don't do test blocks. Change elsewhere if mastery criteria are met.&#10;complete_test_blocks = 0" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="end_practice_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Assess if acc and latency mastery criteria were met&#10;if (prac_block_A_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_B_percentage_accuracy &gt;= accuracyCriterion) and (prac_block_A_median_latency &lt;= latencyCriterion) and (prac_block_B_median_latency &lt;= latencyCriterion):&#10;    complete_test_blocks = n_pairs_test_blocks # latter from blocks.xlsx&#10;    practice_blocks.finished = True" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="preblock_A">\u000a      <CodeComponent name="preblock_A_code">\u000a        <Param name="Begin Experiment" val="# msg variable just needs some value at start&#10;accuracyFeedback=''&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_A_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_A">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_A" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="orange" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_A" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_A">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_A" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="preblock_B">\u000a      <CodeComponent name="preblock_B_code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="preblock_B_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()&#10;&#10;# Generate list of stimuli for the block&#10;stim1_catA_stimuli_many = generate_trials('labelA_stimuli', 2, True)  # function and variable determined at begin exp.&#10;stim1_catB_stimuli_many = generate_trials('labelB_stimuli', 2, True)&#10;stim2_catA_stimuli_many = generate_trials('targetA_stimuli', 2, True)&#10;stim2_catB_stimuli_many = generate_trials('targetB_stimuli', 2, True)&#10;img_stim1_catA_stimuli_many = generate_trials('labelA_image_stimuli', 2, True)&#10;img_stim1_catB_stimuli_many = generate_trials('labelB_image_stimuli', 2, True)&#10;img_stim2_catA_stimuli_many = generate_trials('targetA_image_stimuli', 2, True)&#10;img_stim2_catB_stimuli_many = generate_trials('targetB_image_stimuli', 2, True)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="rule_box_B">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="rule_box_B" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="cyan" valType="str" updates="constant"/>\u000a        <Param name="text" val="$rule_B" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="preblock_response_B">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="preblock_response_B" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <CodeComponent name="inst_code">\u000a        <Param name="Begin Experiment" val="# Dependencies &#10;from psychopy.hardware.emulator import ResponseEmulator  #for response emulator&#10;import itertools  # for flattening lists of lists into lists&#10;import random  # for shuffling lists&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['UseMonkey']) == 'y' or str(expInfo['UseMonkey']) == 'Y' or str(expInfo['UseMonkey']) == 'yes' or str(expInfo['UseMonkey']) == 't' or str(expInfo['UseMonkey']) == 'true' or str(expInfo['UseMonkey']) == 'True' or str(expInfo['UseMonkey']) == 'TRUE':&#10;    Monkey = True&#10;else:&#10;    Monkey = False&#10;&#10;# Assess if monkey should run based on dialogue box&#10;if str(expInfo['StartingBlock']) == 'a' or str(expInfo['StartingBlock']) == 'A':&#10;    starting_block = 'a'&#10;    Afirst_nReps = 1&#10;    Asecond_nReps = 0&#10;elif str(expInfo['StartingBlock']) == 'b' or str(expInfo['StartingBlock']) == 'B':&#10;    starting_block = 'b'&#10;    Afirst_nReps = 0&#10;    Asecond_nReps = 1&#10;&#10;# FUNCTIONS FOR GENERATING SHUFFLED LISTS OF STIMULI FOR TRIALS&#10;# To convert the moving_response_options String to a boolean:&#10;def string_to_booleanl(v):&#10;  return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;TRUE&quot;, &quot;True&quot;, &quot;t&quot;, &quot;T&quot;, &quot;1&quot;)  # Take any likely input from the blocks.xlsx file and convert to a boolean. This helps to idiot-proof the excel files.&#10;&#10;&quot;&quot;&quot;&#10;Create sufficiently long lists of stimuli&#10;&#10;This allows us to keep the stimuli in an excel file across multiple lines, and to present them based on the categories &#10;set by the 'layout.xlsx' file. This allows for shuffled (counterbalanced pseudorandom) presentation of the stimuli examplars &#10;as well as the categories. &#10;&#10;The method to do this below is to first declare a dictionary to be populated from the exemplars conditions, but not in the usual way. &#10;Usually, psychopy would read across columns. If the stimuli were entered as a list within the excel file (e.g., ['male', 'female']) &#10;rather on seperate rows as they are now all we would have to do is multiply the length of the list to get enough exemplars. However, &#10;I wanted the stimuli file to be as use friendly as possible, so instead the below code allows you to enter the exemplars on seperate&#10;rows, and then populates the dict vertically from the rows. &#10;&quot;&quot;&quot;&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars&#10;&#10;# Determine nReps of trials loop based on number of exemplars&#10;reptitions = len(exemplars)&#10;&#10;# Trial generation function&#10;def generate_trials(trial_type_column, multiplier, shuffle_list):&#10;    &quot;&quot;&quot;Generate a shuffled list of stimuli exemplars from a column in an excel stimuli file&quot;&quot;&quot; &#10;    a = dict()  # declare a dict to be populated&#10;    for i in range(len(exemplars)):&#10;        a[i] = [exemplars[i][trial_type_column]] * multiplier  # populate the dict from vertical reads of the conditions&#10;    a = a.values()  # extract only values (and not keys) from the list of dicts&#10;    a = list(itertools.chain(*a))  # flatten the list of dicts into a list&#10;    if shuffle_list == True:&#10;        random.shuffle(a)  # shuffle this list, so that it can be drawn from by the trials&#10;    return a&#10;&#10;# Generate a first, unshuffled list of the stimuli exemplars for saving to output file&#10;# no shuffling, multiplier = 1.&#10;labelA_stimuli_for_output = generate_trials('labelA_stimuli', 1, False)  # function and variable determined at begin exp.&#10;labelB_stimuli_for_output = generate_trials('labelB_stimuli', 1, False)&#10;targetA_stimuli_for_output = generate_trials('targetA_stimuli', 1, False)&#10;targetB_stimuli_for_output = generate_trials('targetB_stimuli', 1, False)&#10;labelA_image_stimuli_for_output = generate_trials('labelA_image_stimuli', 1, False)&#10;labelB_image_stimuli_for_output = generate_trials('labelB_image_stimuli', 1, False)&#10;targetA_image_stimuli_for_output = generate_trials('targetA_image_stimuli', 1, False)&#10;targetB_image_stimuli_for_output = generate_trials('targetB_image_stimuli', 1, False)&#10;# save these lists to the trial handler to be written to csv&#10;thisExp.addData('labelA_stimuli_for_output', labelA_stimuli_for_output)&#10;thisExp.addData('labelB_stimuli_for_output', labelB_stimuli_for_output)&#10;thisExp.addData('targetA_stimuli_for_output', targetA_stimuli_for_output)&#10;thisExp.addData('targetB_stimuli_for_output', targetB_stimuli_for_output)&#10;thisExp.addData('labelA_image_stimuli_for_output', labelA_image_stimuli_for_output)&#10;thisExp.addData('labelB_image_stimuli_for_output', labelB_image_stimuli_for_output)&#10;thisExp.addData('targetA_image_stimuli_for_output', targetA_image_stimuli_for_output)&#10;thisExp.addData('targetB_image_stimuli_for_output', targetB_image_stimuli_for_output)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="inst_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# Option to simulates using ResponseEmulator:&#10;if Monkey:&#10;    simulated_responses = [(1.1, 'e'), (1.1, 'i')]  # simulated responses take the form (onsetTime, responseKey). You can simulate more than one.&#10;    responder = ResponseEmulator(simulated_responses)&#10;    responder.start()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="intro_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="intro_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.5" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$intro_message" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.4" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="intro_resp">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="intro_resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="task">\u000a      <Param name="conditionsFile" val="task.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="task" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'accuracyCriterion': 60, u'seconds': u'seconds', u'n_pairs_practice_blocks': 4, u'percentCorrect': u'percent correct', u'speed': u'Speed:', u'moving_response_options': u'False', u'rule_A': u&quot;Respond AS IF men are masculine and women are feminine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'rule_B': u&quot;Respond AS IF men are feminine and women are masculine\u005cn\u005cnUse the 'e' and 'i' keys&quot;, u'aim': u'Aim for &gt;80% and &lt;2 seconds', u'response_option_B': u'Similar', u'response_option_A': u'Different', u'latencyCriterion': 2, u'n_pairs_test_blocks': 3, u'accuracy': u'Accuracy:'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="max_pairs_practice_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Afirst"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="practice_trials_B"/>\u000a    <Routine name="practice_postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="practice_trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="practice_trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="practice_trials_Asecond"/>\u000a    <Routine name="practice_postblock_A"/>\u000a    <LoopTerminator name="practice_Asecond"/>\u000a    <Routine name="end_practice_blocks"/>\u000a    <LoopTerminator name="practice_blocks"/>\u000a    <LoopInitiator loopType="TrialHandler" name="test_blocks">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="test_blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="complete_test_blocks" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <LoopInitiator loopType="TrialHandler" name="Afirst">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Afirst_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Afirst">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Afirst" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Afirst"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Afirst"/>\u000a    <Routine name="preblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_B">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_B" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_B"/>\u000a    <LoopTerminator name="trials_B"/>\u000a    <Routine name="postblock_B"/>\u000a    <LoopInitiator loopType="TrialHandler" name="Asecond">\u000a      <Param name="conditionsFile" val="" valType="str" updates="None"/>\u000a      <Param name="name" val="Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="Asecond_nReps" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="preblock_A"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_Asecond">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_Asecond" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="reptitions" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trialType': 1, u'stimulus1_category': u'a', u'stimulus2_category': u'c'}, {u'trialType': 2, u'stimulus1_category': u'a', u'stimulus2_category': u'd'}, {u'trialType': 3, u'stimulus1_category': u'b', u'stimulus2_category': u'c'}, {u'trialType': 4, u'stimulus1_category': u'b', u'stimulus2_category': u'd'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial_A"/>\u000a    <LoopTerminator name="trials_Asecond"/>\u000a    <Routine name="postblock_A"/>\u000a    <LoopTerminator name="Asecond"/>\u000a    <LoopTerminator name="test_blocks"/>\u000a    <Routine name="end"/>\u000a    <LoopTerminator name="task"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p5079
sg4658
(lp5080
sg4660
I207184688
sg11
S'test_blocks'
p5081
sg6
g7
sg4662
I0
sg41
I01
sg42
g43
sg4663
g1
(g4664
g4665
(dp5082
g4667
g4668
(g4669
g4670
g4671
S'b'
tRp5083
(I1
(I1
I0
tg4673
I00
S''
S''
Ntbsg4674
g4668
(g4669
g4670
g4671
S'b'
tRp5084
(I1
(I1
I0
tg4673
I00
S''
S''
NtbstRp5085
(dp5086
g4678
(dp5087
g4667
I01
sg4674
I01
ssg4680
g5077
sg4681
(lp5088
g4667
ag4674
asg4683
(lp5089
I1
aI0
asbsg4685
g4686
sg4687
g4688
(g4670
(I0
tS'b'
tRp5090
(I1
(I1
I0
tg105
I00
S''
tbsg4690
I01
sg4691
I0
sg4692
I-1
sg4693
(lp5091
Nasg4698
Nsg4699
I0
sg4700
I0
sg4701
I0
sg4702
I0
sg4703
I01
sbasS'savePickle'
p5092
I00
sb.